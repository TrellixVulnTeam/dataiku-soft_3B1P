#
# nginx configuration file generation
#
import os
import base


design_template = '''
# This file is automatically generated. Manual edits will be lost upon DSS updates.

error_log stderr;
pid "{{DIP_HOME}}/run/nginx/nginx.pid";
daemon off;
working_directory "{{DIP_HOME}}/run/nginx";

events {
    worker_connections 10000;
}

http {
    gzip on;
    gzip_types text/javascript application/json text/css image/svg+xml;
    client_max_body_size 0;
    large_client_header_buffers 8 64k;
    server_tokens off;

    types {
        text/html       html htm shtml;
        text/css        css;
        text/javascript js;
        text/css        less;
        audio/mpeg      mp3;
        image/svg+xml   svg;
    }

    access_log "{{DIP_HOME}}/run/nginx/access.log";
    client_body_temp_path "{{DIP_HOME}}/run/nginx";
    proxy_temp_path "{{DIP_HOME}}/run/nginx";
    # Define these even if we don't use them to avoid permission issues
    fastcgi_temp_path "{{DIP_HOME}}/run/nginx";
    scgi_temp_path "{{DIP_HOME}}/run/nginx";
    uwsgi_temp_path "{{DIP_HOME}}/run/nginx";

    proxy_http_version 1.1;
    proxy_next_upstream off; # Don't retry
    proxy_read_timeout 3600; # We have long queries
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header x-dss-nginx-client-ip $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    server {
{{LISTEN_DIRECTIVES}}
        root "{{DKUINSTALLDIR}}/frontend";

        include "{{DIP_HOME}}/install-support/backends.d/*/*.conf";
        include "{{DIP_HOME}}/install-support/python-backends.d/*.conf"; #legacy location

        {{GLOBAL_SECURITY_HEADERS_DIRECTIVES}}

        location ^~ /dip/ {
            proxy_pass http://127.0.0.1:{{DKU_BACKEND_PORT}}/dip/;
            {{GLOBAL_SECURITY_HEADERS_DIRECTIVES}}
            {{API_SECURITY_HEADERS_DIRECTIVES}}
        }
        location ^~ /public/packages/ {
            alias "{{DKUINSTALLDIR}}/public/packages/";
        }
        location /public/packages/dataiku-scoring-libs.jar {
            proxy_pass http://127.0.0.1:{{DKU_BACKEND_PORT}}/dip/publicapi/resources/scoring-lib-jar/;
        }
        location ^~ /public/api/ {
            proxy_pass http://127.0.0.1:{{DKU_BACKEND_PORT}}/dip/publicapi/;
        }
        location ^~ /jupyter/ {
            proxy_pass http://127.0.0.1:{{DKU_IPYTHON_PORT}}/jupyter/;
            proxy_redirect off;
            proxy_read_timeout 600;
            proxy_send_timeout 600;
        }

        {{EVENT_SERVER_LOCATION}}

        location ~ ^/plugins/([^/]+)/resource/(.*)$ {
            root /;
            try_files {{DIP_HOME}}/plugins/installed/$1/resource/$2 {{DIP_HOME}}/plugins/dev/$1/resource/$2
            {{GLOBAL_SECURITY_HEADERS_DIRECTIVES}}
            add_header Cache-Control private;
            expires 0;
            location ~ ^/plugins/([^/]+)/resource/(.*\.(html|css|js))$ {
                try_files {{DIP_HOME}}/plugins/installed/$1/resource/$2 {{DIP_HOME}}/plugins/dev/$1/resource/$2
                {{GLOBAL_SECURITY_HEADERS_DIRECTIVES}}
                add_header Cache-Control private;
                expires -1;    # Equivalent to cache-control: no-cache
            }
        }
        location / {
            rewrite ^/(home|profile|project-list|projects|wikis|login|logged-out|admin|apps|plugins-explore|plugins|libedition|catalog|inbox|automation|deployer|api-deployer|project-deployer|alation-open|external-table|meanings).*$ /index.html break;
            index index.html;
            add_header Cache-Control "private, no-cache, max-age=0";
            expires 0;
            {{GLOBAL_SECURITY_HEADERS_DIRECTIVES}}
            {{STATIC_SECURITY_HEADERS_DIRECTIVES}}
            location ~ ^/themes/builtin/([^/]+)/(.*)$ {
                alias "{{DKUINSTALLDIR}}/resources/themes/$1/$2";
            }
            location ~ ^/themes/user/([^/]+)/(.*)$ {
                alias "{{DIP_HOME}}/resources/themes/$1/$2";
            }
        }
        location ~ ^/ngxdist/(.*)$ {
            {{GLOBAL_SECURITY_HEADERS_DIRECTIVES}}
            {{STATIC_SECURITY_HEADERS_DIRECTIVES}}
            add_header Cache-Control "private, no-cache, max-age=0";
            expires -1;    # Equivalent to cache-control: no-cache
            alias "{{DKUINSTALLDIR}}/frontend/ngxdist/$1";
        }
        location ~ ^/.*\.(html|css|js)$ {
            rewrite ^/(home|profile|project-list|projects|wikis|login|logged-out|admin|apps|plugins-explore|plugins|libedition|catalog|inbox|automation|deployer|api-deployer|project-deployer|alation-open|external-table|meanings).*$ /index.html break;
            index index.html;
            {{GLOBAL_SECURITY_HEADERS_DIRECTIVES}}
            {{STATIC_SECURITY_HEADERS_DIRECTIVES}}
            add_header Cache-Control "private, no-cache, max-age=0";
            expires -1;    # Equivalent to cache-control: no-cache
        }
        location ^~ /local/static/ {
            alias "{{DIP_HOME}}/local/static/";
        }
    }
}
'''
design_tmpl_vars = [
    "DKUINSTALLDIR", "DIP_HOME", "DKU_BACKEND_PORT", "DKU_IPYTHON_PORT", "DKU_EVENTSERVER_PORT"
]


apinode_template = '''
# This file is automatically generated. Manual edits will be lost upon DSS updates.

error_log stderr;
pid "{{DIP_HOME}}/run/nginx/nginx.pid";
daemon off;
working_directory "{{DIP_HOME}}/run/nginx";

events {
    worker_connections 768;
}

http {
    gzip on;
    gzip_types application/json;
    client_max_body_size 10000m;
    server_tokens off;

    access_log "{{DIP_HOME}}/run/nginx/access.log";
    client_body_temp_path "{{DIP_HOME}}/run/nginx";
    proxy_temp_path "{{DIP_HOME}}/run/nginx";
    # Define these even if we don't use them to avoid permission issues
    fastcgi_temp_path "{{DIP_HOME}}/run/nginx";
    scgi_temp_path "{{DIP_HOME}}/run/nginx";
    uwsgi_temp_path "{{DIP_HOME}}/run/nginx";

    proxy_http_version 1.1;
    proxy_next_upstream off; # Don't retry
    proxy_read_timeout 3600; # We have long queries
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    server {
{{LISTEN_DIRECTIVES}}
        location /public/ {
            proxy_pass http://127.0.0.1:{{DKU_APIMAIN_PORT}}/public/;
        }
        location /admin/ {
            proxy_pass http://127.0.0.1:{{DKU_APIMAIN_PORT}}/admin/;
        }
        location /monitoring/ {
            proxy_pass http://127.0.0.1:{{DKU_APIMAIN_PORT}}/monitoring/;
        }

        location /isAlive/ {
            proxy_pass http://127.0.0.1:{{DKU_APIMAIN_PORT}}/isAlive/;
        }
    }
}
'''
apinode_tmpl_vars = [
    "DKUINSTALLDIR", "DIP_HOME", "DKU_APIMAIN_PORT"
]


fm_template = '''
# This file is automatically generated. Manual edits will be lost upon FM updates.

error_log stderr;
pid "{{DIP_HOME}}/run/nginx/nginx.pid";
daemon off;
working_directory "{{DIP_HOME}}/run/nginx";

events {
    worker_connections 768;
}

http {
    gzip on;
    gzip_types text/javascript application/json text/css image/svg+xml;
    client_max_body_size 0;
    server_tokens off;
    large_client_header_buffers 8 64k;

    types {
        text/html       html htm shtml;
        text/css        css;
        text/javascript js;
        text/css        less;
        audio/mpeg      mp3;
        image/svg+xml   svg;
    }

    access_log "{{DIP_HOME}}/run/nginx/access.log";
    client_body_temp_path "{{DIP_HOME}}/run/nginx";
    proxy_temp_path "{{DIP_HOME}}/run/nginx";
    # Define these even if we don't use them to avoid permission issues
    fastcgi_temp_path "{{DIP_HOME}}/run/nginx";
    scgi_temp_path "{{DIP_HOME}}/run/nginx";
    uwsgi_temp_path "{{DIP_HOME}}/run/nginx";

    proxy_http_version 1.1;
    proxy_next_upstream off; # Don't retry
    proxy_read_timeout 3600; # We have long queries
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    server {
{{LISTEN_DIRECTIVES}}
        root "{{DKUINSTALLDIR}}/fm-frontend";

        location /api/ {
            proxy_pass http://127.0.0.1:{{DKU_FMMAIN_PORT}}/api/;
        }
        location / {
            rewrite ^/(home|instances|tenant|virtual-networks|instance-templates|users|login|blueprints).*$ /index.html break;
            index index.html;
            add_header Cache-Control "private, no-cache, max-age=0";
            expires 0;
            {{STATIC_SECURITY_HEADERS_DIRECTIVES}}
        }
        location ~ ^/.*\.(html|css|js)$ {
            rewrite ^/(home|instances|tenant|virtual-networks|instance-templates|users|login|blueprints).*$ /index.html break;
            index index.html;
            {{STATIC_SECURITY_HEADERS_DIRECTIVES}}
            add_header Cache-Control "private, no-cache, max-age=0";
            expires -1;    # Equivalent to cache-control: no-cache
        }
    }
}
'''
fm_tmpl_vars = [
    "DKUINSTALLDIR", "DIP_HOME", "DKU_FMMAIN_PORT"
]



gh_template = '''
# This file is automatically generated. Manual edits will be lost upon GH updates.

error_log stderr;
pid "{{DIP_HOME}}/run/nginx/nginx.pid";
daemon off;
working_directory "{{DIP_HOME}}/run/nginx";

events {
    worker_connections 768;
}

http {
    gzip on;
    gzip_types text/javascript application/json text/css image/svg+xml;
    client_max_body_size 0;
    server_tokens off;
    large_client_header_buffers 8 64k;

    types {
        text/html       html htm shtml;
        text/css        css;
        text/javascript js;
        text/css        less;
        audio/mpeg      mp3;
        image/svg+xml   svg;
    }

    access_log "{{DIP_HOME}}/run/nginx/access.log";
    client_body_temp_path "{{DIP_HOME}}/run/nginx";
    proxy_temp_path "{{DIP_HOME}}/run/nginx";
    # Define these even if we don't use them to avoid permission issues
    fastcgi_temp_path "{{DIP_HOME}}/run/nginx";
    scgi_temp_path "{{DIP_HOME}}/run/nginx";
    uwsgi_temp_path "{{DIP_HOME}}/run/nginx";

    proxy_http_version 1.1;
    proxy_next_upstream off; # Don't retry
    proxy_read_timeout 3600; # We have long queries
    proxy_set_header x-dss-nginx-client-ip $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    server {
{{LISTEN_DIRECTIVES}}
        root "{{DKUINSTALLDIR}}/gh-frontend";
        location /api/ {
            proxy_pass http://127.0.0.1:{{DKU_GHSERVER_PORT}}/api/;
        }
        location /publicapi/ {
            proxy_pass http://127.0.0.1:{{DKU_GHSERVER_PORT}}/publicapi/;
        }
        location / {
            rewrite ^/(login|logged-out|artifact|blueprint|blueprints|admin|pages).*$ /index.html break;
            index index.html;
            add_header Cache-Control "private, no-cache, max-age=0";
            expires 0;
            {{STATIC_SECURITY_HEADERS_DIRECTIVES}}
        }
        location ~ ^/.*\.(html|css|js)$ {
            rewrite ^/(login|logged-out|artifact|blueprint|blueprints|admin|pages).*$ /index.html break;
            index index.html;
            {{STATIC_SECURITY_HEADERS_DIRECTIVES}}
            add_header Cache-Control "private, no-cache, max-age=0";
            expires -1;    # Equivalent to cache-control: no-cache
        }
    }
}
'''
gh_tmpl_vars = [
    "DKUINSTALLDIR", "DIP_HOME", "DKU_GHSERVER_PORT"
]

#
# Quote a nginx string value to be included into a double-quoted string param
#
def quote(s):
    return s.replace('\\', '\\\\').replace('"', '\\"')

#
# Generate the listen directives
#
def nginx_listen_directives(config):
    # Assumes DKU_NGINX_PORT == DKU_BASE_PORT
    main_port = config.getServerPort()
    ssl = config.getBoolOption('server', 'ssl', False)
    ipv6 = config.getBoolOption('server', 'ipv6', False)
    listen_on_ipv4 = config.getOption('server','listen_on')
    listen_on_ipv6 = config.getOption('server','listen_on_ipv6','[::]')

    additional_ports = config.getOption("server", "additional_ports")
    if additional_ports is not None:
        additional_ports = additional_ports.split(",")
    else:
        additional_ports = []

    all_ports = [main_port] + additional_ports

    result = ""
    for port in all_ports:
        result += '        listen %s%s%s;\n' % ( '{}:'.format(listen_on_ipv4) if listen_on_ipv4 else '', port, ' ssl' if ssl else '')
        if ipv6:
            result += '        listen %s:%s%s;\n' % (listen_on_ipv6, port, ' ssl' if ssl else '')

    if ssl:
        ssl_certificate = config.getOption('server', 'ssl_certificate')
        if not ssl_certificate:
            raise Exception("missing mandatory ssl_certificate option in config file: %s" % config.filename)
        ssl_certificate_key = config.getOption('server', 'ssl_certificate_key')
        if not ssl_certificate_key:
            raise Exception("missing mandatory ssl_certificate_key option in config file: %s" % config.filename)
        result += '        ssl_certificate "%s";\n' % quote(ssl_certificate)
        result += '        ssl_certificate_key "%s";\n' % quote(ssl_certificate_key)

        ssl_client_certificate = config.getOption('server','ssl_client_certificate')
        if ssl_client_certificate:
            result += '        ssl_client_certificate "%s";\n' % quote(ssl_client_certificate)
            result += '        ssl_verify_client on;\n'
            ssl_verify_depth = config.getIntOption('server','ssl_verify_depth')
            if ssl_verify_depth is not None:
                result += '        ssl_verify_depth %u;\n' % ssl_verify_depth

        ssl_ciphers = config.getOption('server', 'ssl_ciphers', 'default')
        if ssl_ciphers == 'recommended':
            result += '        ssl_protocols TLSv1.2;\n'
            result += '        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n'
            result += '        ssl_dhparam "{{DKUINSTALLDIR}}/resources/nginx/dhparam2048.pem";\n'
            result += '        ssl_session_timeout 1d;\n'
            result += '        ssl_session_cache shared:DSS:5m;\n'
            result += '        ssl_session_tickets off;\n'
        elif ssl_ciphers == 'default':
            pass
        else:
            raise Exception("invalid value for ssl_ciphers option in config file: %s" % config.filename)

        # HTTP to HTTPS automatic redirection
        nodeType = config.getNodeType()
        if nodeType == 'design' or nodeType == "automation":
            result += '        error_page 497 https://$host:$server_port$request_uri;\n'

    return result

def nginx_eventserver_location(config):
    if config.getBoolOption("eventserver", "enabled", False):
        return """
        location /events {
            proxy_pass http://127.0.0.1:{{DKU_EVENTSERVER_PORT}}/events;
        }"""
    else:
        return ""

#
# Generates the nginx configuration corresponding to dipHome
# Assumes the environment variables in env-default have been sourced
#
def generate_nginx_config(dipHome):
    config = dipHome.get_install_config()
    nodeType = config.getNodeType()
    if nodeType == 'design' or nodeType == "automation":
        template = design_template
        tmpl_vars = design_tmpl_vars
    elif nodeType == 'api':
        template = apinode_template
        tmpl_vars = apinode_tmpl_vars
    elif nodeType == 'fm':
        template = fm_template
        tmpl_vars = fm_tmpl_vars
    elif nodeType == 'gh':
        template = gh_template
        tmpl_vars = gh_tmpl_vars
        
    else:
        raise Exception("Node type not supported: %s" % nodeType)

    result = template.replace("{{LISTEN_DIRECTIVES}}", nginx_listen_directives(config))

    result = result.replace("{{EVENT_SERVER_LOCATION}}", nginx_eventserver_location(config))

    global_sec_headers = ""
    static_sec_headers = ""
    api_sec_headers = ""

    if config.getBoolOption('server', 'ssl', False):
        hsts = config.getOption("server", "hsts-max-age")
        if hsts:
            global_sec_headers += '      add_header Strict-Transport-Security "max-age=%s";\n' % hsts

    xfo = config.getOption("server", "x-frame-options")
    if xfo:
        static_sec_headers += '      add_header "X-Frame-Options" %s;\n' % xfo
    csp = config.getOption("server", "content-security-policy")
    if csp:
        static_sec_headers += '      add_header "Content-Security-Policy" "%s";\n' % csp
    xxss = config.getOption("server", "X-XSS-Protection")
    if xxss:
        static_sec_headers += '      add_header "X-XSS-Protection" "%s";\n' % xxss

    xcto = config.getOption("server", "x-content-type-options")
    if xcto:
        static_sec_headers += '      add_header "X-Content-Type-Options" "%s";\n' % xcto
        api_sec_headers += '      add_header "X-Content-Type-Options" "%s";\n' % xcto

    result = result.replace("{{GLOBAL_SECURITY_HEADERS_DIRECTIVES}}", global_sec_headers)
    result = result.replace("{{STATIC_SECURITY_HEADERS_DIRECTIVES}}", static_sec_headers)
    result = result.replace("{{API_SECURITY_HEADERS_DIRECTIVES}}", api_sec_headers)

    for var in tmpl_vars:
        result = result.replace("{{%s}}" % var, quote(os.environ.get(var, "")))
    return result

#
# Prints the nginx configuration on standard output
#
if __name__ == "__main__":
    print(generate_nginx_config(base.DipHome(os.environ["DIP_HOME"])))

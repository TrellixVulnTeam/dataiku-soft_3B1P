from __future__ import print_function
import subprocess, sys
import os
import os.path as osp
import java
import base

def get_apinode_envdefault(install_dir, javabin, installConfig):
    base_port = installConfig.getServerPort()
    node_type = installConfig.getNodeType()
    jvm = java.get_jvm(javabin)

    # Common Java options
    javaOpts = java.get_common_java_opts(jvm)
    # Per-process Java options
    apimainJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "apimain", gcDefault="auto_lowpause")
    dkuJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "dku", addGCLogging=False, gcDefault="parallel")
    apimainJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "apimain")
    dkuJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "dku")

    return """# This file is automatically updated at install time.
# Do not edit this file. To customize the Dataiku DSS
# environment, edit the bin/env-site.sh file
export DKUINSTALLDIR="%s"
export DKU_NODE_TYPE="%s"
export DKU_BASE_PORT="%d"
export DKU_NGINX_PORT="%d"
export DKU_APIMAIN_PORT="%d"
export DKUJAVABIN="%s"
export DKU_JAVA_OPTS="%s"
export DKU_APIMAIN_JAVA_OPTS="%s"
export DKU_DKU_JAVA_OPTS="%s"
export DKU_APIMAIN_JAVA_LIBRARY_PATH="%s"
export DKU_DKU_JAVA_LIBRARY_PATH="%s"
""" % (install_dir, node_type, base_port, base_port, base_port + 1, javabin, javaOpts, apimainJavaOpts, dkuJavaOpts, apimainJavaLibraryPath, dkuJavaLibraryPath)

def get_designnode_envdefault(install_dir, javabin, installConfig):
    base_port = installConfig.getServerPort()
    node_type = installConfig.getNodeType()
    jvm = java.get_jvm(javabin)
    
    # Common Java options
    javaOpts = java.get_common_java_opts(jvm)
    
    # Per-process Java options
    backendJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "backend", gcDefault="auto_lowpause")
    fekJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "fek", gcDefault="parallel")
    hproxyJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "hproxy", gcDefault="parallel")
    jekJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "jek", gcDefault="parallel")
    cakJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "cak", gcDefault="parallel")
    eventServerJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "eventserver", gcDefault="auto_lowpause")
    dkuJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "dku", addGCLogging=False, gcDefault="parallel") # No logging GC stuff for dku, it's already spitting too much on the standard output

    backendJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "backend")
    fekJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "fek")
    hproxyJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "hproxy")
    jekJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "jek")
    cakJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "cak")
    eventServerJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "eventserver")
    dkuJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "dku")

    return """# This file is automatically updated at install time.
# Do not edit this file. To customize the Dataiku DSS
# environment, edit the bin/env-site.sh file
export DKUINSTALLDIR="%s"
export DKU_NODE_TYPE="%s"
export DKU_BASE_PORT="%d"
export DKU_NGINX_PORT="%d"
export DKU_BACKEND_PORT="%d"
export DKU_IPYTHON_PORT="%d"
export DKU_HPROXY_PORT="%d"
export DKU_EVENTSERVER_PORT="%d"
export DKUJAVABIN="%s"
export DKU_JAVA_OPTS="%s"
export DKU_BACKEND_JAVA_OPTS="%s"
export DKU_FEK_JAVA_OPTS="%s"
export DKU_HPROXY_JAVA_OPTS="%s"
export DKU_JEK_JAVA_OPTS="%s"
export DKU_CAK_JAVA_OPTS="%s"
export DKU_EVENTSERVER_JAVA_OPTS="%s"
export DKU_DKU_JAVA_OPTS="%s"
export DKU_BACKEND_JAVA_LIBRARY_PATH="%s"
export DKU_FEK_JAVA_LIBRARY_PATH="%s"
export DKU_HPROXY_JAVA_LIBRARY_PATH="%s"
export DKU_JEK_JAVA_LIBRARY_PATH="%s"
export DKU_CAK_JAVA_LIBRARY_PATH="%s"
export DKU_EVENTSERVER_JAVA_LIBRARY_PATH="%s"
export DKU_DKU_JAVA_LIBRARY_PATH="%s"

""" % (install_dir, node_type, base_port,
    base_port, base_port + 1, base_port + 2, base_port + 3, base_port + 4,
    javabin, javaOpts,
    backendJavaOpts, fekJavaOpts, hproxyJavaOpts, jekJavaOpts, cakJavaOpts, eventServerJavaOpts, dkuJavaOpts,
    backendJavaLibraryPath, fekJavaLibraryPath, hproxyJavaLibraryPath, jekJavaLibraryPath, cakJavaLibraryPath,
    eventServerJavaLibraryPath, dkuJavaLibraryPath)


def get_fm_envdefault(install_dir, javabin, installConfig):
    base_port = installConfig.getServerPort()
    node_type = installConfig.getNodeType()
    jvm = java.get_jvm(javabin)

    # Common Java options
    javaOpts = java.get_common_java_opts(jvm)
    # Per-process Java options
    fmmainJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "fmmain", gcDefault="auto_lowpause")
    fmcliJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "fmcli", addGCLogging=False, gcDefault="parallel")
    # Per-process Java libs
    fmmainJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "fmmain")
    fmcliJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "fmcli")

    return """# This file is automatically updated at install time.
# Do not edit this file. To customize the Dataiku FM
# environment, edit the bin/env-site.sh file
export DKUINSTALLDIR="%s"
export DKU_NODE_TYPE="%s"
export DKU_BASE_PORT="%d"
export DKU_NGINX_PORT="%d"
export DKU_FMMAIN_PORT="%d"
export DKUJAVABIN="%s"
export DKU_JAVA_OPTS="%s"
export DKU_FMMAIN_JAVA_OPTS="%s"
export DKU_FMCLI_JAVA_OPTS="%s"
export DKU_FMMAIN_JAVA_LIBRARY_PATH="%s"
export DKU_FMCLI_JAVA_LIBRARY_PATH="%s"
""" % (install_dir, node_type, base_port, base_port, base_port + 1, javabin, javaOpts, fmmainJavaOpts, fmcliJavaOpts, fmmainJavaLibraryPath, fmcliJavaLibraryPath)

def get_gh_envdefault(install_dir, javabin, installConfig):
    base_port = installConfig.getServerPort()
    node_type = installConfig.getNodeType()
    jvm = java.get_jvm(javabin)

    # Common Java options
    javaOpts = java.get_common_java_opts(jvm)
    # Per-process Java options
    ghserverJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "ghserver", gcDefault="auto_lowpause")
    ghdkuJavaOpts = java.get_perprocess_java_opts(installConfig, jvm, "ghdku", addGCLogging=False, gcDefault="parallel")
    # Per-process Java libs
    ghserverJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "ghserver")
    ghdkuJavaLibraryPath = java.get_perprocess_java_library_path(installConfig, jvm, "ghdku")

    return """# This file is automatically updated at install time.
# Do not edit this file. To customize the Dataiku GH
# environment, edit the bin/env-site.sh file
export DKUINSTALLDIR="%s"
export DKU_NODE_TYPE="%s"
export DKU_BASE_PORT="%d"
export DKU_NGINX_PORT="%d"
export DKU_GHSERVER_PORT="%d"
export DKUJAVABIN="%s"
export DKU_JAVA_OPTS="%s"
export DKU_GHSERVER_JAVA_OPTS="%s"
export DKU_GHDKU_JAVA_OPTS="%s"
export DKU_GHSERVER_JAVA_LIBRARY_PATH="%s"
export DKU_GHDKU_JAVA_LIBRARY_PATH="%s"
""" % (install_dir, node_type, base_port, base_port, base_port + 1, javabin, javaOpts, ghserverJavaOpts, ghdkuJavaOpts, ghserverJavaLibraryPath, ghdkuJavaLibraryPath)

def write_envdefault(dip_home):
    installConfig = dip_home.get_install_config()
    node_type = installConfig.getNodeType()
    if node_type == 'design' or node_type == "automation":
        content = get_designnode_envdefault(os.environ["DKUINSTALLDIR"], os.environ["DKUJAVABIN"], installConfig)
    elif node_type == 'api':
        content = get_apinode_envdefault(os.environ["DKUINSTALLDIR"], os.environ["DKUJAVABIN"], installConfig)
    elif node_type == "fm":
        content = get_fm_envdefault(os.environ["DKUINSTALLDIR"], os.environ["DKUJAVABIN"], installConfig)
    elif node_type == "gh":
        content = get_gh_envdefault(os.environ["DKUINSTALLDIR"], os.environ["DKUJAVABIN"], installConfig)
    else:
        raise Exception("node type not supported: " % node_type)
    with open(osp.join(dip_home.path, "bin", "env-default.sh"), "w") as f:
        f.write(content)

#
# Regenerates the env-default file in $DIP_HOME
# Usage: envfiles.py -save
#
if __name__ == "__main__":
    if len(sys.argv) == 2 and sys.argv[1] == '-save':
        write_envdefault(base.DipHome(os.environ["DIP_HOME"]))
    else:
        print("Usage: %s -save" % sys.argv[0], file=sys.stderr)

import os, os.path as osp
import logging
from . import utils
import time
from random import SystemRandom
import string
import requests

def generate_secure_random_string(N):
    cryptogen = SystemRandom()
    return ''.join(cryptogen.choice(string.ascii_uppercase + string.digits) for _ in range(N))

def get_or_create_api_key():

    auth_file_path = osp.join(os.getenv("DIP_HOME"), "config", "public-apikeys.json")

    keys = utils.json_loadf(auth_file_path)

    for key in keys:
        if key.get("createdBy", None) == "cli-dsscli":
            return key["key"]

    logging.info("Creating an admin key for dsscli")

    key = {
        'id': generate_secure_random_string(16),
        "key" : generate_secure_random_string(32),
        "label" : "Key generated by dsscli",
        "createdOn" : int(round(time.time() * 1000)),
        "createdBy" : "cli-dsscli",
        "globalPermissions": {
            "admin": True
        }
    }
    keys.append(key)

    utils.json_dumpf(auth_file_path, keys)

    # Invalidate config cache for modified file
    port = int(os.environ["DKU_BACKEND_PORT"])
    try:
        http_res = requests.request("POST", "http://127.0.0.1:%s/dip/publicapi/admin/invalidate-config-common-files-cache" % port)
        http_res.raise_for_status()
    except:
        logging.warning("Cache invalidation failed, DSS backend not running? If it is running, you should restart DSS")

    return key["key"]

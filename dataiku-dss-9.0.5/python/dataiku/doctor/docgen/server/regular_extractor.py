import logging
import sys
import traceback
import json

from dataiku.base.socket_block_link import JavaLink
from dataiku.base.utils import watch_stdin, get_json_friendly_error
from dataiku.doctor.docgen.extractor.placeholder_extractor import PlaceholderExtractor
from dataiku.doctor.docgen.renderer.renderer import Renderer
from dataiku.doctor.docgen.common.docx_io import DocxIO


# socket-based connection to backend
# The goal of this server is to resolve the regular placeholder,
# then extract the basic placeholders and provide them back to the java backend
def serve(port, secret):
    link = JavaLink(port, secret)
    # initiate connection
    link.connect()
    # get work to do
    command = link.read_json()
    try:
        task = command.get("task", "")
        template_path = command.get("templatePath", "")
        resolved_result_path = command.get("resolvedResultPath", "")

        print("Extract received from DSS ", task, template_path, resolved_result_path)

        if resolved_result_path == "":
            resolved_placeholders = {}
        else:
            with open(resolved_result_path) as json_file:
                # This file was generated by the java class "ResolvedResult".
                resolved_placeholders = json.load(json_file)
        docx_io = DocxIO()
        document = docx_io.load(template_path)
        extractor = PlaceholderExtractor()

        # Resolve the conditional placeholders
        document = Renderer().resolve_conditional_placeholder(document, resolved_placeholders)

        # Get the regular placeholders names
        placeholders_names = extractor.extract_regular_placeholders_from_docx(document)

        # send ack
        link.send_json({'placeholders': list(placeholders_names)})
    except:
        link.send_string('')  # mark failure
        traceback.print_exc()
        link.send_json(get_json_friendly_error())
    finally:
        # done
        link.close()


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')
    watch_stdin()
    serve(int(sys.argv[1]), sys.argv[2])

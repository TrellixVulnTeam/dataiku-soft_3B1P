{"version":3,"sources":["./src/$_lazy_route_resource lazy namespace object","./src/patches/zrender-patch.ts","./src/app/widgets/lists/editable-list-input/editable-list-input.component.html","./src/app/widgets/lists/editable-list-input/editable-list-input.component.ts","./src/app/utils/form-array-repeat.ts","./src/app/widgets/lists/editable-list/editable-list.component.html","./src/app/widgets/lists/editable-list/editable-list.component.ts","./src/app/utils/tolerant-form-group.ts","./src/app/widgets/lists/credentials-list/credentials-list.component.html","./src/app/widgets/lists/credentials-list/credentials-list.component.ts","./src/app/widgets/lists/credentials-list/downgraded/downgraded-credentials-list.component.ts","./src/app/widgets/lists/credentials-list/downgraded/downgraded-credentials-list.component.html","./src/app/widgets/lists/values-list/values-list.component.html","./src/app/widgets/lists/values-list/values-list.component.ts","./src/app/widgets/lists/values-list/downgraded/downgraded-values-list.component.ts","./src/app/widgets/lists/values-list/downgraded/downgraded-values-list.component.html","./src/app/widgets/lists/key-values-list/key-values-list.component.html","ng://dku-frontend-core/generated-sources/main/java/com/dataiku/dip/security/audit/model/event-server-target-settings.ts","ng://dku-frontend-core/generated-sources/main/java/com/dataiku/dip/exceptions/exception-with-debugging-hint.ts","ng://dku-frontend-core/generated-sources/main/java/com/dataiku/dip/security/audit/model/audit-trail-target-settings.ts","ng://dku-frontend-core/generated-sources/main/java/com/dataiku/dip/security/ssosettings.ts","ng://dku-frontend-core/generated-sources/main/java/com/dataiku/dip/futures/future-progress-state.ts","ng://dku-frontend-core/generated-sources/main/java/com/dataiku/dip/coremodel/info-message.ts","ng://dku-frontend-core/generated-sources/main/java/com/dataiku/dip/dkuapp.ts","./src/app/widgets/lists/key-values-list/key-values-list.component.ts","./src/app/widgets/lists/key-values-list/downgraded/downgraded-key-values-list.component.ts","./src/app/widgets/lists/key-values-list/downgraded/downgraded-key-values-list.component.html","ng://dku-frontend-core/lib/requests/dku-http.service.ts","ng://dku-frontend-core/lib/utils/rxutils.ts","ng://dku-frontend-core/lib/requests/future-watcher.service.ts","ng://dku-frontend-core/lib/utils/assert.ts","ng://dku-frontend-core/lib/utils/typeguards.ts","ng://dku-frontend-core/lib/window.service.ts","ng://dku-frontend-core/lib/components/lazy-render/lazy-render.component.html","ng://dku-frontend-core/lib/components/lazy-render/lazy-render.component.ts","ng://dku-frontend-core/lib/components/lazy-echart/lazy-echart.component.html","ng://dku-frontend-core/lib/components/lazy-echart/lazy-echart.component.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/mean.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/kurtosis.ts","ng://dku-frontend-core/lib/components/drag-scroll/drag-scroll.component.ts","ng://dku-frontend-core/lib/components/drag-scroll/drag-scroll.component.html","ng://dku-frontend-core/lib/dku-frontend-core.module.ts","./src/app/migration/dku-activated-route.ts","./src/app/core/nav/current-route.service.ts","./src/app/core/dataiku-api/definitions/private-datasets-api.ts","./src/app/core/dataiku-api/definitions/private-statistics-api.ts","./src/app/core/dataiku-api/definitions/private-taggable-objects-api.ts","./src/app/core/dataiku-api/definitions/private-projects-api.ts","./src/app/core/dataiku-api/definitions/private-flow-api.ts","./src/app/core/dataiku-api/definitions/private-dashboards-api.ts","./src/app/core/dataiku-api/dataiku-api.service.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/models/binning-mode.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/correlation-matrix-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/dashboards/model/ui/enriched-dashboard-page.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/mood-test-nsamp.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/queries/interactive-query.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/pairwise-mood-test.ts","./src/generated-sources/src/main/java/com/dataiku/dip/datasets/dataset-selection.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/categorical-histogram-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/empirical-cdf.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/fit-curve-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/worksheet-root-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/fit2-ddistribution-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/pairwise-mood-test-card.ts","./src/generated-sources/dss-core/src/main/java/com/dataiku/dip/dataflow/exec/filter/filter-desc.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/filtering/interval-filter.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract-header-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/min.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/grouping/subset-grouping.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/distribution.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/covariance.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/shapiro-normality-test-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/ks-test2-samp.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/pairwise-ttest-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/distribution2-d.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/pcacard.ts","./src/generated-sources/src/main/java/com/dataiku/dip/containers/exec/container-exec-selection.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/ttest1-samp.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/common/grouped-compiled-card-wrapper.ts","./src/generated-sources/src/main/java/com/dataiku/dip/datasets/sampling-param.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/common/count.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/multivariate/pca.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract-nsamp-test-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/exponential.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/fit-distribution-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/curves/polynomial-curve.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/poisson.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/spearman.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/sem.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/kde2-d.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/test-distribution.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/grouping/union-grouping.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-header-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/skewness.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/computation.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/weibull.ts","./src/generated-sources/src/main/java/com/dataiku/dip/server/services/itagging-service.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/one-way-anovacard.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/univariate-frequency-table-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/grouping/binned-grouping.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/beta.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/sum.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/common/count-groups.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/max.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/common/grouped-computation.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/laplace.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/mood-test-nsamp-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/sign-test1-samp-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/mutual-information.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/joint-normal.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/multivariate/fetch-values.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/one-way-anova.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/variance.ts","./src/generated-sources/dss-core/src/main/java/com/dataiku/dip/partitioning/time-dimension.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/card-result.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/quantiles.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/binomial.ts","./src/generated-sources/src/main/java/com/dataiku/dip/coremodel/app-manifest.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/curves/isotonic-curve.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/queries/list-most-frequent-values.ts","./src/generated-sources/src/main/java/com/dataiku/dip/server/services/dataset-notebook-service.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/fit2-ddistribution.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/grouping/anum-grouping.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/ttest2-samp-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/coremodel/app-homepage-tile.ts","./src/generated-sources/src/main/java/com/dataiku/dip/dashboards/model/tile.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/common/summary-card-builder.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/chi2-ind-test.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/scatter-plot-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract2-samp-test-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/kendall-tau.ts","./src/generated-sources/src/main/java/com/dataiku/dip/coremodel/serialized-project.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/ztest1-samp.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/grouping/cross-grouping.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/log-normal.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/fit-distribution.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/filtering/all-filter.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract-pairwise-test-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/filtering/and-filter.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/stats/pvalue-adjustment-method.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/pairwise-ttest.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/chi2-ind-test-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/pareto.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/common/multi-computation.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/normal-mixture.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/common/dummy-computation.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-frequency-table-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/common/column-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/pearson.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/sign-test1-samp.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/numerical-histogram-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/models/variable.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/std-dev.ts","./src/generated-sources/src/main/java/com/dataiku/dip/coremodel/serialized-dataset.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-box-plot-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/mood-test2-samp-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/quantiles-table-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/fit-curve.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-histogram-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/tztest1-samp-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/mosaic-plot-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/grouping/merge-grouping.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/univariate-summary-stats-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-summary-stats-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/curves/curve.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/normal.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/computations/univariate/shapiro.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/ks-test2-samp-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/univariate-header-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract-card-container.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/distributions/triangular.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/multivariate-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate-card.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate-card.ts","./src/generated-sources/index.ts","./src/app/utils/random.ts","./src/app/utils/objects.ts","./src/app/core/dataiku-api/api-error.ts","./src/app/shared/pipes/list-pipes/format-modality.pipe.ts","./src/app/shared/pipes/text-pipes/plurify.pipe.ts","./src/app/shared/pipes/capitalize.pipe.ts","./src/app/features/eda/card-utils.ts","./src/app/features/eda/utils.ts","./src/app/utils/dss-defaults.ts","./src/app/features/eda/eda.service.ts","./src/app/core/dataiku-api/components/error-fixability/error-fixability.component.html","./src/app/core/dataiku-api/components/error-fixability/error-fixability.component.ts","./src/app/core/dataiku-api/components/smart-log-tail/smart-log-tail.component.html","./src/app/core/dataiku-api/components/smart-log-tail/smart-log-tail.component.ts","./src/app/core/dataiku-api/components/api-error-alert/api-error-alert.component.html","./src/app/core/dataiku-api/components/api-error-alert/api-error-alert.component.ts","./src/app/features/eda/worksheet/cards/events.ts","./src/app/shared/modals/modals.service.ts","./src/app/features/eda/worksheet/card-wizard/enums.ts","./src/app/features/eda/sample-context.service.ts","./src/app/features/eda/worksheet/card-wizard/card-wizard.service.ts","./src/app/shared/directives/qa-selector/qa-selector.service.ts","./src/app/shared/directives/qa-selector/qa-selector.component.html","./src/app/shared/directives/qa-selector/qa-selector.component.ts","./src/app/shared/directives/qa-selector/qa-selector.directive.ts","./src/app/shared/modals/modal-header/modal-header.component.html","./src/app/shared/modals/modal-header/modal-header.component.ts","./src/app/features/eda/worksheet/cards/config/generic-summary-stats-card-config/generic-summary-stats-card-config.component.html","./src/app/features/eda/worksheet/cards/config/generic-summary-stats-card-config/generic-summary-stats-card-config.component.ts","./src/app/widgets/selection/dku-bs-select/angularjs-dku-bs-select.directive.ts","./src/app/widgets/selection/dku-bs-select/dku-bs-select.component.ts","./src/app/shared/dku-bs-select-form-control/dku-bs-select-form-control.component.ts","./src/app/shared/dku-bs-select-form-control/dku-bs-select-form-control.component.html","./src/app/utils/dku-validators.ts","./src/app/shared/components/simple-number-list/simple-number-list.component.html","./src/app/shared/components/simple-number-list/simple-number-list.component.ts","./src/app/features/eda/worksheet/cards/config/binning-config/binning-config.component.html","./src/app/features/eda/worksheet/cards/config/binning-config/binning-config.component.ts","./src/app/features/eda/worksheet/cards/config/categorical-histogram-card-config/categorical-histogram-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/categorical-histogram-card-config/categorical-histogram-card-config.component.html","./src/app/features/eda/worksheet/cards/config/bivariate-box-plot-card-config/bivariate-box-plot-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/bivariate-box-plot-card-config/bivariate-box-plot-card-config.component.html","./src/app/features/eda/worksheet/cards/config/univariate-frequency-table-card-config/univariate-frequency-table-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/univariate-frequency-table-card-config/univariate-frequency-table-card-config.component.html","./src/app/features/eda/worksheet/cards/config/quantiles-table-card-config/quantiles-table-card-config.component.html","./src/app/features/eda/worksheet/cards/config/quantiles-table-card-config/quantiles-table-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/numerical-histogram-card-config/numerical-histogram-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/numerical-histogram-card-config/numerical-histogram-card-config.component.html","./src/app/features/eda/worksheet/cards/config/abstract-2d-pivot-card-config/abstract-2d-pivot-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/abstract-2d-pivot-card-config/abstract-2d-pivot-card-config.component.html","./src/app/features/eda/worksheet/cards/config/scatter-plot-card-config/scatter-plot-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/scatter-plot-card-config/scatter-plot-card-config.component.html","./src/app/utils/min-checked-validator.ts","./src/app/core/dataiku-wt1/wt1.service.ts","./src/app/shared/pipes/filter.pipe.ts","./src/app/features/eda/worksheet/card-wizard/list-box/list-box.component.html","./src/app/features/eda/worksheet/card-wizard/list-box/list-box.component.ts","./src/app/features/eda/worksheet/card-wizard/list-box-form-control/list-box-form-control.component.html","./src/app/features/eda/worksheet/card-wizard/list-box-form-control/list-box-form-control.component.ts","./src/app/features/eda/worksheet/cards/config/univariate-header-card-config/univariate-header-card-config.component.html","./src/app/features/eda/worksheet/cards/config/univariate-header-card-config/univariate-header-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/bivariate-header-card-config/bivariate-header-card-config.component.html","./src/app/features/eda/worksheet/cards/config/bivariate-header-card-config/bivariate-header-card-config.component.ts","./src/app/utils/object-not-empty-validator.ts","./src/app/features/eda/worksheet/card-wizard/single-variable-selector/single-variable-selector.component.ts","./src/app/features/eda/worksheet/card-wizard/single-variable-selector/single-variable-selector.component.html","./src/app/features/eda/worksheet/cards/config/tztest1-samp-card-config/tztest1-samp-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/tztest1-samp-card-config/tztest1-samp-card-config.component.html","./src/app/features/eda/worksheet/cards/config/sign-test1-samp-card-config/sign-test1-samp-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/sign-test1-samp-card-config/sign-test1-samp-card-config.component.html","./src/app/features/eda/worksheet/cards/config/shapiro-normality-test-card-config/shapiro-normality-test-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/shapiro-normality-test-card-config/shapiro-normality-test-card-config.component.html","./src/app/utils/form-control-observer.ts","./src/app/features/eda/worksheet/cards/config/abstract-2-samp-card-config/abstract-2-samp-card-config.component.html","./src/app/features/eda/worksheet/cards/config/abstract-2-samp-card-config/abstract-2-samp-card-config.component.ts","./src/app/utils/toggle-form-control.ts","./src/app/features/eda/worksheet/cards/config/abstract-n-samp-card-config/abstract-n-samp-card-config.component.html","./src/app/features/eda/worksheet/cards/config/abstract-n-samp-card-config/abstract-n-samp-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/abstract-pairwise-test-card-config/abstract-pairwise-test-card-config.component.html","./src/app/features/eda/worksheet/cards/config/abstract-pairwise-test-card-config/abstract-pairwise-test-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/chi2-ind-test-card-config/chi2-ind-test-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/chi2-ind-test-card-config/chi2-ind-test-card-config.component.html","./src/app/utils/is-integer-validator.ts","./src/app/features/eda/worksheet/cards/config/fit-distribution-card-config/fit-distribution-card-config.component.html","./src/app/features/eda/worksheet/cards/config/fit-distribution-card-config/fit-distribution-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/fit-2d-distribution-card-config/fit-2d-distribution-card-config.component.html","./src/app/features/eda/worksheet/cards/config/fit-2d-distribution-card-config/fit-2d-distribution-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/fit-curve-card-config/fit-curve-card-config.component.html","./src/app/features/eda/worksheet/cards/config/fit-curve-card-config/fit-curve-card-config.component.ts","./src/app/features/eda/worksheet/cards/config/multivariate-card-config/multivariate-card-config.component.html","./src/app/features/eda/worksheet/cards/config/multivariate-card-config/multivariate-card-config.component.ts","./src/app/features/eda/worksheet/card-wizard/card-editor/card-editor.component.html","./src/app/features/eda/worksheet/card-wizard/card-editor/card-editor.component.ts","./src/app/core/dataiku-wt1/wt1-click.directive.ts","./src/app/features/eda/worksheet/card-wizard/new-card-modal/new-card-modal.component.html","./src/app/features/eda/worksheet/card-wizard/new-card-modal/new-card-modal.component.ts","./src/app/shared/pipes/number-pipes/smarter-number.pipe.ts","./src/app/features/eda/pipes/filter-name.pipe.ts","./src/generated-sources/src/main/java/com/dataiku/dip/eda/compute/filtering/anum-filter.ts","./src/app/features/eda/collapsing.service.ts","./src/app/features/eda/worksheet/delete-dialog/delete-dialog.component.ts","./src/app/features/eda/worksheet/delete-dialog/delete-dialog.component.html","./src/app/widgets/selection/dataset-selector/angularjs-dataset-selector.directive.ts","./src/app/widgets/selection/dataset-selector/dataset-selector.component.ts","./src/app/widgets/selection/dataset-selector/dataset-selector-form-control.component.ts","./src/app/features/eda/worksheet/duplicate-worksheet-dialog/duplicate-worksheet-dialog.component.html","./src/app/features/eda/worksheet/duplicate-worksheet-dialog/duplicate-worksheet-dialog.component.ts","./src/app/features/eda/worksheet/rename-worksheet-dialog/rename-worksheet-dialog.component.ts","./src/app/features/eda/worksheet/rename-worksheet-dialog/rename-worksheet-dialog.component.html","./src/app/core/overlays/waiting-overlay/waiting-overlay.component.html","./src/app/core/overlays/waiting-overlay/waiting-overlay.component.ts","./src/app/core/overlays/waiting.service.ts","./src/app/features/eda/schema-utils.ts","./src/app/features/eda/worksheet-state/state.ts","./src/app/features/eda/worksheet-state/transitions.ts","./src/app/features/eda/worksheet-state/processes.ts","./src/app/features/eda/worksheet/debug-card-modal/debug-card-modal.component.ts","./src/app/utils/clipboard.ts","./src/app/features/eda/worksheet/debug-card-modal/debug-card-modal.component.html","./src/app/features/eda/compute.service.ts","./src/app/features/eda/worksheet-state/worksheet.context.service.ts","./src/app/shared/components/dataset-error-cta/dataset-error-cta.component.html","./src/app/shared/components/dataset-error-cta/dataset-error-cta.component.ts","./src/app/widgets/dropdowns/dku-popover-trigger.directive.ts","./src/app/widgets/dropdowns/dku-popover/dku-popover.component.html","./src/app/widgets/dropdowns/dku-popover/dku-popover.component.ts","./src/app/shared/components/dataset-selection-ordering-fields/angularjs-dataset-selection-ordering.directive.ts","./src/app/shared/components/dataset-selection-ordering-fields/dataset-selection-ordering-fields.component.ts","./src/app/shared/directives/comma-separated-view/comma-separated-view.directive.ts","./src/app/shared/directives/force-integer/force-integer.directive.ts","./src/app/features/eda/worksheet/partition-selection/partition-selection.component.html","./src/app/features/eda/worksheet/partition-selection/partition-selection.component.ts","./src/app/features/eda/pipes/filter-nice-repr.pipe.ts","./src/app/features/eda/worksheet/sample-settings/sample-settings.component.html","./src/app/features/eda/worksheet/sample-settings/sample-settings.component.ts","./src/app/features/eda/worksheet/edit-confidence-level-settings/edit-confidence-level-settings.component.html","./src/app/features/eda/worksheet/edit-confidence-level-settings/edit-confidence-level-settings.component.ts","./src/app/features/eda/worksheet/highlight-settings/highlight-settings.component.html","./src/app/features/eda/worksheet/highlight-settings/highlight-settings.component.ts","./src/app/shared/components/container-selection-form/container-selection-form.component.ts","./src/app/features/eda/worksheet/container-settings/container-settings.component.html","./src/app/features/eda/worksheet/container-settings/container-settings.component.ts","./src/app/shared/animations/fade-in-out.ts","./src/app/features/eda/pipes/card-title.pipe.ts","./src/app/features/eda/worksheet/card-wizard/edit-card-modal/edit-card-modal.component.html","./src/app/features/eda/worksheet/card-wizard/edit-card-modal/edit-card-modal.component.ts","./src/app/features/eda/worksheet/cards/help/card-creation-templates.ts","./src/app/features/eda/worksheet/cards/help/tztest1-samp-card-help/tztest1-samp-card-help.component.html","./src/app/features/eda/worksheet/cards/help/tztest1-samp-card-help/tztest1-samp-card-help.component.ts","./src/app/features/eda/worksheet/cards/help/shapiro-normality-test-card-help/shapiro-normality-test-card-help.component.ts","./src/app/features/eda/worksheet/cards/help/shapiro-normality-test-card-help/shapiro-normality-test-card-help.component.html","./src/app/features/eda/worksheet/cards/help/shared-fragments/list-compared-populations/list-compared-populations.component.html","./src/app/features/eda/worksheet/cards/help/shared-fragments/list-compared-populations/list-compared-populations.component.ts","./src/app/features/eda/worksheet/cards/help/ks-test2-samp-card-help/ks-test2-samp-card-help.component.ts","./src/app/features/eda/worksheet/cards/help/ks-test2-samp-card-help/ks-test2-samp-card-help.component.html","./src/app/features/eda/worksheet/cards/help/sign-test1-samp-card-help/sign-test1-samp-card-help.component.ts","./src/app/features/eda/worksheet/cards/help/sign-test1-samp-card-help/sign-test1-samp-card-help.component.html","./src/app/features/eda/worksheet/cards/help/chi2-ind-test-card-help/chi2-ind-test-card-help.component.ts","./src/app/features/eda/worksheet/cards/help/chi2-ind-test-card-help/chi2-ind-test-card-help.component.html","./src/app/features/eda/worksheet/cards/help/generic-nsamp-mood-test-help/generic-nsamp-mood-test-help.component.html","./src/app/features/eda/worksheet/cards/help/generic-nsamp-mood-test-help/generic-nsamp-mood-test-help.component.ts","./src/app/features/eda/worksheet/cards/help/one-way-anova-card-help/one-way-anova-card-help.component.html","./src/app/features/eda/worksheet/cards/help/one-way-anova-card-help/one-way-anova-card-help.component.ts","./src/app/features/eda/worksheet/cards/help/generic-nsamp-ttest-card-help/generic-nsamp-ttest-card-help.component.html","./src/app/features/eda/worksheet/cards/help/generic-nsamp-ttest-card-help/generic-nsamp-ttest-card-help.component.ts","./src/app/features/eda/worksheet/cards/card-help/card-help.component.html","./src/app/features/eda/worksheet/cards/card-help/card-help.component.ts","./src/app/features/eda/worksheet/cards/config/heatmap-config/heatmap-config.component.html","./src/app/features/eda/worksheet/cards/config/heatmap-config/heatmap-config.component.ts","./src/app/features/eda/worksheet/cards/card-menu/card-menu.component.html","./src/app/features/eda/worksheet/cards/card-menu/card-menu.component.ts","./src/app/features/eda/worksheet/split-by-settings/split-by-settings.component.html","./src/app/features/eda/worksheet/split-by-settings/split-by-settings.component.ts","./src/app/features/eda/worksheet/cards/card-body/card-body.component.html","./src/app/features/eda/worksheet/cards/card-body/card-body.component.ts","./src/app/shared/directives/qa-mode/qa-mode.service.ts","./src/app/shared/pipes/delay-when-false.pipe.ts","./src/app/features/eda/worksheet/cards/top-level-card/top-level-card.component.html","./src/app/features/eda/worksheet/cards/top-level-card/top-level-card.component.ts","./src/app/features/eda/worksheet/cards/worksheet-root-card/worksheet-root-card.component.html","./src/app/features/eda/worksheet/cards/worksheet-root-card/worksheet-root-card.component.ts","./src/app/shared/services/projects.service.ts","./src/app/shared/pipes/dku-evaluate-permissions.pipe.ts","./src/app/features/eda/worksheet/worksheet.component.html","./src/app/features/eda/worksheet/worksheet.component.ts","./src/app/shared/components/doclink-wrapper/doclink-wrapper.component.ts","./src/app/shared/components/doclink-wrapper/doclink-wrapper.component.html","./src/app/features/eda/eda.component.html","./src/app/features/eda/eda.component.ts","./src/app/features/eda/insight-state/insight-context.service.ts","./src/app/features/eda/worksheet/cards/insight-card/insight-card.component.html","./src/app/features/eda/worksheet/cards/insight-card/insight-card.component.ts","./src/app/widgets/lists/connection-properties-list/connection-properties-list.component.ts","./src/app/widgets/lists/connection-properties-list/connection-properties-list.component.html","./src/app/widgets/lists/connection-properties-list/downgraded/downgraded-connection-properties-list.component.ts","./src/app/widgets/lists/connection-properties-list/downgraded/downgraded-connection-properties-list.component.html","./src/app/features/eda/pages/worksheet-redirection-page/worksheet-redirection-page.component.html","./src/app/features/eda/pages/worksheet-redirection-page/worksheet-redirection-page.component.ts","./src/app/shared/pipes/text-pipes/strip-html.pipe.ts","./src/app/widgets/inputs/edit-typeahead-input/edit-typeahead-input.component.html","./src/app/widgets/inputs/edit-typeahead-input/edit-typeahead-input.component.ts","./src/app/widgets/inputs/edit-typeahead-input/downgraded/downgraded-edit-typeahead-input.component.ts","./src/app/widgets/inputs/edit-typeahead-input/downgraded/downgraded-edit-typeahead-input.component.html","./src/app/migration/downgraded-components.ts","./src/app/migration/upgraded-providers.ts","./src/app/widgets/widgets.module.ts","./src/app/widgets/lists/editable-list-input/editable-list-input.module.ts","./src/app/widgets/lists/editable-list/editable-list.module.ts","./src/app/widgets/lists/key-values-list/key-values-list.module.ts","./src/app/widgets/lists/values-list/values-list.module.ts","./src/app/widgets/lists/credentials-list/credentials-list.module.ts","./src/app/widgets/lists/connection-properties-list/connection-properties-list.module.ts","./src/app/shared/modals/modals.module.ts","./src/app/core/dataiku-api/dataiku-api.module.ts","./src/app/core/requests/requests.module.ts","./src/app/core/nav/nav.module.ts","./src/app/core/core.module.ts","./src/app/shared/pipes/entries.pipe.ts","./src/app/shared/pipes/nice-const.pipe.ts","./src/app/shared/pipes/info-message-alert-class.pipe.ts","./src/app/shared/pipes/pluralize.pipe.ts","./src/app/shared/pipes/replace.pipe.ts","./src/app/shared/pipes/escaping/escape-html.pipe.ts","./src/app/shared/pipes/number-pipes/percentage.pipe.ts","./src/app/shared/pipes/number-pipes/smart-number.pipe.ts","./src/app/shared/pipes/smart-percentage.pipe.ts","./src/app/shared/pipes/date-pipes/date-pipes-common.ts","./src/app/shared/pipes/date-pipes/friendly-time-delta-short.pipe.ts","./src/app/shared/pipes/date-pipes/friendly-date-time.pipe.ts","./src/app/shared/pipes/date-pipes/friendly-duration.pipe.ts","./src/app/shared/pipes/date-pipes/duration-hhmmss.pipe.ts","./src/app/shared/pipes/list-pipes/slice-list.pipe.ts","./src/app/shared/pipes/list-pipes/order-by.pipe.ts","./src/app/shared/pipes/filesize.pipe.ts","./src/app/shared/pipes/number-pipes/nice-precision.pipe.ts","./src/app/shared/pipes/date-pipes/friendly-duration-short.pipe.ts","./src/app/shared/pipes/visualization/ml-task-type-to-icon.pipe.ts","./src/app/shared/pipes/visualization/backend-type-to-icon.pipe.ts","./src/app/shared/pipes/list-pipes/range.pipe.ts","./src/app/shared/pipes/pipes.module.ts","./src/app/core/dataiku-wt1/dataiku-wt1.module.ts","./src/app/shared/directives/height-equalizer/height-equalizer.service.ts","./src/app/shared/directives/height-equalizer/height-equalizer.component.ts","./src/app/shared/directives/height-equalizer/height-equalizer.component.html","./src/app/features/eda/worksheet/cards/body/column-card-body/column-card-body.component.html","./src/app/features/eda/worksheet/cards/body/column-card-body/column-card-body.component.ts","./src/app/features/eda/worksheet/cards/column-title/column-title.component.html","./src/app/features/eda/worksheet/cards/column-title/column-title.component.ts","./src/app/features/eda/worksheet/cards/body/header-card-body/header-card-body.component.html","./src/app/features/eda/worksheet/cards/body/header-card-body/header-card-body.component.ts","./src/app/shared/graphics/colors.service.ts","./src/app/shared/graphics/patterns.service.ts","./src/app/features/eda/worksheet/cards/body/categorical-histogram-card-body/categorical-histogram-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/categorical-histogram-card-body/categorical-histogram-card-body.component.html","./src/app/features/eda/worksheet/cards/help/shared-fragments/colored-pvalue/colored-pvalue.component.html","./src/app/features/eda/worksheet/cards/help/shared-fragments/colored-pvalue/colored-pvalue.component.ts","./src/app/features/eda/worksheet/cards/body/generic-summary-stats-card-body/generic-summary-stats-card-body.component.html","./src/app/features/eda/worksheet/cards/body/generic-summary-stats-card-body/generic-summary-stats-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/quantiles-table-card-body/quantiles-table-card-body.component.html","./src/app/features/eda/worksheet/cards/body/quantiles-table-card-body/quantiles-table-card-body.component.ts","./src/app/features/eda/echarts-utils.ts","./src/app/features/eda/worksheet/cards/body/numerical-histogram-card-body/numerical-histogram-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/numerical-histogram-card-body/numerical-histogram-card-body.component.html","./src/app/features/eda/worksheet/cards/body/univariate-frequency-table-card-body/univariate-frequency-table-card-body.component.html","./src/app/features/eda/worksheet/cards/body/univariate-frequency-table-card-body/univariate-frequency-table-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/bivariate-histogram-card-body/bivariate-histogram-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/bivariate-histogram-card-body/bivariate-histogram-card-body.component.html","./src/app/utils/compacted-array.ts","./src/app/shared/graphics/density-map.ts","./src/app/features/eda/worksheet/cards/body/fit-2d-distribution-card-body/fit-2d-distribution-card-body.component.html","./src/app/features/eda/worksheet/cards/body/fit-2d-distribution-card-body/fit-2d-distribution-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/grouped-card-body/grouped-card-body.component.html","./src/app/features/eda/worksheet/cards/body/grouped-card-body/grouped-card-body.component.ts","./src/app/shared/directives/click-stop/click-stop.directive.ts","./src/app/features/eda/worksheet/cards/body/grouped-header-card-body/grouped-header-card-body.component.html","./src/app/features/eda/worksheet/cards/body/grouped-header-card-body/grouped-header-card-body.component.ts","./src/app/features/eda/pipes/distribution-name.pipe.ts","./src/app/features/eda/worksheet/cards/body/fit-distribution-card-body/fit-distribution-card-body.component.html","./src/app/features/eda/worksheet/cards/body/fit-distribution-card-body/fit-distribution-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/fit-curve-card-body/fit-curve-card-body.component.html","./src/app/features/eda/worksheet/cards/body/fit-curve-card-body/fit-curve-card-body.component.ts","./src/app/shared/components/heatmap/heatmap.component.html","./src/app/shared/components/heatmap/heatmap.component.ts","./src/app/features/eda/worksheet/cards/body/correlation-matrix-card-body/correlation-matrix-card-body.component.html","./src/app/features/eda/worksheet/cards/body/correlation-matrix-card-body/correlation-matrix-card-body.component.ts","./src/app/shared/components/components.module.ts","./src/app/features/eda/worksheet/cards/body/ks-test-2samp-card-body/ks-test-2samp-card-body.component.html","./src/app/features/eda/worksheet/cards/body/ks-test-2samp-card-body/ks-test-2samp-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/generic-pairwise-test-card-body/generic-pairwise-test-card-body.component.html","./src/app/features/eda/worksheet/cards/body/generic-pairwise-test-card-body/generic-pairwise-test-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/unavailable-card-body/unavailable-card-body.component.html","./src/app/features/eda/worksheet/cards/body/unavailable-card-body/unavailable-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/pca-card-body/pca-card-body.component.html","./src/app/features/eda/worksheet/cards/body/pca-card-body/pca-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/bivariate-frequency-table-card-body/bivariate-frequency-table-card-body.component.html","./src/app/features/eda/worksheet/cards/body/bivariate-frequency-table-card-body/bivariate-frequency-table-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/bivariate-box-plot-card-body/bivariate-box-plot-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/bivariate-box-plot-card-body/bivariate-box-plot-card-body.component.html","./src/app/features/eda/worksheet/cards/body/mosaic-plot-card-body/mosaic-plot-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/mosaic-plot-card-body/mosaic-plot-card-body.component.html","./src/app/features/eda/worksheet/cards/body/scatter-plot-card-body/scatter-plot-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/scatter-plot-card-body/scatter-plot-card-body.component.html","./src/app/features/eda/worksheet/cards/body/generic-nsamp-test-card-body/generic-nsamp-test-card-body.component.html","./src/app/features/eda/worksheet/cards/body/generic-nsamp-test-card-body/generic-nsamp-test-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/shapiro-normality-test-card-body/shapiro-normality-test-card-body.component.html","./src/app/features/eda/worksheet/cards/body/shapiro-normality-test-card-body/shapiro-normality-test-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/chi2-ind-test-card-body/chi2-ind-test-card-body.component.html","./src/app/features/eda/worksheet/cards/body/chi2-ind-test-card-body/chi2-ind-test-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/tztest1-samp-card-body/tztest1-samp-card-body.component.html","./src/app/features/eda/worksheet/cards/body/tztest1-samp-card-body/tztest1-samp-card-body.component.ts","./src/app/features/eda/worksheet/cards/body/sign-test1-samp-card-body/sign-test1-samp-card-body.component.html","./src/app/features/eda/worksheet/cards/body/sign-test1-samp-card-body/sign-test1-samp-card-body.component.ts","./src/app/shared/modals/confirm-modal/confirm-modal.component.html","./src/app/shared/modals/confirm-modal/confirm-modal.component.ts","./src/app/shared/modals/ack-modal/ack-modal.component.ts","./src/app/shared/modals/ack-modal/ack-modal.component.html","./src/app/shared/modals/prompt-modal/prompt-modal.component.html","./src/app/shared/modals/prompt-modal/prompt-modal.component.ts","./src/app/shared/modals/select-modal/select-modal.component.html","./src/app/shared/modals/select-modal/select-modal.component.ts","./src/app/features/eda/eda.module.ts","./src/app/core/requests/dku-legacy-http.service.ts","./src/app/core/dataiku-api/utils/enriched-promise.ts","./src/app/widgets/inputs/edit-typeahead-input/edit-typeahead-input.module.ts","./src/app/app.module.ts","./src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","proto","methodName","wrapper","existingMethod","args","arguments","bind","this","apply","type","required","warnIfTrimmable","onFocus","onBlur","onEnter","inputChange","selectedAutocompleteItemViaEnter","ngOnInit","inputControl","valueChanges","pipe","distinctUntilChanged","subscribe","entry","emit","ngAfterViewInit","fixAutocompleteScroll","handleFocus","$event","handleBlur","onSelectionChange","event","onSelectionClick","handleEnter","matAutocompleteTrigger","closePanel","optionHeight","matAutocompleteEl","options","first","_getHostElement","clientHeight","index","activeItemIndex","labelCount","optionGroups","newScrollPosition","_getScrollTop","_setScrollTop","warnValueIsTrimmable","value","trim","EditableListInputComponent","placeholder","autocomplete","controlFactory","validatorOrOpts","asyncValidator","add","push","patchValue","updateControls","setValue","reset","expectedNbControls","length","controls","removeAt","EditableListDragComponent","EditableListArrowComponent","onDelete","EditableListDeleteComponent","editing","onInputEnter","inputs$","inputs","changes","startWith","switchMap","merge","map","input","setEditionMode","ngOnDestroy","EditableListTemplateComponent","items","addLabel","sortable","hasDivider","focusOnEnter","fullWidthList","disableAdd","onAdd","onValidityChange","onReorder","onChange","onTouched","writeValue","obj","cloneDeep","itemsFormArray","registerOnChange","fn","registerOnTouched","EditableListBase","changeDetectorRef","fb","formBuilder","group","item","control","itemsChange","formValue","handleChange","statusChanges","valid","handleAdd","window","setTimeout","focus","itemsLis","delete","stopPropagation","handleDelete","drop","itemsArray","previousIndex","currentIndex","itemLi","toArray","itemLiFirstInput","nativeElement","querySelector","enter","EditableListComponent","provide","useExisting","multi","originalValue","Object","forEach","name","onlySelf","emitEvent","updateValueAndValidity","_updateValue","reducedValue","_reduceValue","keyPlaceholder","valuePlaceholder","keyIdentifier","valueIdentifier","canBeFinal","keyRequired","valueRequired","CredentialsListComponent","ngOnChanges","keyValidators","valueValidators","itemsControls","secret","isFinal","changesSubscription","unsubscribe","$rootScope","$applyAsync","DowngradedCredentialsListComponent","stringsMode","filteredSuggestions","ValuesListComponent","computeInputKey","inputKey","validators","suggestions","i","target","updateSuggestions","lowercaseValue","toLowerCase","candidate","includes","sort","DowngradedValuesListComponent","EventServerTargetSettings","ExceptionWithDebuggingHint","AuditTrailTargetSettings","SSOSettings","FutureProgressState","InfoMessage","DKUApp","iconIdentifier","keySuggestions","valueSuggestions","filteredKeySuggestions","filteredValueSuggestions","KeyValuesListComponent","iconFn","it","identifier","setSuggestions","getFilteredSuggestions","DowngradedKeyValuesListComponent","RoutingKeyMode","DebuggingHint","TopicsFiltering","RoutingKeyFiltering","SSOProtocol","SPNEGOMode","StateUnit","Severity","FixabilityCategory","LicensingMode","DkuHttpService","lazyRenderingValve","input$","visibility$","resize$","Observable","observer","currentInput","currentVisible","next","err","error","complete","visible","previouslyVisible","isArray","Array","x","isNumeric","val","parseFloat","auditMap","project","source","defer","auditTrigger","Subject","isRunning","audit","of","concatMap","v","projected","from","concat","finalize","combineLatestObject","combineLatest","entries","key","observable","array","assign","deepDistinctUntilChanged","selector","a","b","POLLING_BACKOFF_STRATEGY","initialInterval","maxInterval","backoffDelay","iteration","Math","pow","dkuHttpService","requestFuture","method","path","params","abortInBackend","request","pollFuture","abortFutureOnUnsubscription","identity","waitForResult","future","last","resp","hasResult","result","initialRequest","initialResp","getFutureUpdate","jobId","takeWhile","alive","subscription","runningJobId","shouldAbort","abortIfNecessary","closed","abortFuture","aborted","futureId","FutureWatcherService","trueish","predicate","msg","fail","assertNever","JSON","stringify","fromEvent","share","WindowService","i0.ɵɵelementContainer","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","i0.ɵɵadvance","i0.ɵɵproperty","windowService","passThrough","ReplaySubject","displayData$","trackData","debounceTime","onIntersection","LazyRenderComponent","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelementEnd","chartClick","i0.ɵɵtext","Mean","Kurtosis","LazyEchartComponent","zone","dragEnabled","height","dragging","selecting","SCROLL_RATE","runOutsideAngular","el","addEventListener","onMouseMove","onMouseDown","clickedOnText","pageX","pageY","lastPositionX","lastPositionY","preventDefault","currentPositionX","currentPositionY","deltaY","scrollTop","scrollLeft","onMouseUp","onMouseLeave","element","y","clickedText","nodes","childNodes","range","document","createRange","node","nodeType","selectNodeContents","isInside","getBoundingClientRect","rect","left","top","right","bottom","DragScrollComponent","i0.ɵɵprojection","i0.ɵɵstyleProp","DkuFrontendCoreModule","$state","dialogs","paramMap","create","DkuParamMap","$on","closeAll","DkuActivatedRouteService","has","get","getAll","ngZone","dkuActivatedRouteService","stateParams$","run","shareReplay","projectKey$","projectKey","refresh","datasetName","datasetFullName","worksheetId","CurrentRouteService","dkuHttp","contextProjectKey","listPartitionsWithName","getFullInfo","PrivateDatasetsAPI","futureWatcher","list","datasetSmartName","save","worksheet","currentSample","dataSpec","rebuildSample","getComputationPlan","card","getComputationResults","sampleId","fixCard","computeResults","cacheOnly","runInteractiveQuery","query","PrivateStatisticsAPI","PrivateTaggableObjectsAPI","getSummary","listHeads","requiredPrivilege","PrivateProjectsAPI","listUsableComputables","filter","PrivateFlowAPI","getInsightWithPayload","insightId","PrivateDashboardsAPI","datasets","statistics","taggableObjects","projects","flow","dashboards","DataikuAPIService","isMeanResult","toTest","isKurtosisResult","CorrelationMatrixCard","EnrichedDashboardPage","MoodTestNSamp","InteractiveQuery","PairwiseMoodTest","DatasetSelection","CategoricalHistogramCard","EmpiricalCDF","FitCurveCard","WorksheetRootCard","Fit2DDistributionCard","PairwiseMoodTestCard","FilterDesc","IntervalFilter","AbstractHeaderCard","Min","SubsetGrouping","Distribution","Covariance","ShapiroNormalityTestCard","KsTest2Samp","PairwiseTTestCard","Distribution2D","PCACard","ContainerExecSelection","TTest1Samp","GroupedCompiledCardWrapper","SamplingParam","Count","PCA","AbstractNSampTestCard","Exponential","FitDistributionCard","PolynomialCurve","Poisson","Spearman","Sem","KDE2D","TestDistribution","UnionGrouping","BivariateHeaderCard","Skewness","Computation","Weibull","ITaggingService","OneWayANOVACard","UnivariateFrequencyTableCard","BinnedGrouping","Beta","Sum","CountGroups","Max","GroupedComputation","Laplace","MoodTestNSampCard","SignTest1SampCard","MutualInformation","JointNormal","FetchValues","OneWayAnova","Variance","TimeDimension","CardResult","Quantiles","Binomial","AppManifest","IsotonicCurve","ListMostFrequentValues","DatasetNotebookService","Fit2DDistribution","AnumGrouping","TTest2SampCard","AppHomepageTile","Tile","SummaryCardBuilder","Chi2IndTest","ScatterPlotCard","Abstract2SampTestCard","KendallTau","SerializedProject","ZTest1Samp","CrossGrouping","LogNormal","FitDistribution","BinningMode","isCorrelationMatrixCard","isAllFilter","isWorksheetRootCard","isAbstractHeaderCard","isShapiroNormalityTestCard","isPCACard","isAbstractPairwiseTestCard","isAbstractNSampTestCard","isBivariateHeaderCard","isSignTest1SampCard","isAndFilter","isAbstract2SampTestCard","CorrelationMetric","isCorrelationMatrixCardResult","InsightAccessState","isMoodTestNSampResult","isInteractiveQueryResult","isPairwiseMoodTestResult","PartitionSelectionMethod","isCategoricalHistogramCardResult","isEmpiricalCDFResult","isFitCurveCardResult","isWorksheetRootCardResult","isFit2DDistributionCardResult","isPairwiseMoodTestCardResult","ExpressionLanguage","ClosedMode","isAbstractHeaderCardResult","isMinResult","isSubsetGroupingResult","isFittedDistribution","isCovarianceResult","isShapiroNormalityTestCardResult","isKsTest2SampResult","isPairwiseTTestCardResult","isFittedDistribution2D","isPCACardResult","ContainerExecMode","isTTest1SampResult","isGroupedCardResult","SamplingMethod","isCountResult","isPCAResult","isAbstractNSampleTestCardResult","isFittedExponential","isFitDistributionCardResult","isParametrizedPolynomialCurve","isFittedPoisson","isSpearmanResult","isSemResult","isFittedKDE2D","isTestDistributionResult","isUnionGroupingResult","isBivariateHeaderCardResult","isSkewnessResult","isUnivariateComputation","isBivariateComputation","isMultivariateComputation","isFittedWeibull","TaggableType","isOneWayANOVACardResult","isUnivariateFrequencyTableCardResult","isBinnedGroupingResult","isFittedBeta","isSumResult","isCountGroupsResult","isMaxResult","isGroupedComputationResult","isFittedLaplace","isMoodTestNSampCardResult","isSignTest1SampCardResult","isMutualInformationResult","isFittedJointNormal","isFetchValuesResult","isOneWayAnovaResult","isVarianceResult","Period","UnavailabilityReason","isUnavailableCardResult","isQuantilesResult","isFittedBinomial","AppInstantiationPermission","isParametrizedIsotonicCurve","isListMostFrequentValuesResult","NotebookType","isFit2DDistributionResult","isAnumGroupingResult","isTTest2SampCardResult","ProjectVariablesTileBehavior","EditSQLDatasetTileBehavior","EditFolderTileBehavior","UploadDatasetSetFileTileBehavior","EditFSDatasetTileBehavior","ManagedFolderSetFileTileBehavior","AppHomepageTileType","PropagateSchemaTileBehavior","TileDisplayMode","DisplayTitleMode","TileClickAction","TileResizeImageMode","TileType","ComputedStatType","isChi2IndTestResult","isScatterPlotCardResult","isAbstract2SampTestCardResult","isKendallTauResult","ReaderAuthorization","Mode","SQLLikeRecipeInitializationMode","ProjectAppType","ProjectType","FlowDisplaySettings","ZonesGraphRenderingAlgorithm","isZTest1SampResult","isCrossGroupingResult","isFittedLogNormal","isFitDistributionResult","PairwiseTTest","Chi2IndTestCard","Pareto","MultiComputation","NormalMixture","DummyComputation","BivariateFrequencyTableCard","ColumnCard","Pearson","SignTest1Samp","NumericalHistogramCard","Variable","StdDev","SerializedDataset","BivariateBoxPlotCard","MoodTest2SampCard","QuantilesTableCard","FitCurve","BivariateHistogramCard","TZTest1SampCard","MosaicPlotCard","MergeGrouping","UnivariateSummaryStatsCard","BivariateSummaryStatsCard","Curve","Normal","Shapiro","KsTest2SampCard","UnivariateHeaderCard","AbstractCardContainer","Triangular","PValueAdjustmentMethod","isMultivariateCard","isChi2IndTestCard","isColumnCard","isBivariateCard","isTZTest1SampCard","isUnivariateCard","isAbstractCardContainer","isPairwiseTTestResult","isChi2IndTestCardResult","isFittedPareto","isMultiComputationResult","isFittedNormalMixture","isDummyComputationResult","isBivariateFrequencyTableCardResult","isColumnCardResult","isPearsonResult","isSignTest1SampResult","isNumericalHistogramCardResult","Type","isStdDevResult","RebuildBehavior","CrossProjectBuildBehaviour","isBivariateBoxPlotCardResult","isMoodTest2SampCardResult","isQuantilesTableCardResult","isFitCurveResult","isBivariateHistogramCardResult","isTZTest1SampCardResult","isMosaicPlotCardResult","isMergeGroupingResult","isUnivariateSummaryStatsCardResult","isBivariateSummaryStatsCardResult","isParametrizedCurve","isFittedNormal","isShapiroResult","isKsTest2SampCardResult","isUnivariateHeaderCardResult","isAbstractCardContainerResult","isFittedTriangular","CHARS","randomId","_","floor","random","join","isObject","isDefined","object","catchAPIError","errorContext","rethrowCaught","catchError","isSerializedError","isEnhancedSerializedError","isRawAPIError","pushError","throwError","catchAPIErrorFailureAction","transform","values","quoteValues","FormatModalityPipe","singular","num","plural","PlurifyPipe","charAt","toUpperCase","slice","CapitalizePipe","formatModality","plurify","capitalize","getBasicCardTitle","showHistogram","knownStdDev","getFullCardTitle","ret","getCardSubtitle","xColumns","columns","column","xColumn","yColumn","metric","heatmapParams","filterVariablesWithoutValues","testTarget","value1","value2","yValues","noFilterIfAll","simplifyFilter","innerFilters","filters","simplifiedInnerFilter","innerFilter","dedupedFilters","outer","dedupedFilter","getNumberOfColumns","isFullyComputed","reason","NOT_COMPUTED","computationCount","notComputedCount","resetCardIds","cards","subCard","identicalVariableNames","unselectVariables","vars","draft","selected","unselectVariable","variable","getWorksheetObjectRef","ws","STATISTICS_WORKSHEET","hasConfidenceLevel","resolveSmartName","chunks","split","normalizeSmartName","datasetLoc","toSmartName","DEFAULT_TAGGABLE_OBJECT_FIELDS","checklists","customFields","tags","DEFAULT_DATASET_SELECTION_FIELDS","enabled","distinct","ordering","rules","maxRecords","targetRatio","latestPartitionsN","partitionSelectionMethod","ALL","maxReadUncompressedBytes","withinFirstN","DEFAULT_SPLIT_BY_SPEC","groupWithAll","groupWithOthers","maxValues","binningMode","AUTO","customBinningBoundaries","currentRoute","DataikuAPI","StringUtils","localStorageService","worksheetLoc$","refreshListTrigger$","worksheetsIfAvailable$","worksheetLoc","mapTo","undefined","error$","BehaviorSubject","worksheets","worksheetLocalStorageKey","changeWorksheetId","setWorksheetLoc","listWorksheets","getError","computeNewStateForId","baseStateName","current","replace","storageKey","set","remove","go","location","createWorksheet","rootCard","transmogrify","inputDatasetSmartName","autoRefreshSample","refreshTrigger","datasetSelection","samplingMethod","HEAD_SEQUENTIAL","containerSelection","containerMode","INHERIT","confidenceLevel","showConfidenceInterval","getDatasetFullInfo","newWorksheet","duplicateWorksheet","deleteWorksheet","EdaService","$root","wl","ErrorFixability","SmartLogTailComponent","canBeUnexpected","closable","errorFoldable","resetError","open","detailedMessageOrMessage","apiError","detailedMessage","message","APIErrorAlertComponent","CardActionType","ModalShape","component","data","modalShape","parent","NARROW","config","getBaseConfig","dialogRef","setupFocus","reject","afterClosed","answer","afterOpened","container","$","find","baseConfig","closeOnNavigation","panelClass","viewContainerRef","ModalsService","AnalysisType","futureWatcherService","forceLoadSample","getSample","sample","SampleContextService","sampleContextService","mapVariables","variables","disabled","isVariableDisabled","availableVariables","getAnalysisType","UNIVARIATE_CARD","MULTIVARIATE_CARD","CONTINUOUS","BIVARIATE_CARD","CATEGORICAL","isTestVariable","UNIVARIATE_HEADER","BIVARIATE_HEADER","getCardDefault","analysisType","analysisDefault","getAnalysisDefault","defaultOptions","showBoxPlot","showFrequencyTable","showQuantile","showSummary","showMosaicPlot","showScatterPlot","SPEARMAN","showValues","showColors","showAbsValues","threshold","distributions","distribution","xResolution","yResolution","curves","degree","adjustmentMethod","NONE","maxGroups","maxValuesX","maxValuesY","CardWizardService","getAttributeName","property","getCssSelector","escapedValue","enabled$","colorMap","colorGenerator","scale","category20","hsl","darker","toString","toggleQaSelectors","flag","getColorForSelector","QaSelectorService","qaSelectorService","element$","overlayRef$","timer","switchMapTo","updatePosition","size","overlayWidth","width","overlayHeight","markForCheck","setElementAndOverlayRef","overlayRef","setData","qa","displayedData","color","derivedSelectors","attribute","boxShadow","QaSelectorComponent","expandInput","overlay","qaSelectors","isOverlayEnabled","propagateEvent","isOverlayOpened","onMouseDown$","onMouseUp$","ownerDocument","mouseDown","preventAnotherLongPress","delay","takeUntil","closeOverlay","openOverlay","dispose","componentRef","positionStrategy","position","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","hasBackdrop","scrollStrategy","scrollStrategies","reposition","portal","attach","instance","detectChanges","attributes","setAttribute","htmlAttrValue","QaSelectorDirective","iconAction","hasBorder","iconHasAction","backdropClick","close","observers","setSeeThrough","seeThrough","elts","addClass","removeClass","ModalHeaderComponent","allStatItems","cardType","label","variableType","xVariableType","yVariableType","paramsChange","localParams","availableStatItems","statItem","isItemDisplayed","toggleStat","compute","GenericSummaryStatsCardConfigComponent","elementRef","injector","AngularjsDkuBsSelectDirective","modelChange","DkuBsSelectComponent","propagateChange","select","model","DkuBsSelectFormControlComponent","float","isNaN","isFloat","addForm","DkuValidators","newItem","editedItems","uniq","splice","setDisabledState","isDisabled","disable","enable","SimpleNumberListComponent","validateBinningBoundaries","badBinningBoundary","BINNING_MODES","FIXED_NB","CUSTOM","supportedBinningModes","configForm","maxValuesControl","groupWithOthersControl","customBinningBoundariesControl","clearValidators","setValidators","min","max","adjustCustomBinningValidators","isCategorical","BinningConfigComponent","binningModes","bm","param","validate","c","invalidForm","validityChange","binningConfig","groupOthers","CategoricalHistogramCardConfigComponent","xBinningConfig","BivariateBoxPlotCardConfigComponent","UnivariateFrequencyTableCardConfigComponent","defaultCustomFreqs","customFreqs","customFreqsEnabled","sortBy","addQuantile","dropQuantile","QuantilesTableCardConfigComponent","nbBins","NumericalHistogramCardConfigComponent","yBinningConfig","groupWithOthersX","groupWithOthersY","xBinningMode","yBinningMode","xCustomBinningBoundaries","yCustomBinningBoundaries","Abstract2DPivotCardConfigComponent","symbolSize","ScatterPlotCardConfigComponent","minCheckedValidator","checkboxTypes","formGroup","checked","checkbox","minNotChecked","configured","unconfiguredEvents","dkuHashCode","hash","charCodeAt","configure","script","dlid","wt1Queue","_wt1Q","dipInstanceId","licenseKind","distrib","distribVersion","registrationChannel","isAutomation","version","login","udr","devInstance","createElement","src","async","head","appendChild","formattedDate","Date","console","debug","StandaloneWT1Service","WT1Service","warn","wt1Svc","WT1SVC","LegacyWT1Service","results","indexOf","FilterPipe","countTitle","disabledMessage","dragDropable","sortDraggable","dropped","currentList","lastSelectedItem","selectItem","previousItem","shiftKey","prevIndex","currIndex","endIndex","dragStarted","ev","selectedItems","trackByVariableName","ListBoxComponent","multiselectable","hideItemsOnDrop","removeItem","ListBoxFormControlComponent","cardWizardService","wt1Service","validityTooltipChange","selectedAvailableVariables","selectedSelectedVariables","count","tooManySelectedVariablesWarning","variableTypes","validator","o","allVariables$","xColumns$","currentVariables$","findIndex","xVariable","tap","toggleOptions","curColumns","overLimit","addedTypes","arr","option","del","differenceWith","onDropAdd","droppedItems","newValue","currentValue","previousContainer","indexes","d","offset","sumBy","curIndex","droppedCount","onDropVariables","currentXValue","newXValue","UnivariateHeaderCardConfigComponent","selectedVariables","selectedFactors","constructor","objectEmpty","yColumn$","xColumnTypes","yColumnType","controlName","unionWith","yValue","onDropFactors","currentYValue","newYValue","onDropResponse","BivariateHeaderCardConfigComponent","noneSelectedText","selectParams","selectableItems","selectableItem","selectedVariableName","newSelectableItems","displayName","noVariableLabel","previousValue","SingleVariableSelectorComponent","hypothesizedMean","TZTest1SampCardConfigComponent","hypothesizedMedian","SignTest1SampCardConfigComponent","ShapiroNormalityTestCardConfigComponent","observeFormControl","formControl","suggestedYValues$","yColumnName","queryResult","testVariables$","groupVariables$","Abstract2SampCardConfigComponent","toggleFormControl","conditionControl","conditionValue","enableValue","controlValue","groupingMethod","minLength","AbstractNSampCardConfigComponent","adjustmentMethods","BONFERRONI","HOLM_BONFERRONI","AbstractPairwiseTestCardConfigComponent","Chi2IndTestCardConfigComponent","isIntegerValidator","Number","isInteger","isNotInteger","fitDistributions","nbComponents","FitDistributionCardConfigComponent","distributionGroup","x_relative_bandwidth","y_relative_bandwidth","Fit2DDistributionCardConfigComponent","fitCurves","FitCurveCardConfigComponent","changedParams","columns$","columnVariable","patch","addControl","MultivariateCardConfigComponent","className","getEditorWidth","CardEditorComponent","onClick","wt1Click","Wt1ClickDirective","TestState","WizardState","state","ANALYSIS","previousState","selectedTest","ONE_SAMPLE","stateName","TEST","FIT","VARIABLES","title","changedParamsValid","setCardType","goToState","goToPreviousState","setTestType","changeValidity","validity","changeValidityTooltip","tooltip","validationTooltip","changeParams","dismiss","newCard","canSave","NewCardModalComponent","smarterNumber","str","precision","cleaned","toPrecision","SmarterNumberPipe","beginning","end","LEFT","RIGHT","BOTH","NEITHER","MAX_VALUE","childFilter","fullFilterName","FilterNamePipe","cardId","persistenceKey","collapsedByDefault","filterArg","CollapsibleBase","headerCard","statType","headerSplitBy","splitBy","CollapsingService","watchIsCollapsed","collapsible","initialValue","getItem","updatedValues","change","isCollapsed","setIsCollapsed","newIsCollapsed","setItem","collapsed","localStorage","LocalStorageCollapsingService","NoopCollapsingService","DeleteDialogComponent","AngularjsDatasetSelectorDirective","datasetChange","DatasetSelectorComponent","changeDetectionRef","dataset","DatasetSelectorFormControlComponent","form","projectSelectParams","originalProjectKey","originalDatasetName","writableProjects","selectedProject","some","datasetsOnly","selectedDataset","importDataset","confirm","DuplicateWorksheetDialogComponent","RenameWorksheetDialogComponent","ProgressStackMessageBuilder","percentage","radius","stackMessage","started","setAbortFunction","abortFunction","abort","update","progress","getPercentage","states","build","WaitingOverlayComponent","ABORT_ERROR","errorType","httpCode","SpinnerService","futures","spinnerRequestCount","isSpinnerDisplayed","spinnerServiceInstance","bindSpinner","spinnerHolder$","longOperation","bindStaticOverlay","attachedObservable","futureState","aborter","f","bindOverlayAndWaitForResult","aborted$","shouldDisplayOverlay","isOverlayDisplayed","global","centerHorizontally","centerVertically","shouldDisplaySpinner","release","acquire","WaitingService","columnsToVariables","schemaColumns","INITIAL_STATE","requestedCardIds","sampleExternallyRequested","state$","getRequestedCards","getRequestedCardIds","getWorksheet","ids","getCardsToCompute","getComputedCards","computedCards","requestedCard","computedCard","cardParams","isSampleExternallyRequested","getLoc","getWorksheetLoc","getRootCard","getDatasetLoc","getDataset","getFocusedCardId","focusedCardId","getRootCardResults","computedResults","getComputedResults","failedComputationsCount","cardResult","getDataSpec","schemaSource","schema","setErrorTransition","resultsReceivedTransition","receivedComputedCard","topLevelCard","sampleLoadedTransition","waitingService","collapsingService","selectors","computeService","worksheetSaver","dirtyWorksheet","savedWorksheet","pick","hasFilter","nbColumns","allCardIdsInFixedWorksheet","fixedWorksheet","previousDataSpec","newDataSpec","worksheetComputer","computeTrigger$","dataSpecChanged$","skip","worksheetLocChanged$","abortCondition$","race","fakeRootCard","computeCard","transitions","FAILURE","datasetLoader","withLatestFrom","receivedDatasetLoc","expectedDatasetLoc","datasetLoaded","worksheetLoader","pairwise","prevLoc","newLoc","worksheetInitialLoadTransition","collapsingWatcher","cardIds","sampleLoader","cardsToCompute","sampleKey","currentSampleResponse","newSample","getAllProcesses","computationJson","computation","paramsJson","resultsJson","computationResultsJson","computationResults","copyString","copyToClipboard","text","tabs","selectedIndex","tempInput","style","body","execCommand","removeChild","DebugCardModalComponent","useCache","ComputeService","modalsService","createOldModal","transitions$","backgroundProcesses","newState","reducer","resetFocusedCardTransition","editRootCard","immediate","editRootCardTransition","swapCards","swapCardsTransition","swapHeaderCardColumns","draftCard","draftResults","addTopLevelCard","worksheetDraft","addTopLevelCardTransition","editDataSpec","editDataSpecTransition","loadWorksheet","loadWorksheetTransition","editWorksheetName","newName","renameWorksheetTransition","debugCard","computePlan","catch","createInsight","insight","dashboardCreationId","listed","newScope","init","WorksheetContextService","DatasetStatus","datasetStatus$","apiError$","datasetFullInfo$","info","managed","beingBuilt","currentBuildState","aboutToBeBuilt","neverBuiltBuildable","buildable","lastBuild","isNotUnauthorized","requiresDatasetBuild","USER_CONFIG_DATASET","USER_CONFIG_OR_BUILD","fixability","status","ignoreError","BEING_BUILT","ABOUT_TO_BE_BUILT","EMPTY_BUILD","FAILED_BUILD","buildOpenDataset","jobStartRedirects","goToJob","DatasetErrorCtaComponent","hide","opened","preventCloseList","hidePopup","showPopup","anchor","dkuPopover","templatePortal","popupTemplate","notifyTrigger$","popups","querySelectorAll","backdropClass","viewRef","show","DkuPopoverTriggerDirective","hidden","notifyTriggerSource","asObservable","closedWithinPopover","DkuPopoverComponent","AngularjsDatasetSelectionOrderingDirective","DatasetUtils","boundDatasetSupportsReadOrdering","datasetSupportsReadOrdering","datasetFullInfo","supportsReadOrdering","DatasetSelectionOrderingFieldsComponent","renderer","onTouch","Boolean","setProperty","CommaSeparatedViewDirective","parseInt","ForceIntegerDirective","dataikuAPIService","SamplingData","partitionSelectionMethodChange","selectedPartitionsChange","latestPartitionsNChange","selectedPartitions","partitionsList","loadPartitionsList","nameInfo","response","partitionSelectionMethods","PartitionSelectionComponent","Expressions","translateConds","uiData","conditions","cond","op","getOperatorByName","repr","anumLiteral","mode","condStr","expression","FilterNiceReprPipe","createModal","dataSpecChange","partitioned","enableFiltering","datasetSelectionForOrdering","samplingMethods","streamSamplingMethods","samplingMethodDescriptions","streamSamplingMethodsDesc","selection","popover","onFilteringChange","$new","ok","SampleSettingsComponent","action","UPDATE","newParams","EditConfidenceLevelSettingsComponent","dropHighlight","highlightFilter","HighlightSettingsComponent","ContainerSelectionFormComponent","readOnly","ContainerSettingsComponent","fadeInOutHeight","opacity","willChange","layout","isFitCurveCard","CardTitlePipe","updateSiblings","columnParams","isStatCard","EditCardModalComponent","createVarianceComparisonCard","groupBy","variance","totalCount","mean","sum","median","std","skewness","kurtosis","sem","completeCount","nbEmpty","zeroCount","zeroRatio","nonZeroRatio","iqr","distinctCount","nbNonEmpty","groupingColumn","createShapiroCard","extendedActions","addShapiro","canAddCard","proposedCard","ADD","TZTest1SampCardHelpComponent","ShapiroNormalityTestCardHelpComponent","ListComparedPopulationsComponent","KsTest2SampCardHelpComponent","SignTest1SampCardHelpComponent","Chi2IndTestCardHelpComponent","GenericNSampMoodTestHelpComponent","addGroupedShapiro","addGroupedSummary","OneWayANOVACardHelpComponent","GenericNSampTTestCardHelpComponent","isAvailableForCard","CardHelpComponent","finish","HeatmapConfigComponent","dialog","menuActive","hasConfigureVisualizationModal","restoreFocus","deleteCard","DELETE","configureCard","updateCard","configureVisualization","addCard","publish","PUBLISH","treatAs","DEBUG","CardMenuComponent","allowGroupAll","splitByChange","selectedVariableControl","enableFunction","selectedVariable","patchBinningConfig","patchGroupWithAll","variables$","patchForm","changeSplitByColumn","SplitBySettingsComponent","worksheetContextService","isTopLevel","displayedResults$","displayedParams$","displayOverlay","updateDisplayedState","displayedParams","displayedResults","subscribeOn","scrollIntoView","propagateAction","trackByIndex","hasPossiblyChanged","oldState","warnings","Set","CardBodyComponent","rendererFactory2","toggleQaMode","createRenderer","classList","test","cookie","isQaEnabled","QaModeService","cdRef","qaModeService","inputValue$","pipeValue$","delayInMs","DelayWhenFalsePipe","remoteDragHandle","params$","subtitle","cardCollapseState$","helpCollapseState$","helpIsAvailable$","showCollapsingControls","scrollIntoViewOnResult","getElementById","changeSplitBy","newSplitBy","toggleCard","toggleHelp","handleAction","HIGHLIGHT","newFilter","changeGroupBy","newGroupBy","TopLevelCardComponent","discoverRemoteDragHandle","drag","cdkDragRefs","_dragRef","withHandles","trackByCardId","handleTopLevelCardAction","highlightEnabled","highlightType","REORDER_HEADER_CARD","isCardCollapsible","WorksheetRootCardComponent","currentProjectSummary$","ProjectsService","cdr","projectsService","evaluationResult","valueSubject","value$","permission","currentProjectSummary","evaluatedExpr","permissionValue","DkuEvaluatePermissionsPipe","edaService","worksheets$","dataSpec$","rootCardParams$","rootCardResults$","worksheet$","hasNoCard","openAnalysisModal","handleRootCardAction","clearHighlightFilter","subParams","updateDataSpec","renameWorksheet","take","changeWorksheet","WorksheetComponent","useClass","versionDocRoot","page","DoclinkWrapperComponent","apiService","EdaComponent","insight$","updateRequests$","updateDataSpecRequests$","insightData$","insightRef","INSIGHT","getInsightObjectRef","insightWithPayload","parse","payload","sample$","prev","cur","curRequest","refreshOnDataSpecChange","insightData","updateInsight","availableVariables$","noComputationUpdated$","updated$","updateReq","updateDataSpecRequest","fixedCard","getUpdatedInsight","setInsight","getInsightData","getDataSpecRequest","log","updateInsightParamsResults","InsightContextService","insightContextService","updated","adjustDataSpec","newParam","handleCardAction","InsightCardComponent","ConnectionPropertiesListComponent","DowngradedConnectionPropertiesListComponent","resolvedDatasetName","WorksheetRedirectionPageComponent","DOMParser","parseFromString","innerText","StripHtmlPipe","noMatchTooltip","EditTypeaheadComponent","filterValue","suggestion","computeValue","computeDisplay","computedTooltip","valueFn","displayFn","sug","valueChange","DowngradedEditTypeaheadInputComponent","directive","ajsDirective","outputs","angular","propagateDigest","stateUtilsProvider","useFactory","$injector","deps","APIXHRServiceProvider","DataikuAPIProvider","GraphZoomTrackerServiceProvider","DatasetUtilsProvider","CachedAPICallsProvider","FutureWatcherProvider","FutureProgressModalProvider","FutureWaitingProvider","ProgressStackMessageBuilderProvider","DKUConstantsProvider","LegacyDialogsProvider","$stateProvider","$locationProvider","StringUtilsProvider","TopNavProvider","WT1Provider","$dkuSanitizeProvider","ThrottleProvider","$rootScopeProvider","ExportUtilsProvider","ExpressionsProvider","UpgradedFiltersProvider","localStorageServiceProvider","SamplingDataProvider","LoggerProvider","CreateModalFromTemplateProvider","SpinnerServiceProvider","WidgetsModule","EditableListInputModule","EditableListModule","KeyValuesListModule","ValuesListModule","CredentialsListModule","ConnectionPropertiesListModule","ModalsModule","DataikuAPIModule","RequestsModule","NavModule","parentModule","CoreModule","kv","hasOwnProperty","EntriesPipe","nice","substr","NiceConstPipe","infoMessage","dict","severity","InfoMessageAlertClassPipe","d3Formatter","no","d3","format","PluralizePipe","nFirst","out","ReplacePipe","chars","s","EscapeHtmlPipe","numerator","denominator","round","PercentagePipe","expFormatter","siFormatter","digitFormatters","abs","log10","SmartNumberPipe","ratio","spaces","tens","toFixed","SmartPercentagePipe","now","getTime","friendlyDurationShort","seconds","ref","noSeconds","sec","hours","days","months","years","sb","setInterval","reference","FriendlyTimeDeltaShortPipe","time","sameDay","date1","date2","getFullYear","getMonth","getDate","today","yesterday","tomorrow","setDate","datePipe","date","FriendlyDateTimePipe","diffInSeconds","hrs","FriendlyDurationPipe","DurationHHMMSSPipe","to","SliceListPipe","upgradedFilters","orders","orderBy","OrderByPipe","FilesizePipe","p","NicePrecisionPipe","FriendlyDurationShortPipe","taskType","predictionType","MlTaskTypeToIconPipe","backendType","_args","BackendTypeToIconPipe","getArray","RangePipe","PipesModule","standalone","ngModule","DataikuWT1Module","providers","legacy","Map","masterClock$","refCount","readClock$","maxHeight","registerHeight","heightReader","HeightService","heightService","key$","getChildHeight","child","offsetHeight","setParentHeight","newKey","HeightEqualizerComponent","headerAction","headerParams$","collapseStates$","headerParams","watchers","handleStatCardAction","newColumnCards","columnCard","existingStatCard","statCard","newHeaderParams","toggleStatCard","getCardKey","ColumnCardBodyComponent","ColumnTitleComponent","results$","columnCollapseStates$","observables","toggleColumn","handleColumnCardUpdate","handleColumnCardDelete","columnIndex","xColumnIndex","handleColumnCardExport","exportedCard","configureAnalysis","handleColumnCardAction","trackByColumnName","dropColumn","HeaderCardBodyComponent","categoryColorMap","nextCategoryColorIndex","categoryColorPalette","category20b","getNextNamedColor","getColorForVariable","getColorFromIndex","ColorsService","patternCache","getStripePattern","stripeColor","backgroundColor","cacheKey","pattern","generateStripePattern","patternCanvas","pctx","getContext","imageSmoothingEnabled","fillStyle","fillRect","beginPath","moveTo","lineTo","fill","image","repeat","PatternsService","colorsService","patternsService","buildChart","chartClicked","componentType","componentSubType","histogram","dataIndex","labels","counts","highlightData","highlightedCounts","series","stack","itemColor","borderColor","rgb","itemStyle","barBorderColor","barBorderWidth","emphasis","chartOptions","grid","containLabel","formatter","confine","trigger","axisPointer","xAxis","axisLabel","axisTick","axisLine","yAxis","animation","CategoricalHistogramCardBodyComponent","showLabel","ColoredPValueComponent","GenericSummaryStatsCardBodyComponent","QuantilesTableCardBodyComponent","getNumericalChartAxisTicks","splitXAxis","minVal","maxVal","interval","Interval","setExtent","niceExtent","fixMin","fixMax","getTicks","histogramOptions","buildBarChartOptions","buildChartOptions","bins","tooltipFormatter","maxCount","boxPlotInverseRatio","boxPlot","histogramData","bin","highlightedCount","chain","borderWidth","yAxisIndex","renderItem","api","highlightedHValue","start","coord","shape","styleEmphasis","silent","highlightedStart","highlightedSize","coordinateSystem","pc01","pc25","pc75","pc99","ticks","rotate","splitNumber","stringRepr","NumericalHistogramCardBodyComponent","UnivariateFrequencyTableCardBodyComponent","yIndex","xIndex","seriesIndex","xFilter","xBins","yFilter","yBins","updateNBins","xBinLabels","xBinCount","yBinCount","j","regularData","xLabel","yLabel","flatIndex","highlightCount","highlightedItemStyle","BivariateHistogramCardBodyComponent","decompactArray","compacted","Image","onerror","onload","w","h","canvas","ctx","drawImage","imageData","getImageData","dataView","DataView","buffer","vmax","vmin","output","Float64Array","setUint8","getUint32","density","xMin","xMax","yMin","yMax","dMin","dMax","createFromResult","DensityMap","dataPointToPixel","valueAtPixel","valueAtDataPoint","createDensityImage","colors","delta","linear","domain","createImageData","rawData","ix","iy","dstIdx","r","g","putImageData","isVisible$","debouncedVisibility$","resultsAndParams$","chartData$","densityMap","onMouseOver","mousePosition","chart","convertFromPixel","offsetX","offsetY","chartData","mouseValue","onMouseOut","onChartInitialized","showContent","zlevel","splitLine","dimensions","origin","Fit2DDistributionCardBodyComponent","groupCollapseStates$","groups","toggleGroup","exportGroup","groupIndex","groupFilter","getAsSingleTestCard","isMoodTestNSampCard","GroupedCardBodyComponent","stopPropEvent","listen","ClickStopDirective","convertToHeaderCard","dropRow","GroupedHeaderCardBodyComponent","capitalizePipe","DistributionNamePipe","distributionNamePipe","buildDensityCharts","buildQQPlots","minAbsDiff","maxAbsDiff","fitResult","qqData","plot","qq","theoretical","idx","empirical","absDiff","sizeScale","large","lineStyle","qqPlotOptions","nameLocation","nameGap","filterName","histogramSeriesData","histogramLabels","legendData","maxDensity","distributionLines","pdf","pdfPlot","seriesData","xvals","probs","symbol","normal","densityChartOptions","legend","textStyle","fontSize","padding","emphasisStyle","FitDistributionCardBodyComponent","curvesData","parametrizedCurves","minMaxReducer","initMinMax","minX","minY","maxX","ceil","maxY","curveSeries","cd","scatterSeries","z","xSeries","ySeries","FitCurveCardBodyComponent","ignoreDiagonal","lastXSort","lastYSort","xCrossMasked","yCrossMasked","valueTransformer","flattenedData","flatten","tmpMin","tmpMax","dataMax","dataMin","dataMaxMin","xVariablesWithValues","curVariable","curVal","yVariablesWithValues","xLabels","yLabels","initMasks","applyMasks","drawScales","lastXSortAscending","lastYSortAscending","resetable","xMask","yMask","maskedXLabels","maskedYLabels","maskedData","maskedColors","maskedWarnings","computeColor","textColor","showAscendingArrowX","xindex","showDescendingArrowX","showAscendingArrowY","yindex","showDescendingArrowY","sortForX","reverse","valuesToSortWithOriIndex","y1","y2","sortForY","valuesToSort","x1","x2","scaleCanvasRef","dpr","devicePixelRatio","canvasHeight","CANVAS_WIDTH","scaleBarHeight","clearRect","increment","CANVAS_COLORSCALE_WIDTH","y0","yP","fillText","yM","mouseOverScale","CANVAS_COLORSCALE_OFFSET","drawValueOnScale","mouseOverValue","font","mouseOutScale","displayValue","maskedDataOrWarning","cross","xMasked","yMasked","horizontalCross","verticalCross","HeatmapComponent","buildHeatmapChartParams","heatmapData","heatmapWarnings","scoreIdx","warningIdx","col","xIdx","yIdx","score","scores","partialErrors","heatmapLabels","CorrelationMatrixCardBodyComponent","ComponentsModule","cdfChartOptions","pvalue","step","zip","cdf1","cdf2","KsTest2SampCardBodyComponent","refreshBoxPlots","boxPlots","boxPlotsOptions","getFlattenedIndex","colIdx","rowIdx","nbGroups","GenericPairwiseTestCardBodyComponent","UnavailableCardBodyComponent","buildVarianceChartOptions","buildScatterPlotChartOptions","buildHeatmapChartOptions","explainedVarianceRatio","varianceLabels","cumulativeSum","cumsumVarianceRatios","varianceChartOptions","nameTextStyle","explainedVariance","xAxisIndex","markLine","projections","curProj","scatterPlotChartOptions","components","curComponent","cc","heatmapEVLabels","heatmapColumnLabels","PCACardBodyComponent","BivariateFrequencyTableCardBodyComponent","filterNamePipe","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","drawableBoxPlots","curBoxPlot","isVertical","axisVals","catAxis","numAxis","axisVariable","aggregatedVariable","BivariateBoxPlotCardBodyComponent","mosaic","highlightedYPercentages","yCount","yVals","xVals","xTickData","yTickData","xPercentages","yPercentages","xCount","xOffset","yOffset","stripedPattern","highlightedY","percent","boundaryGap","xStart","yStart","xSize","ySize","encode","MosaicPlotCardBodyComponent","allX","highlightedXSeries","allY","highlightedYSeries","hasHighlight","ScatterPlotCardBodyComponent","locationParameterName","createBoxPlot","boxPlotData","allGroups","globalBoxPlotOptions","GenericNSampTestCardBodyComponent","buildDensityChart","histogramSeries","normalPdf","ShapiroNormalityTestCardBodyComponent","rebuildColorScale","chi2contribution","freqTableData","expectedCounts","actual","expected","xValues","maxContribution","colorScale","cellColors","sqDiff","Chi2IndTestCardBodyComponent","jStat","rebuildTZDistributionChart","studentt","dof","statistic","absStatistic","nbPoints","pos","xValsBefore","xValsAfter","yValsBefore","yValsAfter","statisticDistributionChartOptions","areaStyle","TZTest1SampCardBodyComponent","SignTest1SampCardBodyComponent","cancel","ConfirmModalComponent","ack","AckModalComponent","defaultVal","PromptModalComponent","selectedItem","defaultItem","SelectModalComponent","EdaModule","APIXHRService","API_PATH","qPromise","upgradedPromise","stringifyParams","headers","statusText","details","$customMessage","ctype","startsWith","getErrorDetails","Assert","DkuLegacyHttpService","EditTypeAheadModule","ngDoBootstrap","AppModule","echartsInstance","zrenderInstance","getZr","animationClass","prototype","unpatched","isFinished","stop","_running","zrenderClass","patchZRender","extraProviders","bootstrapModule","bootstrap","strictDi"],"mappings":"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ClBAC,GCiBAC,GCRAC,GCUAC,GCAAC,GCAAC,GCLAC,GCIAC,GCbAC,GCeAC,GCLAC,GCHAC,GCKAC,GCCAC,GCJAC,GCEAC,GCGAC,GCLAC,GCKAC,GCDAC,GCHAC,GCLAC,GCUAC,GCZAC,GCQAC,GCbAC,GCSAC,GCEAC,GCKAC,GCKAC,GCZAC,GCQAC,GCNAC,GCFAC,GCRAC,GCUAC,GCCAC,GCEAC,GCFAC,GCQAC,GCTAC,GC+BAC,GCjCAC,GCZAC,GCcAC,GCGAC,GCEAC,GCPAC,GCIAC,GCCAC,GCHAC,GCKAC,GCPAC,GCEAC,GCIAC,GCJAC,GCFAC,GCEAC,GCGAC,GCHAC,GCLAC,GCqCAC,GC7BAC,GCHAC,GCQAC,GCVAC,GCGAC,GCfAC,GCoBAC,GCHAC,GCHAC,GCFAC,GCQAC,GClBAC,GCgBAC,GCAAC,GCGAC,GCPAC,GCqBAC,GClBAC,GCFAC,GCHAC,GCOAC,GpFhBLC,GAAZ,SAAYA,G,OACR,cACA,sBACA,0BACA,kBAJQA,EAAZ,CAKC,ICQM,SAASC,GAAwBvF,GAAiD,MAAO,uBAAyBA,EAAO/a,KoFNzH,SAASugB,GAAYxF,GAAuC,MAAO,QAAUA,EAAO/a,K3EmBpF,SAASwgB,GAAoBzF,GAA6C,MAAO,mBAAqBA,EAAO/a,KKb7G,SAASygB,GAAqB1F,GAA8C,MAAO,CAAC,mBAAqB,qBAAqBpQ,SAASoQ,EAAO/a,MKC9I,SAAS0gB,GAA2B3F,GAAoD,MAAO,YAAcA,EAAO/a,KICpH,SAAS2gB,GAAU5F,GAAmC,MAAO,QAAUA,EAAO/a,K8DH9E,SAAS4gB,GAA2B7F,GAAoD,MAAO,CAAC,iBAAmB,iBAAiBpQ,SAASoQ,EAAO/a,MvDOpJ,SAAS6gB,GAAwB9F,GAAiD,MAAO,CAAC,aAAe,eAAiB,iBAAmB,iBAAiBpQ,SAASoQ,EAAO/a,MUD9K,SAAS8gB,GAAsB/F,GAA+C,MAAO,qBAAuBA,EAAO/a,KeLnH,SAAS+gB,GAAoBhG,GAA6C,MAAO,oBAAsBA,EAAO/a,K+BJ9G,SAASghB,GAAYjG,GAAuC,MAAO,QAAUA,EAAO/a,KTOpF,SAASihB,GAAwBlG,GAAiD,MAAO,CAAC,kBA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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","import { init } from 'echarts';\n\n/**\n * Monkey-patch Echarts/zrender to avoid excessive resource consumption\n *\n * Before this patch:\n * - Zrender internally starts a requestAnimationFrame() loop to handle redraw/animations\n * - This loop keeps running as long as the chart is displayed in the page, even if there is no animation...\n * - In current browsers (checked on Chrome 76 and Firefox 68), firing a new animation frame has some overhead\n *   (because it triggers \"Update Layer Tree\", \"Composite Layer\", ...) even if the handler is a no-op\n *\n * => CPU/GPU consumption is very high because the page is constantly being redrawn\n *\n * With this patch:\n * - The requestAnimationFrame() loop stops itself if it has nothing to do anymore\n *\n * => Browser goes idle when there is nothing to redraw\n *\n */\n\nexport function patchZRender() {\n    // Create a fake echarts instance (only way to access the prototypes)\n    const echartsInstance = init(document.createElement('div'));\n\n    // Get corresponding zrender instance\n    const zrenderInstance = (echartsInstance as any).getZr();\n\n    // Patch zrender's Animation.js file so that requestAnimationFrame() loop is:\n    // - Stopped whenever there are no clips in animation manager (Animation.js)\n    // - Restarted whenever something is likely to change this may have changed\n    const animationClass = zrenderInstance.animation.constructor.prototype;\n\n    patch(animationClass, 'addClip', function(unpatched) {\n        unpatched();\n        this.start(); // Automatically restart requestAnimationFrame() loop\n    });\n\n    patch(animationClass, '_update', function(unpatched) {\n        if (this.isFinished()) {\n            this.stop(); // Automatically stop requestAnimationFrame() loop\n        }\n        unpatched();\n    });\n\n    patch(animationClass, '_startLoop', function(unpatched) {\n        if (this._running) {\n            return; // Make sure requestAnimationFrame() loop isn't already started\n        }\n        unpatched();\n    });\n\n    // Patch ZRender main class to restart the requestAnimationFrame() loop in restart in some specific cases\n    // such as hover, changed configuration, etc.\n    const zrenderClass = zrenderInstance.constructor.prototype;\n    const methodNames = [\n        'add', 'remove', 'configLayer', 'setBackgroundColor', 'refreshImmediately',\n        'refresh', 'refreshHover', 'refreshHoverImmediately'\n    ];\n    for (const methodName of methodNames) {\n        patch(zrenderClass, methodName, function(unpatched) {\n            unpatched();\n            this.animation.start(); // Restart the loop\n        });\n    }\n\n    // Not needed anymore\n    echartsInstance.dispose();\n\n    console.log('Zrender patched!');\n}\n\n\nfunction patch(proto: any, methodName: string, wrapper: (this: any, unpatched: () => any) => any) {\n    const existingMethod = proto[methodName];\n    if (!existingMethod) {\n        throw new Error('Couldn\\'t patch method: ' + methodName);\n    }\n\n    // tslint:disable-next-line: only-arrow-functions\n    proto[methodName] = function() {\n        const args = arguments;\n        return wrapper.bind(this)(() => existingMethod.apply(this, args));\n    };\n}\n","<div class=\"editable-list__input-group\">\n    <mat-form-field>\n        <input \n            data-qa-dku-list-input\n            matInput\n            [matAutocomplete]=\"auto\"\n            [formControl]=\"inputControl\"\n            [type]=\"type\" \n            [name]=\"name\"\n            class=\"editable-list__input\"\n            placeholder=\"{{placeholder}}\" \n            autocomplete=\"{{autocomplete}}\"\n            (focus)=\"handleFocus($event)\" \n            (blur)=\"handleBlur()\" \n            [required]=\"required\"\n        >\n\n        <mat-autocomplete #auto=\"matAutocomplete\" [disableRipple]=\"true\">\n            <mat-option *ngFor=\"let suggestion of (suggestions || [])\" [value]=\"suggestion\" (onSelectionChange)=\"onSelectionChange($event)\" (click)=\"onSelectionClick($event)\">\n                {{ suggestion }}\n            </mat-option>\n        </mat-autocomplete>\n\n    </mat-form-field>\n    <div [hidden]=\"!warnValueIsTrimmable()\">\n        <div class=\"editable-list__input-warning-message\">Input starts or ends with one or more spaces.</div>\n    </div>\n\n    <div [hidden]=\"!(inputControl?.invalid && (inputControl?.dirty || inputControl?.touched))\">\n        <div class=\"editable-list__input-error-message\" [hidden]=\"!(inputControl?.errors && inputControl?.errors?.required)\">Please fill this field.</div>\n    </div>\n</div>\n","import { Component, Input, Output, HostListener, EventEmitter, ViewChild, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatAutocompleteTrigger, MatAutocomplete, AUTOCOMPLETE_PANEL_HEIGHT } from '@angular/material/autocomplete';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { MatOption, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange } from '@angular/material/core';\n\n/**\n * Input meant to be used within an editable list.\n */\n@UntilDestroy()\n@Component({\n    selector: 'editable-list-input',\n    templateUrl: './editable-list-input.component.html',\n    styleUrls: ['./editable-list-input.component.less']\n})\nexport class EditableListInputComponent implements OnInit {\n    @Input() type: string = 'text';\n    @Input() inputControl: FormControl;\n    @Input() name: string;\n    @Input() placeholder: string;\n    // native browser autocomplete\n    @Input() autocomplete: string;\n    @Input() required: boolean = false;\n    @Input() warnIfTrimmable: boolean = false;\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n    @Output() onEnter: EventEmitter<any> = new EventEmitter();\n    @Output() inputChange: EventEmitter<string> = new EventEmitter();\n    // suggestions for mat-autocomplete\n    @Input() suggestions?: string[];\n    @ViewChild(MatAutocomplete) matAutocompleteEl: MatAutocomplete;\n    @ViewChild(MatAutocompleteTrigger) matAutocompleteTrigger: MatAutocompleteTrigger;\n\n    // whether or not user selected item in autocomplete suggestion list\n    selectedAutocompleteItemViaEnter: boolean = false;\n\n    ngOnInit() {\n        this.inputControl.valueChanges\n            .pipe(\n                distinctUntilChanged()\n            )\n            .subscribe((entry: string) => this.inputChange.emit(entry));\n    }\n\n    ngAfterViewInit() {\n        this.fixAutocompleteScroll();\n    }\n\n    handleFocus($event: FocusEvent) {\n        this.onFocus.emit($event);\n    }\n\n    handleBlur() {\n        this.onBlur.emit();\n    }\n\n    /*\n        Whenever an autocomplete item is selected, set\n        flag to true. If item was selected via click,\n        it will be reset (see onSelectionClick).\n\n        This flag is used to prevent the editable list from\n        creating a new entry after selecting a suggestion.\n    */\n    onSelectionChange(event: MatOptionSelectionChange) {\n        this.selectedAutocompleteItemViaEnter = true;\n    }\n\n    /*\n        Fires after onSelectionChange.\n        If selected autocomplete item was not done via enter key,\n        reset flag.\n    */\n    onSelectionClick(event: any) {\n        this.selectedAutocompleteItemViaEnter = false;\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    handleEnter(event: KeyboardEvent) {\n        if (!this.selectedAutocompleteItemViaEnter) {\n            this.onEnter.emit(event);\n        }\n\n        this.matAutocompleteTrigger.closePanel();\n        this.selectedAutocompleteItemViaEnter = false;\n    }\n\n    /*\n        https://github.com/angular/components/issues/3419\n\n        When using the up/down arrows to scroll through a select or autocomplete\n        list with custom height mat-option elements, the selected item becomes\n        out of sync because the mat-option height is hard coded in the\n        autocomplete code.\n\n        This workaround recalculates the scroll amount using the actual height\n        of mat-option.\n    */\n    fixAutocompleteScroll() {\n        this.matAutocompleteTrigger['_scrollToOption'] = () => {\n            const optionHeight = this.matAutocompleteEl.options.first._getHostElement().clientHeight;\n            const index: number = this.matAutocompleteEl['_keyManager'].activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.matAutocompleteEl.options, this.matAutocompleteEl.optionGroups);\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, optionHeight, this.matAutocompleteEl._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n\n            this.matAutocompleteEl._setScrollTop(newScrollPosition);\n        };\n    }\n\n    warnValueIsTrimmable() {\n        return this.warnIfTrimmable && (this.inputControl.value || \"\").trim() !== (this.inputControl.value || \"\");\n    }\n}\n","import { FormArray, AbstractControl, ValidatorFn, AsyncValidatorFn, AbstractControlOptions } from \"@angular/forms\";\n\n// Extension of FormArray that manages the list of controls automatically from values\n// Controls are created on-demand from a factory, whereas you need to sync\n// values & controls manually with FormArray\nexport class FormArrayRepeat extends FormArray {\n    constructor(\n        private controlFactory: () => AbstractControl,\n        validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n        asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n        super([], validatorOrOpts, asyncValidator);\n    }\n\n    // Add a new control at the end (shortcut)\n    add() {\n        this.push(this.controlFactory());\n    }\n\n    // Override Angular's method\n    patchValue(value: any[], options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\n        this.updateControls(value);\n        super.patchValue(value, options);\n    }\n\n    // Override Angular's method\n    setValue(value: any[], options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\n        this.updateControls(value);\n        super.setValue(value, options);\n    }\n\n    // Override Angular's method\n    reset(value: any = [], options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\n        this.updateControls(value);\n        super.reset(value, options);\n    }\n\n    private updateControls(value: any) {\n        if (!value) {\n            value = [];\n        }\n        const expectedNbControls = value.length;\n        while (this.controls.length > expectedNbControls) {\n            this.removeAt(this.controls.length - 1);\n        }\n        while (this.controls.length < expectedNbControls) {\n            this.push(this.controlFactory());\n        }\n    }\n}\n","<div class=\"editable-list\" [class.editable-list--full-width]=\"fullWidthList\">\n    <!-- Main block -->\n    <ul *ngIf=\"!sortable\" class=\"editable-list__items\">\n        <li #itemLi *ngFor=\"let item of itemsControls; let index = index;\" class=\"common-styles-only editable-list__item\" [class.editable-list__item--divider]=\"hasDivider\">\n            <ng-container *ngTemplateOutlet=\"itemTemplate, context: { item: item, index: index }\"></ng-container>\n        </li>\n    </ul>\n\n    <!-- Main block when drag and drop is enabled -->\n    <ul *ngIf=\"sortable\" class=\"editable-list__items\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n        <li #itemLi *ngFor=\"let item of itemsControls; let index = index;\" class=\"common-styles-only editable-list__item\"  [class.editable-list__item--divider]=\"hasDivider\" cdkDrag>\n            <editable-list-drag cdkDragHandle data-qa-editable-list-drag></editable-list-drag>\n            <ng-container *ngTemplateOutlet=\"itemTemplate, context: { item: item, index: index }\"></ng-container>\n        </li>\n    </ul>\n\n    <!-- Add button footer -->\n    <div class=\"editable-list__add\" *ngIf=\"!disableAdd\">\n        <button type=\"button\" data-qa-add-button class=\"btn btn--primary btn--text editable-list__add-label\" (click)=\"add()\">\n            <i class=\"icon-plus\"></i>{{addLabel}}\n        </button>\n    </div>\n</div>\n\n<!-- Row template -->\n<ng-template #itemTemplate let-item=\"item\" let-index=\"index\">\n    <!-- Default Template -->\n    <editable-list-template *ngIf=\"!template\">\n        {{item?.get(\"item\").value}} at index {{ index }}\n    </editable-list-template>\n\n    <!-- Custom Template -->\n    <ng-container *ngIf=\"template\">\n        <ng-container *ngTemplateOutlet=\"template, context: { item: item, index: index, goToNext: enter(index) }\"></ng-container>\n    </ng-container>\n\n    <editable-list-delete (onDelete)=\"delete($event, index)\"></editable-list-delete>\n</ng-template>\n","import { AfterViewInit, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, Input, Output, QueryList, TemplateRef, ViewChildren, ChangeDetectorRef, forwardRef, OnDestroy, Directive, OnInit } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormArray, FormBuilder } from '@angular/forms';\nimport { Observable, merge } from 'rxjs';\nimport { startWith, switchMap } from 'rxjs/operators';\nimport _ from 'lodash';\nimport { EditableListInputComponent } from '../editable-list-input/editable-list-input.component';\nimport { FormArrayRepeat } from '@utils/form-array-repeat';\n\n/**\n * Drag icon of an editable list. Can be used alone.\n */\n@Component({\n    selector: 'editable-list-drag',\n    template: '<i class=\"editable-list__drag-icon icon-reorder\"></i>',\n    styleUrls: ['./editable-list.component.less']\n})\nexport class EditableListDragComponent { }\n\n/**\n * Arrow icon of an editable list. Can be used alone.\n */\n@Component({\n    selector: 'editable-list-arrow',\n    template: '<i class=\"editable-list__arrow-icon icon-long-arrow-right\"></i>',\n    styleUrls: ['./editable-list.component.less']\n})\nexport class EditableListArrowComponent { }\n\n/**\n * Delete icon of an editable list. Can be used alone.\n */\n@Component({\n    selector: 'editable-list-delete',\n    template: `<button type=\"button\" class=\"btn btn--text btn--danger btn-icon editable-list__delete\" (click)=\"onDelete.emit($event)\" tabindex=\"-1\" data-qa-editable-list-delete>\n        <i class=\"icon-trash editable-list__delete\"></i>\n    </button>`,\n    styleUrls: ['./editable-list.component.less']\n})\nexport class EditableListDeleteComponent {\n    @Output() onDelete: EventEmitter<any> = new EventEmitter();\n}\n\n/**\n * Template meant to be used in an editable list between the sort icon (if sortable) and the trash icon.\n * It adds styles for edition mode.\n */\n@UntilDestroy()\n@Component({\n    selector: 'editable-list-template',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./editable-list.component.less'],\n    host: {\n        '[class.editable-list__template]': 'true',\n        '[class.editable-list__template--editing]': 'editing'\n    }\n})\nexport class EditableListTemplateComponent implements AfterViewInit, OnDestroy {\n    editing: boolean = false;\n    @Output() onInputEnter: EventEmitter<any> = new EventEmitter();\n    @ContentChildren(EditableListInputComponent) inputs: QueryList<EditableListInputComponent>;\n\n    ngAfterViewInit() {\n        const inputs$: Observable<QueryList<EditableListInputComponent>> = this.inputs.changes.pipe(startWith(this.inputs));\n\n        inputs$.pipe(\n            switchMap(inputs => merge(...inputs.map(input => input.onFocus))),\n            untilDestroyed(this)\n        ).subscribe(() => this.setEditionMode(true));\n\n        inputs$.pipe(\n            switchMap(inputs => merge(...inputs.map(input => input.onBlur))),\n            untilDestroyed(this)\n        ).subscribe(() => this.setEditionMode(false));\n\n        inputs$.pipe(\n            switchMap(inputs => merge(...inputs.map(input => input.onEnter))),\n            untilDestroyed(this)\n        ).subscribe((event: any) => this.handleEnter(event));\n    }\n\n    handleEnter(event: Event) {\n        this.onInputEnter.emit(event);\n    }\n\n    setEditionMode(editing: boolean) {\n        this.editing = editing;\n    }\n\n    ngOnDestroy(): void { }\n}\n\n/**\n * Most generic code to be inherited by any list with editable capabilities.\n */\n@UntilDestroy()\n@Directive()\nexport class EditableListBase implements ControlValueAccessor {\n    items: Array<any> = [];\n    itemsFormArray: FormArrayRepeat;\n\n    @Input() addLabel: string = 'Add';\n    @Input() sortable: boolean = false;\n    @Input() hasDivider: boolean = true;\n    @Input() focusOnEnter: boolean = true;\n    @Input() fullWidthList: boolean = false;\n    @Input() disableAdd: boolean = false;\n    @Output() onAdd = new EventEmitter<number>();\n    @Output() onDelete = new EventEmitter<number>();\n    @Output() onValidityChange = new EventEmitter<boolean>(true);\n    @Output() onFocus = new EventEmitter<any>();\n    @Output() onBlur = new EventEmitter<any>();\n    @Output() onReorder = new EventEmitter<any>();\n\n    onChange: Function = () => { };\n\n    onTouched: Function = () => { };\n\n    writeValue(obj: any): void {\n        this.items = _.cloneDeep(obj) || [];\n        if (this.items && this.items.length) {\n            this.itemsFormArray && this.itemsFormArray.setValue(this.items);\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n}\n\n/**\n * A basic list that enables sort, add and remove capabilities on a list of FormArrayRepeat items.\n * It uses common lists styles and helpers through:\n *\n * - editable-list-drag\n * - editable-list-arrow\n * - editable-list-delete\n * - editable-list-input\n * - editable-list-template\n *\n * It is meant to be used with a template which is provided with:\n * - item           an instance of the given itemsFormArray.\n * - index          its index.\n * - goToNext       a method that allows to focus the next row (or add it if none).\n\n * @example\n  <editable-list [itemsFormArray]=\"attendeesFormArray\" addLabel=\"Add Attendee\" sortable=\"true\" (itemsChange)=\"handleChange($event)\" (onAdd)=\"handleAdd($event)\" (onDelete)=\"handleDelete($event)\">\n      <ng-template let-item=\"item\" let-goToNext=\"goToNext\">\n          <editable-list-template (onInputEnter)=\"goToNext()\">\n              <editable-list-input ngDefaultControl [inputControl]=\"item?.get('firstName')\" placeholder=\"Attendee first name\"></editable-list-input>\n              <editable-list-input ngDefaultControl [inputControl]=\"item?.get('lastName')\" placeholder=\"Attendee last name\"></editable-list-input>\n              <input type=\"checkbox\" [formControl]=\"item?.get('wantGoodies')\"/> Want goodies\n          </editable-list-template>\n      </ng-template>\n  </editable-list>\n *\n * If you have the matching specific use cases, you probably want to use pre-templated components like key-values-list, values-list, credentials-list or connection-properties-list.\n * If you have a new use case, you can take inspiration from these lists.\n */\n@Component({\n    selector: 'editable-list',\n    templateUrl: './editable-list.component.html',\n    styleUrls: ['./editable-list.component.less'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => EditableListComponent),\n            multi: true\n        }\n    ]\n})\nexport class EditableListComponent extends EditableListBase implements OnDestroy, OnInit {\n    @ContentChild(TemplateRef, { static: false }) template: TemplateRef<any>;\n    @ViewChildren('itemLi') itemsLis: QueryList<ElementRef>;\n    @Input() itemsFormArray: FormArrayRepeat = new FormArrayRepeat(() => {\n        return this.formBuilder.group({\n            item: this.formBuilder.control('Template item value', [])\n        });\n    });\n    @Output() itemsChange = new EventEmitter<Array<Object>>();\n    formBuilder: FormBuilder;\n\n    constructor(private changeDetectorRef: ChangeDetectorRef, fb: FormBuilder) {\n        super();\n        this.formBuilder = fb;\n    }\n\n    ngOnInit(): void {\n        // Subscribe to any changes on the form\n        this.itemsFormArray.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => {\n                this.handleChange(formValue);\n            });\n\n        // Subscribe to form validity changes\n        this.itemsFormArray.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => { this.onValidityChange.emit(this.itemsFormArray.valid); });\n    }\n\n    ngOnDestroy(): void { }\n\n    get itemsControls() { return (this.itemsFormArray as FormArray).controls; }\n    get itemsArray() { return this.itemsFormArray.value; }\n\n    /** Add item and triggers onAdd event */\n    add() {\n        this.itemsFormArray.add();\n        this.handleAdd(this.itemsFormArray.length - 1);\n        // Focus newly added item\n        window.setTimeout(() => {\n            this.focus(this.itemsLis.length - 1);\n        }, 100);\n    }\n\n    /** Delete item at given index and triggers onDelete event */\n    delete(event: Event, index: number) {\n        event.stopPropagation();\n        this.itemsFormArray.removeAt(index);\n        this.handleDelete(index);\n    }\n\n    drop(event: CdkDragDrop<string[]>) {\n        moveItemInArray(this.itemsArray, event.previousIndex, event.currentIndex);\n        this.itemsFormArray.setValue(this.itemsArray);\n        this.onReorder.emit(event);\n    }\n\n    /** Focus the first input found at the given item index. */\n    focus(index: number) {\n        const itemLi = this.itemsLis && this.itemsLis.toArray()[index];\n        const itemLiFirstInput = itemLi && itemLi.nativeElement.querySelector('input[type=\"text\"]');\n        itemLiFirstInput && itemLiFirstInput.focus();\n    }\n\n    /** Focus next item or create one if none. Meant to be used from components within the template. */\n    enter(index: number) {\n        return (event: Event) => {\n            if (!this.focusOnEnter) {\n                return;\n            }\n\n            event.stopPropagation();\n\n            if (index < this.itemsArray.length - 1) {\n                this.focus(index + 1);\n            } else {\n                this.add();\n            }\n        }\n    }\n\n    // EVENTS HANDLERS\n\n    /* Triggered when the list has changed in length either through removal or addition or when the template requires it.\n     * Provides the list of current items. */\n    handleChange(items: Array<Object>) {\n        this.itemsChange.emit(items);\n    }\n\n    /** Triggered when an item is added. Provides the item index. */\n    handleAdd(index: number) {\n        this.onAdd.emit(index);\n    }\n\n    /** Triggered when an item is deleted. Provides the item index. */\n    handleDelete(index: number) {\n        this.onDelete.emit(index);\n    }\n}\n","import { FormGroup } from '@angular/forms';\n\n// Extension of FormGroup that allows having extra properties.\n// This overrides private methods of Angular code and thus may break unexpectedly in a future release.\nexport class TolerantFormGroup extends FormGroup {\n    originalValue: { [key: string]: any } = [];\n\n    setValue(value: { [key: string]: any }, options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\n        Object.keys(value).forEach(name => {\n            if (this.controls[name]) {\n                this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n\n        this.originalValue = value;\n\n        this.updateValueAndValidity(options);\n    }\n    \n    _updateValue(): void {\n        const reducedValue = (this as any)._reduceValue();\n        (this as { value: any }).value = { ...this.originalValue, ...reducedValue };\n    }\n}\n","<editable-list \n    [itemsFormArray]=\"itemsFormArray\"\n    [addLabel]=\"addLabel\" \n    [sortable]=\"sortable\"\n    (onAdd)=\"onAdd.emit($event)\" \n    (onDelete)=\"onDelete.emit($event)\"\n    (onValidityChange)=\"onValidityChange.emit($event)\">\n    <ng-template let-item=\"item\" let-goToNext=\"goToNext\">\n        <editable-list-template (onInputEnter)=\"goToNext($event)\">  \n            <editable-list-input \n                [inputControl]=\"item?.get(keyIdentifier)\"\n                placeholder=\"{{keyPlaceholder}}\"\n                autocomplete=\"off\"\n                name=\"credentials-name\"\n                [required]=\"keyRequired\"\n                [warnIfTrimmable]=\"warnIfTrimmable\">\n            </editable-list-input>\n            <editable-list-arrow></editable-list-arrow>\n            <editable-list-input\n                type=\"{{item?.get('secret').value ? 'password' : 'text'}}\"\n                [inputControl]=\"item?.get(valueIdentifier)\"\n                placeholder=\"{{valuePlaceholder}}\"\n                name=\"credentials-value\"\n                autocomplete=\"off\"\n                [required]=\"valueRequired\"\n                [warnIfTrimmable]=\"warnIfTrimmable\">\n            </editable-list-input>\n            <div class=\"credentials-list__checkbox\">\n                <input\n                    #secret\n                    [formControl]=\"item?.get('secret')\"\n                    type=\"checkbox\"\n                    class=\"credentials-list__checkbox-input\" />\n                <label class=\"credentials-list__checkbox-label\" (click)=\"secret.click()\">\n                    Secret\n                </label>\n            </div>\n            <div class=\"credentials-list__checkbox\" *ngIf=\"canBeFinal\">\n                <input\n                    #final\n                    [formControl]=\"item?.get('isFinal')\"\n                    type=\"checkbox\"\n                    class=\"credentials-list__checkbox-input\" />\n                <label class=\"credentials-list__checkbox-label\" (click)=\"final.click()\">\n                    Final\n                </label>\n            </div>\n        </editable-list-template>\n    </ng-template>\n</editable-list>\n","import { Component, Input, forwardRef, OnDestroy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { EditableListBase } from '../editable-list/editable-list.component';\nimport { FormArrayRepeat } from '@utils/form-array-repeat';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { Subscription } from 'rxjs';\nimport { TolerantFormGroup } from '@utils/tolerant-form-group';\n\n@UntilDestroy()\n@Component({\n    selector: 'credentials-list',\n    templateUrl: './credentials-list.component.html',\n    styleUrls: ['./credentials-list.component.less'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CredentialsListComponent),\n            multi: true\n        }\n    ]\n})\n\n/**\n * Editable list of credentials.\n * Uses editable-list-component with a dedicated template.\n * \n * @example\n * <credentials-list-component [(ngModel)]=\"credentials\"></credentials-list-component>\n */\nexport class CredentialsListComponent extends EditableListBase implements OnDestroy {\n    @Input() addLabel: string = 'Add Credentials';\n    @Input() keyPlaceholder: string = 'User Name';\n    @Input() valuePlaceholder: string = 'User Password';\n    @Input() keyIdentifier: string = 'key';\n    @Input() valueIdentifier: string = 'value';\n    @Input() canBeFinal: boolean = true;\n    @Input() keyRequired: boolean = false;\n    @Input() valueRequired: boolean = false;\n    @Input() required: boolean = false;\n    @Input() warnIfTrimmable: boolean = false;\n    formBuilder: FormBuilder;\n    private changesSubscription: Subscription;\n\n    constructor(fb: FormBuilder) {\n        super();\n        this.formBuilder = fb;\n    }\n\n    ngOnChanges() {\n        let keyValidators: any[] = [];\n        let valueValidators: any[] = [];\n\n        if (this.required) {\n            this.keyRequired = true;\n            this.valueRequired = true;\n        }\n\n        if (this.keyRequired) {\n            keyValidators.push(Validators.required);\n        }\n\n        if (this.valueRequired) {\n            valueValidators.push(Validators.required);\n        }\n\n        this.itemsFormArray = new FormArrayRepeat(() => {\n            const itemsControls = {\n                [this.keyIdentifier]: this.formBuilder.control('', keyValidators),\n                [this.valueIdentifier]: this.formBuilder.control('', valueValidators),\n                secret: this.formBuilder.control(false, [])\n            }\n    \n            if (this.canBeFinal) {\n                itemsControls.isFinal = this.formBuilder.control(false, []);\n            }\n\n            return new TolerantFormGroup(itemsControls);\n        });\n\n        if (this.items && this.items.length) {\n            this.itemsFormArray.setValue(this.items);\n        }\n\n        if (this.changesSubscription) {\n            this.changesSubscription.unsubscribe();\n        }\n\n        this.changesSubscription = this.itemsFormArray.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((event) => { this.onChange(event); });\n    }\n\n    ngOnDestroy(): void { }\n}\n","import { Component, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { IScope } from 'angular';\n\n@Component({\n    selector: 'downgraded-credentials-list',\n    templateUrl: './downgraded-credentials-list.component.html',\n})\n\n/**\n * Bridge between Angular and AngularJS to use credentials lists in the later.\n * Simply provides proper inputs and outputs, adapts ControlValueAccessor structure and propagates changes.\n * \n * @example\n * // In AngularJS code\n * <ng2-credentials-list [(items)]=\"items\"></ng2-credentials-list>\n */\nexport class DowngradedCredentialsListComponent {\n    @Input() items: Array<Object>;\n    @Input() sortable: boolean;\n    @Output() onAdd = new EventEmitter<number>();\n    @Output() onDelete = new EventEmitter<number>();\n    @Output() onChange = new EventEmitter<Array<Object>>();\n    @Output() itemsChange = new EventEmitter<Array<Object>>();\n    @Output() onValidityChange = new EventEmitter<boolean>();\n    @Input() addLabel: string = 'Add Credentials';\n    @Input() hasDivider: boolean = true;\n    @Input() focusOnEnter: boolean = true;\n    @Input() keyPlaceholder: string = 'User Name';\n    @Input() valuePlaceholder: string = 'User Password';\n    @Input() keyIdentifier: string = 'key';\n    @Input() valueIdentifier: string = 'value';\n    @Input() keyRequired: boolean = false;\n    @Input() valueRequired: boolean = false;\n    @Input() required: boolean = false;\n    @Input() canBeFinal: boolean = true;\n    @Input() warnIfTrimmable: boolean = false;\n\n    constructor(@Inject('$rootScope') private $rootScope: IScope) { \n        this.onValidityChange.subscribe(() => $rootScope.$applyAsync());\n    }\n\n    handleChange(items: Array<Object>) {\n        this.$rootScope.$applyAsync();\n        this.itemsChange.emit(items);\n        this.onChange.emit(items);\n    }\n}\n","<credentials-list \n    [ngModel]=\"items\" \n    (ngModelChange)=\"handleChange($event)\"\n    [keyPlaceholder]=\"keyPlaceholder\"\n    [valuePlaceholder]=\"valuePlaceholder\"\n    [keyIdentifier]=\"keyIdentifier\"\n    [valueIdentifier]=\"valueIdentifier\"\n    [keyRequired]=\"keyRequired\"\n    [valueRequired]=\"valueRequired\"\n    [required]=\"required\"\n    [addLabel]=\"addLabel\" \n    [sortable]=\"sortable\" \n    [hasDivider]=\"hasDivider\" \n    [focusOnEnter]=\"focusOnEnter\" \n    [canBeFinal]=\"canBeFinal\"\n    [warnIfTrimmable]=\"warnIfTrimmable\"\n    (onAdd)=\"onAdd.emit($event)\"\n    (onDelete)=\"onDelete.emit($event)\"\n    (onValidityChange)=\"onValidityChange.emit($event)\">\n</credentials-list>\n","<editable-list \n    [itemsFormArray]=\"itemsFormArray\"\n    [addLabel]=\"addLabel\" \n    [sortable]=\"sortable\"\n    [focusOnEnter]=\"focusOnEnter\"\n    [fullWidthList]=\"fullWidthList\"\n    [disableAdd]=\"disableAdd\"\n    (onAdd)=\"onAdd.emit($event)\" \n    (onDelete)=\"onDelete.emit($event)\"\n    (onReorder)=\"onReorder.emit($event)\"\n    (onValidityChange)=\"onValidityChange.emit($event)\">\n    <ng-template let-item=\"item\" let-goToNext=\"goToNext\">\n        <editable-list-template (onInputEnter)=\"goToNext($event)\">\n            <editable-list-input \n                [inputControl]=\"item?.get(inputKey)\"\n                (inputChange)=\"updateSuggestions($event)\"\n                [suggestions]=\"filteredSuggestions\"\n                autocomplete=\"{{autocomplete}}\"\n                placeholder=\"{{valuePlaceholder}}\"\n                [required]=\"required\"\n                (onFocus)=\"handleFocus($event)\" \n                (onBlur)=\"onBlur.emit($event)\">\n            </editable-list-input>\n        </editable-list-template>\n    </ng-template>\n</editable-list>\n","import { Component, forwardRef, OnChanges, Input, SimpleChanges, OnDestroy } from '@angular/core';\nimport { EditableListBase } from '../editable-list/editable-list.component';\nimport { NG_VALUE_ACCESSOR, FormBuilder, Validators } from '@angular/forms';\nimport _ from 'lodash';\nimport { FormArrayRepeat } from '@utils/form-array-repeat';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { Subscription } from 'rxjs';\nimport { TolerantFormGroup } from '@utils/tolerant-form-group';\n\n@UntilDestroy()\n@Component({\n    selector: 'values-list',\n    templateUrl: './values-list.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ValuesListComponent),\n            multi: true\n        }\n    ]\n})\n\n/**\n * Editable list of string values.\n * Uses editable-list-component with a dedicated template.\n * \n * @example\n * <values-list-component items=\"values\"></values-list-component>\n * \n * With values being either a list of strings [ '', ...] or a list of objects [{ valueIdentifier: '' }, ...].\n */\nexport class ValuesListComponent extends EditableListBase implements OnChanges, OnDestroy {\n    @Input() addLabel: string = 'Add Value';\n    @Input() valuePlaceholder: string = 'A value';\n    @Input() valueIdentifier: string;\n    @Input() required: boolean;\n    // native browser autocomplete\n    @Input() autocomplete?: string = 'on';\n    // suggestions for mat-autocomplete\n    @Input() suggestions?: string[];\n\n    // True if the items are a list of string instead of a list of objects\n    private stringsMode: boolean = false;\n    private changesSubscription: Subscription;\n    formBuilder: FormBuilder;\n    inputKey: string;\n    filteredSuggestions: string[] = [];\n\n    writeValue(obj: any): void {\n        this.items = _.cloneDeep(obj) || [];\n\n        if (this.items) {\n            this.computeInputKey();\n            if (this.stringsMode) {\n                this.items = this.items.map((item: any) =>  ({ [this.inputKey]: item }));\n            }\n            this.itemsFormArray && this.itemsFormArray.setValue(this.items);\n        }\n    }\n\n    constructor(fb: FormBuilder) {\n        super();\n        this.formBuilder = fb;\n    }\n\n    // When there is no value identifier provided ie items are stored as an array of strings,\n    // we set the value identifier to 'value' for the list item template, else we use the provided one.\n    computeInputKey() {\n        if (this.inputKey) { return; }\n        if (!this.valueIdentifier) {\n            this.inputKey = 'value';\n            this.stringsMode = true;\n        } else {\n            this.inputKey = this.valueIdentifier;\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.computeInputKey();\n\n        let validators: any[] = [];\n\n        if (this.required) {\n            validators.push(Validators.required);\n        }\n\n        if (changes.suggestions) {\n            this.autocomplete = this.suggestions?.length ? 'off' : 'on';\n        }\n\n        this.itemsFormArray = new FormArrayRepeat(() => {\n            return new TolerantFormGroup({\n                [this.inputKey]: this.formBuilder.control('', validators)\n            });\n        });\n\n        if (this.items && this.items.length) {\n            this.itemsFormArray.setValue(this.items.map((item: any) =>  ({ [this.inputKey]: item[this.inputKey] ? item[this.inputKey] : item })));\n        }\n\n        if (this.changesSubscription) {\n            this.changesSubscription.unsubscribe();\n        }\n\n        this.changesSubscription = this.itemsFormArray.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((items) => { this.handleChange(items) });\n    }\n\n    /** EVENT HANDLERS */\n    handleChange(items: Array<Object>) {\n        this.items = [];\n        if (this.stringsMode) {\n            items.forEach((item: any, i: number) => {\n                this.items[i] = item[this.inputKey];\n            });\n            this.onChange(this.items);\n        } else {\n            this.onChange(items);\n        }\n    }\n\n    handleFocus($event: FocusEvent) {\n        const item = ($event.target as HTMLInputElement)?.value;\n\n        // set current value to reset autocomplete\n        this.updateSuggestions(item);\n\n        this.onFocus.emit($event);\n    }\n\n    // for autocomplete suggestions\n    updateSuggestions(entry: string) {\n        this.filteredSuggestions = [];\n        if (this.suggestions) {\n            const lowercaseValue = entry.toLowerCase();\n            for (const candidate of this.suggestions) {\n                if (candidate && candidate.toLowerCase().includes(lowercaseValue)\n                    && !this.items.includes(candidate)) {\n                    this.filteredSuggestions.push(candidate);\n                }\n            }\n        }\n        this.filteredSuggestions.sort();\n    }\n\n    ngOnDestroy(): void { }\n}\n","import { Component, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { IScope } from 'angular';\n\n@Component({\n    selector: 'downgraded-values-list',\n    templateUrl: './downgraded-values-list.component.html',\n})\n\n/**\n * Bridge between Angular and AngularJS to use values lists in the later.\n * Simply provides proper inputs and outputs, adapts ControlValueAccessor structure and propagates changes.\n * \n * @example\n * // In AngularJS code\n * <ng2-values-list [(items)]=\"items\" (onChange)=\"change()\"></ng2-values-list>\n */\nexport class DowngradedValuesListComponent {\n    @Input() items: Array<Object>;\n    @Input() sortable: boolean;\n    @Input() suggestions: string[];\n    @Output() onAdd = new EventEmitter<number>();\n    @Output() onDelete = new EventEmitter<number>();\n    @Output() onChange = new EventEmitter<Array<Object>>();\n    @Output() onFocus = new EventEmitter<any>();\n    @Output() onBlur = new EventEmitter<any>();\n    @Output() onReorder = new EventEmitter<any>();\n    @Output() itemsChange = new EventEmitter<Array<Object>>();\n    @Output() onValidityChange = new EventEmitter<boolean>();\n    @Input() addLabel: string = 'Add Value';\n    @Input() hasDivider: boolean = true;\n    @Input() focusOnEnter: boolean = true;\n    @Input() fullWidthList: boolean = false;\n    @Input() disableAdd: boolean = false;\n    @Input() valuePlaceholder: string = 'A value';\n    @Input() valueIdentifier: string;\n    @Input() required: boolean = false;\n\n    constructor(@Inject('$rootScope') private $rootScope: IScope) { \n        this.onValidityChange.subscribe(() => $rootScope.$applyAsync());\n    }\n\n    handleChange(items: Array<Object>) {\n        this.$rootScope.$applyAsync();\n        this.itemsChange.emit(items);\n        this.onChange.emit(items);\n    }\n}\n","<values-list [ngModel]=\"items\" \n    (ngModelChange)=\"handleChange($event)\" \n    (onValidityChange)=\"onValidityChange.emit($event)\"\n    [valuePlaceholder]=\"valuePlaceholder\"\n    [valueIdentifier]=\"valueIdentifier\"\n    [required]=\"required\"\n    [addLabel]=\"addLabel\" \n    [sortable]=\"sortable\" \n    [hasDivider]=\"hasDivider\" \n    [focusOnEnter]=\"focusOnEnter\"\n    [fullWidthList]=\"fullWidthList\"\n    [disableAdd]=\"disableAdd\"\n    [suggestions]=\"suggestions\" \n    (onAdd)=\"onAdd.emit($event)\"\n    (onDelete)=\"onDelete.emit($event)\"\n    (onFocus)=\"onFocus.emit($event)\" \n    (onBlur)=\"onBlur.emit($event)\"\n    (onReorder)=\"onReorder.emit($event)\">\n</values-list>\n","<editable-list\n    [itemsFormArray]=\"itemsFormArray\"\n    [addLabel]=\"addLabel\"\n    [sortable]=\"sortable\"\n    (onAdd)=\"onAdd.emit($event)\"\n    (onDelete)=\"onDelete.emit($event)\"\n    (onValidityChange)=\"onValidityChange.emit($event)\">\n    <ng-template let-item=\"item\" let-goToNext=\"goToNext\" let-index=\"index\">\n        <editable-list-template (onInputEnter)=\"goToNext($event)\">\n            <i class=\"info-item\" *ngIf=\"items[index] && items[index][iconIdentifier]\" [ngClass]=\"items[index][iconIdentifier]\"></i>\n            <editable-list-input\n                [inputControl]=\"item?.get([keyIdentifier])\"\n                (inputChange)=\"setSuggestions($event, keyIdentifier)\"\n                placeholder=\"{{keyPlaceholder}}\"\n                [required]=\"keyRequired\"\n                [suggestions]=\"filteredKeySuggestions\"\n                (onFocus)=\"handleFocus($event, keyIdentifier)\"\n                [warnIfTrimmable]=\"warnIfTrimmable\">\n            </editable-list-input>\n            <editable-list-arrow></editable-list-arrow>\n            <editable-list-input\n                [inputControl]=\"item?.get(valueIdentifier)\"\n                (inputChange)=\"setSuggestions($event, valueIdentifier)\"\n                placeholder=\"{{valuePlaceholder}}\"\n                [required]=\"valueRequired\"\n                [suggestions]=\"filteredValueSuggestions\"\n                (onFocus)=\"handleFocus($event, valueIdentifier)\"\n                [warnIfTrimmable]=\"warnIfTrimmable\">\n            </editable-list-input>\n        </editable-list-template>\n    </ng-template>\n</editable-list>\n","import {AuditTrailTargetSettings, _AuditTrailTargetSettings} from './audit-trail-target-settings';\n\n/**\n * Generated from com.dataiku.dip.security.audit.model.EventServerTargetSettings\n */\nexport interface EventServerTargetSettings extends _AuditTrailTargetSettings {\n    authKey: string;\n    autoconfigureFromNodesDirectory: boolean;\n    routingKey: string;\n    routingKeyMode: EventServerTargetSettings.RoutingKeyMode;\n    trustAllSSLCertificates: boolean;\n    url: string;\n\n    // PolyJson type\n    type: 'EVENT_SERVER';\n}\n\nexport function isEventServerTargetSettings(toTest: AuditTrailTargetSettings): toTest is EventServerTargetSettings { return 'EVENT_SERVER' === toTest.type; }\n\nexport namespace EventServerTargetSettings {\n    /**\n     * Generated from com.dataiku.dip.security.audit.model.EventServerTargetSettings$RoutingKeyMode\n     */\n    export enum RoutingKeyMode {\n        FROM_MESSAGE = 'FROM_MESSAGE',\n        STATIC = 'STATIC',\n        STATIC_IF_MISSING = 'STATIC_IF_MISSING'\n    }\n}","export namespace ExceptionWithDebuggingHint {\n    /**\n     * Generated from com.dataiku.dip.exceptions.ExceptionWithDebuggingHint$DebuggingHint\n     */\n    export enum DebuggingHint {\n        CHECK_JOB_LOG = 'CHECK_JOB_LOG',\n        CHECK_BACKEND_LOG = 'CHECK_BACKEND_LOG'\n    }\n}","import {EventServerTargetSettings} from './event-server-target-settings';\nimport {KafkaTargetSettings} from './kafka-target-settings';\nimport {Log4JTargetSettings} from './log4-jtarget-settings';\n\n/**\n * Generated from com.dataiku.dip.security.audit.model.AuditTrailTargetSettings\n */\nexport interface _AuditTrailTargetSettings {\n    routingKeys: string[];\n    routingKeysFiltering: AuditTrailTargetSettings.RoutingKeyFiltering;\n    topics: string[];\n    topicsFiltering: AuditTrailTargetSettings.TopicsFiltering;\n}\n\nexport type AuditTrailTargetSettings = KafkaTargetSettings | EventServerTargetSettings | Log4JTargetSettings;\n\nexport namespace AuditTrailTargetSettings {\n    /**\n     * Generated from com.dataiku.dip.security.audit.model.AuditTrailTargetSettings$RoutingKeyFiltering\n     */\n    export enum RoutingKeyFiltering {\n        ALL = 'ALL',\n        SELECTED = 'SELECTED'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.security.audit.model.AuditTrailTargetSettings$TopicsFiltering\n     */\n    export enum TopicsFiltering {\n        ALL = 'ALL',\n        SELECTED = 'SELECTED'\n    }\n}","/**\n * Generated from com.dataiku.dip.security.SSOSettings\n */\nexport interface SSOSettings {\n    enabled: boolean;\n    protocol: SSOSettings.SSOProtocol;\n    remappingRules: SSOSettings.SSOUserRemappingRule[];\n    samlIDPMetadata: string;\n    samlLoginAttribute: string;\n    samlSPParams: SSOSettings.SAMLSPParams;\n    spnegoKrb5File: string;\n    spnegoLoginConfFile: string;\n    spnegoMode: SSOSettings.SPNEGOMode;\n    spnegoPreauthKeytab: string;\n    spnegoPreauthLogin: string;\n    spnegoPreauthPassword: string;\n    spnegoPreauthPrincipal: string;\n    spnegoStripRealm: boolean;\n}\n\nexport namespace SSOSettings {\n    /**\n     * Generated from com.dataiku.dip.security.SSOSettings$SAMLSPParams\n     */\n    export interface SAMLSPParams {\n        acsURL: string;\n        entityId: string;\n        keyAlias: string;\n        keystoreFile: string;\n        keystorePassword: string;\n        signRequests: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.security.SSOSettings$SPNEGOMode\n     */\n    export enum SPNEGOMode {\n        PREAUTH_KEYTAB = 'PREAUTH_KEYTAB',\n        CUSTOM_LOGIN_CONF = 'CUSTOM_LOGIN_CONF'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.security.SSOSettings$SSOUserRemappingRule\n     */\n    export interface SSOUserRemappingRule {\n        ruleFrom: string;\n        ruleTo: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.security.SSOSettings$SSOProtocol\n     */\n    export enum SSOProtocol {\n        SAML = 'SAML',\n        SPNEGO = 'SPNEGO'\n    }\n}","export namespace FutureProgressState {\n    /**\n     * Generated from com.dataiku.dip.futures.FutureProgressState$StateUnit\n     */\n    export enum StateUnit {\n        SIZE = 'SIZE',\n        FILES = 'FILES',\n        RECORDS = 'RECORDS',\n        NONE = 'NONE'\n    }\n}\n\n/**\n * Generated from com.dataiku.dip.futures.FutureProgressState\n */\nexport interface FutureProgressState {\n    cur: number;\n    depth: number;\n    important: boolean;\n    msSinceStart: number;\n    name: string;\n    startTimestamp: number;\n    target: number;\n    unit: FutureProgressState.StateUnit;\n}","/**\n * Generated from com.dataiku.dip.coremodel.InfoMessage\n */\nexport interface InfoMessage {\n    code: string;\n    codeAsObject: any /* TODO: Missing translation of com.dataiku.dip.coremodel.InfoMessage$MessageCode */;\n    column: number;\n    context: string;\n    details: string;\n    isFatal: boolean;\n    line: number;\n    lineTo: number;\n    message: string;\n    severity: InfoMessage.Severity;\n    title: string;\n}\n\nexport namespace InfoMessage {\n    /**\n     * Generated from com.dataiku.dip.coremodel.InfoMessage$FixabilityCategory\n     */\n    export enum FixabilityCategory {\n        USER_CONFIG = 'USER_CONFIG',\n        USER_CONFIG_DATASET = 'USER_CONFIG_DATASET',\n        USER_CONFIG_FOLDER = 'USER_CONFIG_FOLDER',\n        USER_CONFIG_OR_BUILD = 'USER_CONFIG_OR_BUILD',\n        USER_CONFIG_OR_ADMIN = 'USER_CONFIG_OR_ADMIN',\n        ADMIN_INSTALLATION = 'ADMIN_INSTALLATION',\n        ADMIN_SETTINGS_SECURITY = 'ADMIN_SETTINGS_SECURITY',\n        ADMIN_SETTINGS_CONNECTIONS = 'ADMIN_SETTINGS_CONNECTIONS',\n        ADMIN_SETTINGS_CONTAINERS = 'ADMIN_SETTINGS_CONTAINERS',\n        ADMIN_SETTINGS_CODEENVS = 'ADMIN_SETTINGS_CODEENVS',\n        ADMIN_SETTINGS_PLUGINS = 'ADMIN_SETTINGS_PLUGINS',\n        ADMIN_SETTINGS_MISSING_PLUGIN = 'ADMIN_SETTINGS_MISSING_PLUGIN',\n        ADMIN_SETTINGS_USER_PROFILE = 'ADMIN_SETTINGS_USER_PROFILE',\n        ADMIN_SETTINGS_MISC = 'ADMIN_SETTINGS_MISC',\n        ADMIN_TROUBLESHOOTING = 'ADMIN_TROUBLESHOOTING',\n        PROJECT_SECURITY = 'PROJECT_SECURITY',\n        API_CALL = 'API_CALL',\n        READ_FUTURE_LOG = 'READ_FUTURE_LOG',\n        DATA = 'DATA',\n        MISSING_APP = 'MISSING_APP',\n        THIRD_PARTY_SYSTEM_CONNECTION = 'THIRD_PARTY_SYSTEM_CONNECTION',\n        HADOOP_INTEGRATION = 'HADOOP_INTEGRATION',\n        THIRD_PARTY_SYSTEM = 'THIRD_PARTY_SYSTEM',\n        IRRELEVANT = 'IRRELEVANT',\n        UNKNOWN = 'UNKNOWN'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.InfoMessage$Severity\n     */\n    export enum Severity {\n        SUCCESS = 'SUCCESS',\n        INFO = 'INFO',\n        WARNING = 'WARNING',\n        ERROR = 'ERROR'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.InfoMessage$InfoMessages\n     */\n    export interface InfoMessages {\n        anyMessage: boolean;\n        error: boolean;\n        fatal: boolean;\n        maxSeverity: InfoMessage.Severity;\n        messages: InfoMessage[];\n        success: boolean;\n        warning: boolean;\n    }\n}","export namespace DKUApp {\n    /**\n     * Generated from com.dataiku.dip.DKUApp$DSSVersion\n     */\n    export interface DSSVersion {\n        conf_version: string;\n        product_commitid: string;\n        product_version: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.DKUApp$LicensingMode\n     */\n    export enum LicensingMode {\n        NONE = 'NONE',\n        SAAS = 'SAAS',\n        ON_PREMISE_CONNECTED = 'ON_PREMISE_CONNECTED',\n        ON_PREMISE_DISCONNECTED = 'ON_PREMISE_DISCONNECTED'\n    }\n}","import { Component, Input, forwardRef, OnDestroy } from '@angular/core';\nimport { EditableListBase } from '../editable-list/editable-list.component';\nimport { NG_VALUE_ACCESSOR, FormBuilder, Validators } from '@angular/forms';\nimport { FormArrayRepeat } from '@utils/form-array-repeat';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { Subscription } from 'rxjs';\nimport { TolerantFormGroup } from '@utils/tolerant-form-group';\n\n@UntilDestroy()\n@Component({\n    selector: 'key-values-list',\n    templateUrl: './key-values-list.component.html',\n    styleUrls: ['./key-values-list.component.less'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => KeyValuesListComponent),\n            multi: true\n        }\n    ]\n})\n\n/**\n * Editable list of key / value pairs.\n * Uses editable-list-component with a dedicated template.\n *\n * @example\n * <key-values-list-component items=\"items\"></key-values-list-component>\n */\nexport class KeyValuesListComponent extends EditableListBase implements OnDestroy {\n    @Input() addLabel: string = 'Add Key/Value';\n    @Input() keyPlaceholder: string = 'A key';\n    @Input() valuePlaceholder: string = 'A value';\n    @Input() iconIdentifier: string = 'icon';\n    @Input() iconFn?: (item: any) => string;\n    @Input() keyIdentifier: string = 'key';\n    @Input() valueIdentifier: string = 'value';\n    @Input() keyRequired: boolean = false;\n    @Input() valueRequired: boolean = false;\n    @Input() required: boolean = true;\n    @Input() warnIfTrimmable: boolean = false;\n    // suggestions for mat-autocomplete\n    @Input() keySuggestions: string[] = [];\n    @Input() valueSuggestions: string[] = [];\n    formBuilder: FormBuilder;\n    filteredKeySuggestions: string[] = [];\n    filteredValueSuggestions: string[] = [];\n    private changesSubscription: Subscription;\n\n    constructor(fb: FormBuilder) {\n        super();\n        this.formBuilder = fb;\n    }\n\n    ngOnChanges() {\n        let keyValidators: any[] = [];\n        let valueValidators: any[] = [];\n\n        if (this.required) {\n            this.keyRequired = true;\n            this.valueRequired = true;\n        }\n\n        if (this.keyRequired) {\n            keyValidators.push(Validators.required);\n        }\n\n        if (this.valueRequired) {\n            valueValidators.push(Validators.required);\n        }\n\n        this.itemsFormArray = new FormArrayRepeat(() => {\n            return new TolerantFormGroup({\n                [this.keyIdentifier]: this.formBuilder.control('', keyValidators),\n                [this.valueIdentifier]: this.formBuilder.control('', valueValidators)\n            });\n        });\n\n        if (this.items && this.items.length) {\n            this.itemsFormArray.setValue(this.items);\n        }\n\n        if (this.changesSubscription) {\n            this.changesSubscription.unsubscribe();\n        }\n\n        this.changesSubscription = this.itemsFormArray.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((items) => {\n                this.items = items;\n                if (this.iconFn) {\n                    this.items.forEach(it => it[this.iconIdentifier] = this.iconFn!(it));\n                }\n                this.onChange(items);\n            });\n    }\n\n    handleFocus($event: FocusEvent, identifier: string) {\n        const item = ($event.target as HTMLInputElement)?.value;\n\n        // set current value to reset autocomplete\n        this.setSuggestions(item, identifier);\n\n        this.onFocus.emit($event);\n    }\n\n    setSuggestions(entry: string, identifier: string) {\n        if (identifier === this.keyIdentifier) {\n            this.filteredKeySuggestions = this.getFilteredSuggestions(entry,  this.keyIdentifier, this.keySuggestions);\n        } else if (identifier === this.valueIdentifier) {\n            this.filteredValueSuggestions = this.getFilteredSuggestions(entry, this.valueIdentifier, this.valueSuggestions);\n        }\n    }\n\n    // for autocomplete suggestions\n    getFilteredSuggestions(entry: string, identifier: string, suggestions: string[]) {\n        const filteredSuggestions = [];\n        if (suggestions && suggestions.length) {\n            const lowercaseValue = entry.toLowerCase();\n            for (const candidate of suggestions) {\n                if (candidate && candidate.toLowerCase().includes(lowercaseValue)\n                    && !(this.items as {[key: string]: any}[]).map(item => item[identifier]).includes(candidate)) {\n                    filteredSuggestions.push(candidate);\n                }\n            }\n        }\n        filteredSuggestions.sort();\n\n        return filteredSuggestions;\n    }\n\n    ngOnDestroy(): void { }\n}\n","import { Component, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { IScope } from 'angular';\n\n@Component({\n    selector: 'downgraded-key-values-list',\n    templateUrl: './downgraded-key-values-list.component.html',\n})\n\n/**\n * Bridge between Angular and AngularJS to use key value lists in the later.\n * Simply provides proper inputs and outputs, adapts ControlValueAccessor structure and propagates changes.\n *\n * @example\n * // In AngularJS code\n * <ng2-key-values-list [(items)]=\"items\" (onChange)=\"change()\"></ng2-key-values-list>\n */\nexport class DowngradedKeyValuesListComponent {\n    @Input() items: Array<Object>;\n    @Input() sortable: boolean;\n    @Output() onAdd = new EventEmitter<number>();\n    @Output() onDelete = new EventEmitter<number>();\n    @Output() onChange = new EventEmitter<Array<Object>>();\n    @Output() itemsChange = new EventEmitter<Array<Object>>();\n    @Input() addLabel: string = 'Add Key/Value';\n    @Input() hasDivider: boolean = true;\n    @Input() focusOnEnter: boolean = true;\n    @Input() keyPlaceholder: string = 'A key';\n    @Input() valuePlaceholder: string = 'A value';\n    @Input() iconIdentifier: string = 'icon';\n    @Input() iconFn?: (item: any) => string;\n    @Input() keyIdentifier: string = 'key';\n    @Input() valueIdentifier: string = 'value';\n    @Input() keyRequired: boolean = false;\n    @Input() valueRequired: boolean = false;\n    @Input() keySuggestions: string[];\n    @Input() valueSuggestions: string[];\n    @Input() required: boolean = false;\n    @Input() warnIfTrimmable: boolean = false;\n    @Output() onValidityChange = new EventEmitter<boolean>();\n\n    constructor(@Inject('$rootScope') private $rootScope: IScope) {\n        this.onValidityChange.subscribe(() => $rootScope.$applyAsync());\n    }\n\n    handleChange(items: Array<Object>) {\n        this.$rootScope.$applyAsync();\n        this.itemsChange.emit(items);\n        this.onChange.emit(items);\n    }\n}\n","<key-values-list [ngModel]=\"items\"\n    (ngModelChange)=\"handleChange($event)\"\n    [keyPlaceholder]=\"keyPlaceholder\"\n    [valuePlaceholder]=\"valuePlaceholder\"\n    [iconIdentifier]=\"iconIdentifier\"\n    [iconFn]=\"iconFn\"\n    [keyIdentifier]=\"keyIdentifier\"\n    [valueIdentifier]=\"valueIdentifier\"\n    [keyRequired]=\"keyRequired\"\n    [valueRequired]=\"valueRequired\"\n    [keySuggestions]=\"keySuggestions\"\n    [valueSuggestions]=\"valueSuggestions\"\n    [required]=\"required\"\n    [addLabel]=\"addLabel\"\n    [sortable]=\"sortable\"\n    [hasDivider]=\"hasDivider\"\n    [focusOnEnter]=\"focusOnEnter\"\n    [warnIfTrimmable]=\"warnIfTrimmable\"\n    (onAdd)=\"onAdd.emit($event)\"\n    (onDelete)=\"onDelete.emit($event)\"\n    (onValidityChange)=\"onValidityChange.emit($event)\">\n</key-values-list>\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport type HttpVerb = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\n/**\n * Minimal API providing access to API using DSS conventions\n */\n@Injectable()\nexport abstract class DkuHttpService {\n    public abstract request<T>(\n        method: HttpVerb,\n        path: string,\n        params?: object\n    ): Observable<T>;\n}\n","import { Observable, fromEvent, of, EMPTY, Subject, concat, combineLatest, defer, from, ObservableInput, OperatorFunction } from 'rxjs';\nimport { distinctUntilChanged, takeUntil, switchMap, delay, audit, concatMap, finalize, map, filter } from 'rxjs/operators';\nimport deepEqual from 'fast-deep-equal';\n\n/**\n * Valve letting values pass through only when it is opened\n *\n * => Latest value is stored while the valve is closed and is re-emitted when the valve is opened\n *    Interpretation: render the element when it becomes visible\n *\n * => Closing the valve does not replace the output by 'null'\n *    Interpretation: keep the rendered element on the page even if it is not visible anymore\n *\n * => Emit 'null' if a new value is pushed while the 'valve' was closed\n *    Interpretation: remove element from DOM if it is not visible and is outdated\n *\n * => Emit 'null' if a resize event is received while the element was invisible\n *    Interpretation: remove element from DOM before costly redrawing\n */\nexport function lazyRenderingValve<InputData>(input$: Observable<InputData>, visibility$: Observable<boolean>, resize$: Observable<void>) {\n    return new Observable<InputData | null>((observer) => {\n        let currentVisible = false;\n        let currentInput: any;\n        return input$.subscribe(\n            input => {\n                currentInput = input;\n                if (currentVisible) {\n                    observer.next(currentInput);\n                }\n            },\n            (err) => observer.error(err),\n            () => observer.complete()\n        ).add(visibility$.subscribe(\n            (visible) => {\n                const previouslyVisible = currentVisible;\n                currentVisible = visible;\n                if (visible && !previouslyVisible) {\n                    observer.next(currentInput);\n                }\n            },\n            (err) => observer.error(err)\n        )).add(resize$.subscribe(\n            () => {\n                if (!currentVisible) {\n                    observer.next(null);\n                }\n            },\n            (err) => observer.error(err)\n        ));\n    }).pipe(distinctUntilChanged());\n}\n\nexport function fromLongPressEvent(\n    // Element to install event listener\n    element: HTMLElement,\n    // Duration of a long press\n    durationMs: number,\n    // Decide if the event can bubble up\n    propagateEvent: (event: Event) => boolean\n) {\n    const onMouseDown$ = fromEvent(element, 'mousedown');\n    const onMouseUp$ = fromEvent(element.ownerDocument!, 'mouseup');\n\n    return onMouseDown$.pipe(\n        switchMap((mouseDown: Event & { preventAnotherLongPress?: boolean }) => {\n            if (mouseDown.preventAnotherLongPress) {\n                return EMPTY;\n            }\n            if (!propagateEvent(mouseDown)) {\n                mouseDown.preventAnotherLongPress = true;\n            }\n            return of(mouseDown).pipe(delay(durationMs), takeUntil(onMouseUp$));\n        })\n    );\n}\n\n// stolen from rxjs internals\nexport const isArray = (() => Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number'))();\n\n// stolen from rxjs internals\nexport function isNumeric(val: any): val is number | string {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n\n// Similar to https://github.com/cartant/rxjs-etc/blob/master/source/operators/auditMap.ts\n// (with less bugs hopefully...)\nexport function auditMap<T, R>(\n    project: (value: T, index: number) => ObservableInput<R>\n): OperatorFunction<T, R> {\n    return source => defer(() => {\n        const auditTrigger = new Subject<void>(); // Ask 'audit' to allow another value\n        let isRunning = false; // Is the inner observable running\n        return source.pipe(\n            audit(() => isRunning ? auditTrigger : of(true)),\n            concatMap((v, i) => {\n                const projected = from(project(v, i));\n                return concat(\n                    // Set isRunning flag before running the inner observable\n                    defer(() => { isRunning = true; return EMPTY; }),\n                    projected\n                ).pipe(finalize(() => {\n                    // Unset the isRunning flag after completion of inner observable\n                    isRunning = false;\n                    auditTrigger.next();\n                }));\n            })\n        );\n    });\n}\n\n// Similar to https://github.com/cartant/rxjs-etc/blob/master/source/observable/combineLatestObject.ts\nexport function combineLatestObject<T>(\n    obj: { [K in keyof T]: ObservableInput<T[K]> }\n): Observable<T> {\n    return combineLatest(\n        Object.entries(obj)\n            .map(([key, observable]) =>\n                from(observable as ObservableInput<any>)\n                    .pipe(map(value => ({ [key]: value })))\n            )\n    ).pipe(map(array => Object.assign({}, ...array)));\n}\n\n// Similar to RxJS's distinctUntilChanged() except that values are deeply-compared\nexport function deepDistinctUntilChanged<T>(selector: ((v: T) => any) = (v) => v) {\n    return distinctUntilChanged<T>((a, b) => deepEqual(selector(a), selector(b)));\n}\n\nexport function filterNonNull<T>(): OperatorFunction<T, NonNullable<T>> {\n    return filter<NonNullable<T>>(value => value !== null && value !== undefined)\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, MonoTypeOperatorFunction, Subscription, OperatorFunction, EMPTY, of, identity } from 'rxjs';\nimport { switchMap, takeWhile, startWith, last } from 'rxjs/operators';\nimport { intervalBackoff, IntervalBackoffConfig } from 'backoff-rxjs';\n\nimport { FutureResponse } from '../../generated-sources';\n\nimport { DkuHttpService, HttpVerb } from './dku-http.service';\nimport { auditMap } from '../utils/rxutils';\nimport { Modify } from '../utils/typedefs';\n\nexport type TypedFutureResponse<T> = Modify<FutureResponse, { 'result': T }>;\n\nconst POLLING_BACKOFF_STRATEGY: IntervalBackoffConfig = {\n    initialInterval: 500,\n    maxInterval: 10000,\n    backoffDelay: (iteration, initialInterval) =>\n        Math.pow(1.1, iteration) * initialInterval\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FutureWatcherService {\n    constructor(private dkuHttpService: DkuHttpService) { }\n\n    /**\n     * Call an API endpoint returning a future and start polling until result is available\n     * If 'abortInBackend' is set to true, the future is aborted in the backend when the observable is unsubscribed\n     */\n    public requestFuture<T>(\n        method: HttpVerb,\n        path: string,\n        params?: object,\n        abortInBackend = true\n    ): Observable<TypedFutureResponse<T>> {\n        return this.dkuHttpService.request<TypedFutureResponse<T>>(method, path, params || {})\n            .pipe(\n                this.pollFuture(),\n                abortInBackend ? this.abortFutureOnUnsubscription() : identity\n            );\n    }\n\n    /**\n     * RxJS operator that can be chained after requestFuture() in order\n     * to wait until the result is available\n     */\n    public waitForResult<T>(): OperatorFunction<TypedFutureResponse<T>, T> {\n        return future => future.pipe(\n            last(),\n            switchMap(resp => resp.hasResult ? of(resp.result) : EMPTY)\n        );\n    }\n\n    /**\n     * Private operator implementing the polling\n     */\n    private pollFuture<T>(): MonoTypeOperatorFunction<TypedFutureResponse<T>> {\n        return initialRequest => initialRequest.pipe(\n            switchMap(initialResp => {\n                return intervalBackoff(POLLING_BACKOFF_STRATEGY).pipe(\n                    auditMap(() => this.getFutureUpdate<T>(initialResp.jobId)),\n                    startWith(initialResp),\n                    takeWhile(resp => resp.alive, true)\n                );\n            })\n        );\n    }\n\n    /**\n     * Private operator implementing 'backend abort when unsubscribed' feature\n     *\n     * Note: it is impossible to ask the backend to abort a future before the frontend\n     *       receives the 'jobId'. If the 'jobId' never comes back (eg. network issue),\n     *       then the future cannot be canceled (inherent limitation of futures API)\n     */\n    private abortFutureOnUnsubscription<T>(): MonoTypeOperatorFunction<TypedFutureResponse<T>> {\n        return future => new Observable(observer => {\n            let subscription: Subscription;\n            let runningJobId: string | null = null;\n            let shouldAbort = false;\n\n            const abortIfNecessary = () => {\n                if (shouldAbort && runningJobId && !subscription.closed) {\n                    // No way to handle failure here :(\n                    this.abortFuture(runningJobId).subscribe();\n                    // Stop the watcher\n                    subscription.unsubscribe();\n                }\n            };\n\n            subscription = future.subscribe(\n                value => {\n                    runningJobId = value.alive && !value.aborted ? value.jobId : null;\n                    abortIfNecessary();\n                    observer.next(value);\n                },\n                error => {\n                    runningJobId = null;\n                    observer.error(error);\n                },\n                () => {\n                    runningJobId = null;\n                    abortIfNecessary();\n                    observer.complete();\n                }\n            );\n\n            return () => {\n                shouldAbort = true;\n                abortIfNecessary();\n            };\n        });\n    }\n\n    private getFutureUpdate<T>(futureId: string) {\n        return this.dkuHttpService.request<TypedFutureResponse<T>>('GET', '/futures/get-update', { futureId });\n    }\n\n    private abortFuture(futureId: string) {\n        return this.dkuHttpService.request<void>('POST', '/futures/abort', { futureId });\n    }\n}\n","import { realAny } from './typedefs';\n\nexport class Assert {\n    static trueish(predicate: realAny, msg: string) {\n        if (!predicate) {\n            throw new Error(msg);\n        }\n    }\n    static fail(msg: string) {\n        throw new Error(msg);\n    }\n}\n","// Function that should never be called\n// - Compile-time: produce an error if argument doesn't have type 'never'\n// - Runtime: throw an exception\nexport function assertNever(value: never): never {\n    throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\n}\n","import { Injectable } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class WindowService {\n    // Shared subscription to window:resize events\n    // Note: it is MUCH more efficient to subscribe to this observable rather\n    //       than relying on @HostListener('window:resize')\n    resize$ = fromEvent<void>(window, 'resize').pipe(share());\n}\n","<div\n    inViewport\n    [inViewportOptions]=\"{ threshold: [0] }\"\n    (inViewportAction)=\"onIntersection($event)\"\n>\n    <ng-container *ngIf=\"displayData$ | async; else invisible\">\n        <ng-container *ngTemplateOutlet=\"visibleTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-template #invisible>\n        <ng-container *ngTemplateOutlet=\"invisibleTemplate\"></ng-container>\n    </ng-template>\n</div>\n","import { Component, OnInit, TemplateRef, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { debounceTime, startWith, switchMap } from 'rxjs/operators';\nimport { ObservableInput } from 'observable-input';\n\nimport { lazyRenderingValve } from '../../utils/rxutils';\nimport { WindowService } from '../../window.service';\n\n@Component({\n    selector: 'lazy-render',\n    templateUrl: './lazy-render.component.html',\n    styleUrls: ['./lazy-render.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LazyRenderComponent implements OnInit {\n    @Input() @ObservableInput() trackData: Observable<any>;\n    @Input() @ObservableInput() passThrough: Observable<boolean> = false as any; // Known ObservableInput typing issue\n    @Input() visibleTemplate: TemplateRef<any>;\n    @Input() invisibleTemplate: TemplateRef<any>;\n\n    visibility$ = new ReplaySubject<boolean>(1);\n    displayData$: Observable<any>;\n\n    constructor(private windowService: WindowService) {\n    }\n\n    ngOnInit() {\n        this.displayData$ = this.passThrough.pipe(\n            switchMap(passThrough => passThrough ? this.trackData : lazyRenderingValve(\n                this.trackData.pipe(startWith(true)),\n                this.visibility$.pipe(debounceTime(300)),\n                this.windowService.resize$,\n            ))\n        );\n    }\n\n    onIntersection({ visible }: { visible: boolean }) {\n        this.visibility$.next(visible);\n    }\n}\n","<lazy-render\n    [trackData]=\"options\"\n    [visibleTemplate]=\"visible\"\n    [passThrough]=\"passThrough\"\n    [invisibleTemplate]=\"invisible\"\n>\n    <ng-template #visible>\n        <div\n            echarts\n            (chartClick)=\"chartClick.emit($event)\"\n            *ngIf=\"options\"\n            [options]=\"options\"\n        ></div>\n    </ng-template>\n    <ng-template #invisible>\n        <div>Loading chart...</div>\n    </ng-template>\n</lazy-render>\n","import { Input, Component, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\nimport { EChartOption } from 'echarts';\n\n@Component({\n    selector: 'lazy-echart',\n    templateUrl: './lazy-echart.component.html',\n    styleUrls: ['./lazy-echart.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LazyEchartComponent {\n    @Input() options: EChartOption;\n    @Input() passThrough = false;\n    @Output() chartClick = new EventEmitter();\n}\n","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Mean\n */\nexport interface Mean extends Computation._UnivariateComputation {\n    confidence?: number | null;\n\n    // PolyJson type\n    type: 'mean';\n}\n\nexport function isMean(toTest: Computation): toTest is Mean { return 'mean' === toTest.type; }\n\nexport namespace Mean {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Mean$MeanResult\n     */\n    export interface MeanResult extends _AvailableResult {\n        lower?: number | null;\n        upper?: number | null;\n        value: number;\n\n        // PolyJson type\n        type: 'mean';\n    }\n\n    export function isMeanResult(toTest: ComputationResult): toTest is MeanResult { return 'mean' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Kurtosis\n */\nexport interface Kurtosis extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'kurtosis';\n}\n\nexport function isKurtosis(toTest: Computation): toTest is Kurtosis { return 'kurtosis' === toTest.type; }\n\nexport namespace Kurtosis {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Kurtosis$KurtosisResult\n     */\n    export interface KurtosisResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'kurtosis';\n    }\n\n    export function isKurtosisResult(toTest: ComputationResult): toTest is KurtosisResult { return 'kurtosis' === toTest.type; }\n}","import { Component, ElementRef, OnInit, Input, ChangeDetectionStrategy, ViewChild, NgZone } from '@angular/core';\n\n@Component({\n    selector: 'drag-scroll',\n    templateUrl: './drag-scroll.component.html',\n    styleUrls: [\n        './drag-scroll.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DragScrollComponent implements OnInit {\n    @Input() dragEnabled = false;\n    @Input() height: number | null = null;\n\n    @ViewChild('scroller', { static: true }) el: ElementRef;\n\n    dragging = false;\n    selecting = false;\n    lastPositionX: number;\n    lastPositionY: number;\n    SCROLL_RATE = 1;\n\n    constructor(private zone: NgZone) { }\n\n    ngOnInit() {\n        // don't want to fire angular change detection every time the mouse moves\n        this.zone.runOutsideAngular(() => {\n            this.el.nativeElement.addEventListener('mousemove', this.onMouseMove.bind(this));\n        });\n    }\n\n    onMouseDown(event: MouseEvent) {\n        if (this.dragEnabled) {\n            const target = event.target as Element;\n\n            if (!(target && this.clickedOnText(target, event.pageX, event.pageY))) {\n                this.dragging = true;\n                this.lastPositionX = event.pageX;\n                this.lastPositionY = event.pageY;\n            } else {\n                this.selecting = true;\n            }\n        }\n    }\n\n    onMouseMove(event: MouseEvent) {\n        if (this.dragging && this.dragEnabled) {\n            // prevent text selection\n            event.preventDefault();\n\n            // get current X position\n            const currentPositionX = event.pageX;\n            const currentPositionY = event.pageY;\n\n            const deltaX = (this.lastPositionX - currentPositionX) * this.SCROLL_RATE;\n            const deltaY = (this.lastPositionY - currentPositionY) * this.SCROLL_RATE;\n            const scrollLeft = this.el.nativeElement.scrollLeft;\n            const scrollTop = this.el.nativeElement.scrollTop;\n\n            this.el.nativeElement.scrollLeft = scrollLeft + deltaX;\n            this.el.nativeElement.scrollTop = scrollTop + deltaY;\n            this.lastPositionX = currentPositionX;\n            this.lastPositionY = currentPositionY;\n        }\n    }\n\n    onMouseUp(event: MouseEvent) {\n        this.dragging = false;\n        this.selecting = false;\n    }\n\n    onMouseLeave(event: MouseEvent) {\n        this.dragging = false;\n        this.selecting = false;\n    }\n\n    private clickedOnText(element: Element, x: number, y: number) {\n        let clickedText = false;\n\n        const nodes = element.childNodes;\n        const range = document.createRange();\n        nodes.forEach(node => {\n            if (!clickedText && node.nodeType === 3) {\n                range.selectNodeContents(node);\n                if (this.isInside(x, y, range.getBoundingClientRect())) {\n                    clickedText = true;\n                }\n            }\n        });\n\n        return clickedText;\n    }\n\n    private isInside(x: number, y: number, rect: ClientRect) {\n        return x >= rect.left && y >= rect.top\n            && x <= rect.right && y <= rect.bottom;\n    }\n}\n","<div\n    class=\"drag-scroll\"\n    cdkScrollable\n    [style.cursor]=\"dragging ? 'grabbing': 'auto'\"\n    [ngStyle]=\"{'height': height}\"\n    (mouseleave)=\"onMouseLeave($event)\"\n    (mouseup)=\"onMouseUp($event)\"\n    (mousedown)=\"onMouseDown($event)\"\n    #scroller\n>\n    <ng-content></ng-content>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { NgxEchartsModule } from 'ngx-echarts';\nimport { InViewportModule } from 'ng-in-viewport';\n\nimport { LazyEchartComponent } from './components/lazy-echart/lazy-echart.component';\nimport { LazyRenderComponent } from './components/lazy-render/lazy-render.component';\nimport { DragScrollComponent } from './components/drag-scroll/drag-scroll.component';\nimport { WindowService } from './window.service';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        NgxEchartsModule,\n        InViewportModule,\n        ScrollingModule,\n    ],\n    entryComponents: [],\n    providers: [\n        WindowService,\n    ],\n    bootstrap: [],\n    declarations: [\n        LazyEchartComponent,\n        LazyRenderComponent,\n        DragScrollComponent,\n    ],\n    exports: [\n        LazyEchartComponent,\n        LazyRenderComponent,\n        DragScrollComponent,\n    ],\n})\nexport class DkuFrontendCoreModule { }\n","import {Inject, Injectable, Type} from '@angular/core';\nimport {ActivatedRoute, ActivatedRouteSnapshot, Data, ParamMap, Params, Route, UrlSegment} from '@angular/router';\nimport {Observable, Observer} from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Dict, fairAny } from 'dku-frontend-core';\nimport { $stateType } from '@migration/upgraded-providers';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DkuActivatedRouteService implements ActivatedRoute {\n\n    component: Type<any> | string | null;\n    data: Observable<Data>;\n    fragment: Observable<string>;\n    outlet: string;\n    snapshot: ActivatedRouteSnapshot;\n    url: Observable<UrlSegment[]>;\n\n    readonly children: ActivatedRoute[];\n    readonly firstChild: ActivatedRoute | null;\n    readonly parent: ActivatedRoute | null;\n    readonly pathFromRoot: ActivatedRoute[];\n    readonly queryParamMap: Observable<ParamMap>;\n    readonly root: ActivatedRoute;\n    readonly routeConfig: Route | null;\n\n    readonly paramMap: Observable<ParamMap>;\n\n    queryParams: Observable<Params>; // NOT IMPLEMENTED: discouraged in Angular\n    params: Observable<Params>; // NOT IMPLEMENTED: discouraged in Angular\n\n    constructor(\n        @Inject('$state') $state: $stateType,\n        @Inject('$rootScope') $rootScope: fairAny,\n        private dialogs: MatDialog\n    ) {\n        this.paramMap = Observable.create((observer: Observer<ParamMap>) => {\n            observer.next(new DkuParamMap($state.params));\n            $rootScope.$on('$stateChangeStart', () => {\n                // just in case, make sure we discard all modals/popup\n                this.dialogs.closeAll();\n                observer.next(new DkuParamMap($state.params));\n            });\n        });\n    }\n}\n\n/*\nThis service provides an interface very close from that of the native Angular Router's ActivatedRoute\nso that we can seamlessly transition to Angular2+ router\n */\nexport class DkuParamMap implements ParamMap {\n    /** Name of the parameters */\n    readonly keys: string[];\n\n    has(name: string): boolean {\n        return Object.keys(this.params).includes(name);\n    }\n    /**\n     * Return a single value for the given parameter name:\n     * - the value when the parameter has a single value,\n     * - the first value if the parameter has multiple values,\n     * - `null` when there is no such parameter.\n     */\n    get(name: string): string | null {\n        return this.params[name];\n    }\n    /**\n     * Return an array of values for the given parameter name.\n     *\n     * If there is no such parameter, an empty array is returned.\n     */\n    getAll(name: string): string[] {\n        return [this.params[name]];\n    }\n\n    constructor(private params: Dict<string>) {\n    }\n}\n","import { Injectable, Inject, NgZone } from '@angular/core';\nimport { DkuActivatedRouteService } from '@migration/dku-activated-route';\nimport { ParamMap } from '@angular/router';\nimport { IScope } from 'angular';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n/*\n    This is a simple service to get the state params IF we know for sure that they will be ready\n    and we don't care about future changes (no use of observables)\n*/\n@Injectable({\n    providedIn: 'root'\n})\nexport class CurrentRouteService {\n    params: ParamMap;\n\n    stateParams$ = new Observable<any>(observer => {\n        observer.next(this.$state.params);\n        return this.$rootScope.$on('$stateChangeSuccess', () =>\n            this.ngZone.run(() => observer.next(this.$state.params))\n        );\n    }).pipe(shareReplay(1));\n\n    projectKey$ = this.stateParams$.pipe(\n        map(params => params.projectKey as string | undefined)\n    );\n\n    constructor(\n        private ngZone: NgZone,\n        private dkuActivatedRouteService: DkuActivatedRouteService,\n        @Inject('$state') private $state: any,\n        @Inject('$rootScope') private $rootScope: IScope\n    ) {\n        this.dkuActivatedRouteService.paramMap.subscribe(paramMap => this.refresh(paramMap));\n    }\n\n    refresh(paramMap: ParamMap): any {\n        this.params = paramMap;\n    }\n\n    get projectKey(): string {\n        return this.$state.params.projectKey;\n    }\n\n    get datasetName(): string {\n        if (this.$state.params.datasetName) {\n            return this.$state.params.datasetName;\n        } else {\n            return this.$state.params.datasetFullName;\n        }\n    }\n\n    get worksheetId(): string {\n        return this.$state.params.worksheetId;\n    }\n}\n","import { DkuHttpService } from 'dku-frontend-core';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { NavigatorService } from 'src/generated-sources';\n\n@Injectable({providedIn: 'root'})\nexport class PrivateDatasetsAPI {\n    constructor(private dkuHttp: DkuHttpService) {\n    }\n\n    get(projectKey: string, name: string, contextProjectKey?: string): Observable<any> {\n        return this.dkuHttp.request('GET', '/datasets/get', { projectKey, name, contextProjectKey });\n    }\n\n    listPartitionsWithName(projectKey: string, datasetName: string): Observable<any> {\n        return this.dkuHttp.request('GET', '/datasets/list-partitions-with-name', { projectKey, datasetName });\n    }\n\n    getFullInfo(contextProjectKey: string, projectKey: string, name: string): Observable<NavigatorService.DatasetFullInfo> {\n        return this.dkuHttp.request('GET', '/datasets/get-full-info', { projectKey, name, contextProjectKey });\n    }\n}\n","import { Worksheet } from '@model-main/eda/worksheets/models/worksheet';\nimport { Observable } from 'rxjs';\nimport { Card, Computation, DataSpec, TaggableObjectsService, ComputationResult, WorksheetsService, CardResult, InteractiveQuery } from 'src/generated-sources';\nimport { Sample } from '@model-main/eda/compute/sampling/sample';\nimport { TypedFutureResponse, FutureWatcherService, Filter } from 'dku-frontend-core';\nimport { DkuHttpService } from 'dku-frontend-core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class PrivateStatisticsAPI {\n    constructor(\n        private dkuHttp: DkuHttpService,\n        private futureWatcher: FutureWatcherService\n    ) { }\n\n    list(projectKey: string, datasetSmartName: string): Observable<WorksheetsService.WorksheetHead[]> {\n        return this.dkuHttp.request('GET', '/eda/worksheets/list-worksheets', { projectKey, datasetSmartName });\n    }\n\n    get(projectKey: string, worksheetId: string): Observable<Worksheet> {\n        return this.dkuHttp.request('GET', '/eda/worksheets/get-worksheet', { projectKey, worksheetId });\n    }\n\n    save(worksheet: Worksheet): Observable<Worksheet> {\n        return this.dkuHttp.request('POST', '/eda/worksheets/save-worksheet', { worksheet });\n    }\n\n    currentSample(key: TaggableObjectsService.TaggableObjectRef, dataSpec: DataSpec): Observable<Sample | null> {\n        return this.dkuHttp.request('POST', '/eda/compute/samples/current', { key, dataSpec, });\n    }\n\n    rebuildSample(key: TaggableObjectsService.TaggableObjectRef, dataSpec: DataSpec): Observable<TypedFutureResponse<Sample>> {\n        return this.futureWatcher.requestFuture('POST', '/eda/compute/samples/rebuild', { key, dataSpec });\n    }\n\n    getComputationPlan(card: Card): Observable<Computation> {\n        return this.dkuHttp.request('POST', '/eda/card-compute/computation-card-plan', { card });\n    }\n\n    getComputationResults(card: Card, sampleId: string): Observable<ComputationResult> {\n        return this.dkuHttp.request('POST', '/eda/card-compute/computation-card-result', { card, sampleId });\n    }\n\n    fixCard(card: Card): Observable<Card> {\n        return this.dkuHttp.request('POST', '/eda/card-compute/fix-card', { card });\n    }\n\n    computeResults(card: Card, cacheOnly: boolean, sampleId: string): Observable<TypedFutureResponse<CardResult>> {\n        return this.futureWatcher.requestFuture('POST', '/eda/card-compute/compute-card-result', { card, cacheOnly, sampleId });\n    }\n\n    runInteractiveQuery<T extends InteractiveQuery>(query: T, sampleId: string): Observable<TypedFutureResponse<Filter<InteractiveQuery.InteractiveQueryResult, { type: T['type']}>>> {\n        return this.futureWatcher.requestFuture('POST', '/eda/card-compute/run-interactive-query', { query, sampleId }, false);\n    }\n}\n","import { Observable } from 'rxjs';\nimport { DkuHttpService } from 'dku-frontend-core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class PrivateTaggableObjectsAPI {\n    constructor(private dkuHttp: DkuHttpService) { }\n\n    delete(request: any[], contextProjectKey: string): Observable<any> {\n        return this.dkuHttp.request('GET', '/taggable-objects/delete', {\n            request,\n            contextProjectKey,\n        });\n    }\n}\n","import { ProjectsCRUDController } from 'src/generated-sources';\nimport { Observable } from 'rxjs';\nimport { DkuHttpService } from 'dku-frontend-core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class PrivateProjectsAPI {\n    constructor(private dkuHttp: DkuHttpService) { }\n\n    getSummary(projectKey: string): Observable<any> {\n        return this.dkuHttp.request('GET', '/projects/get-summary', { projectKey });\n    }\n\n    listHeads(requiredPrivilege?: string | null): Observable<ProjectsCRUDController.ProjectHead[]> {\n        return this.dkuHttp.request('GET', '/projects/list-heads', { requiredPrivilege });\n    }\n}\n","import { UsabilityComputer } from 'src/generated-sources';\nimport { DkuHttpService } from 'dku-frontend-core';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class PrivateFlowAPI {\n    constructor(private dkuHttp: DkuHttpService) {\n    }\n\n    listUsableComputables(projectKey?: string, filter?: UsabilityComputer.ListSettings): Observable<UsabilityComputer.UsableComputable[]> {\n        return this.dkuHttp.request('GET', '/flow/list-usable-computable', { projectKey, filter: JSON.stringify(filter) });\n    }\n}\n","import { DkuHttpService } from 'dku-frontend-core';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class PrivateDashboardsAPI {\n    constructor(private dkuHttp: DkuHttpService) {\n    }\n\n    getInsightWithPayload(projectKey: string, insightId: string): Observable<any> {\n        return this.dkuHttp.request<any>('GET', '/dashboards/insights/get-with-payload', { projectKey, insightId });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { PrivateDatasetsAPI } from './definitions/private-datasets-api';\nimport { PrivateStatisticsAPI } from './definitions/private-statistics-api';\nimport { PrivateProjectsAPI } from './definitions/private-projects-api';\nimport { PrivateDashboardsAPI } from './definitions/private-dashboards-api';\nimport { PrivateTaggableObjectsAPI } from './definitions/private-taggable-objects-api';\nimport { PrivateFlowAPI } from './definitions/private-flow-api';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataikuAPIService {\n    constructor(\n        public datasets: PrivateDatasetsAPI,\n        public statistics: PrivateStatisticsAPI,\n        public taggableObjects: PrivateTaggableObjectsAPI,\n        public projects: PrivateProjectsAPI,\n        public flow: PrivateFlowAPI,\n        public dashboards: PrivateDashboardsAPI\n    ) { }\n}\n","/**\n * Generated from com.dataiku.dip.eda.worksheets.models.BinningMode\n */\nexport enum BinningMode {\n    AUTO = 'AUTO',\n    FIXED_NB = 'FIXED_NB',\n    FIXED_SIZE = 'FIXED_SIZE',\n    CUSTOM = 'CUSTOM'\n}","import {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {HeatmapParams} from './common/heatmap-params';\nimport {_MultivariateCard} from './multivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.CorrelationMatrixCard\n */\nexport interface CorrelationMatrixCard extends _MultivariateCard {\n    heatmapParams: HeatmapParams;\n    metric: CorrelationMatrixCard.CorrelationMetric;\n\n    // PolyJson type\n    type: 'correlation_matrix';\n}\n\nexport function isCorrelationMatrixCard(toTest: Card): toTest is CorrelationMatrixCard { return 'correlation_matrix' === toTest.type; }\n\nexport namespace CorrelationMatrixCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.CorrelationMatrixCard$CorrelationMetric\n     */\n    export enum CorrelationMetric {\n        PEARSON = 'PEARSON',\n        SPEARMAN = 'SPEARMAN'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.CorrelationMatrixCard$CorrelationMatrixCardResult\n     */\n    export interface CorrelationMatrixCardResult extends _CardResult {\n        partialErrors?: string[] | null;\n        scores: number[];\n\n        // PolyJson type\n        type: 'correlation_matrix';\n    }\n\n    export function isCorrelationMatrixCardResult(toTest: CardResult): toTest is CorrelationMatrixCardResult { return 'correlation_matrix' === toTest.type; }\n}","export namespace EnrichedDashboardPage {\n    /**\n     * Generated from com.dataiku.dip.dashboards.model.ui.EnrichedDashboardPage$InsightAccessState\n     */\n    export enum InsightAccessState {\n        DELETED = 'DELETED',\n        NOT_EXPOSED = 'NOT_EXPOSED',\n        ANALYST = 'ANALYST',\n        READER = 'READER'\n    }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Grouping} from './../../grouping/grouping';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.MoodTestNSamp\n */\nexport interface MoodTestNSamp extends Computation._UnivariateComputation {\n    grouping: Grouping;\n\n    // PolyJson type\n    type: 'mood_test_nsamp';\n}\n\nexport function isMoodTestNSamp(toTest: Computation): toTest is MoodTestNSamp { return 'mood_test_nsamp' === toTest.type; }\n\nexport namespace MoodTestNSamp {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.MoodTestNSamp$MoodTestNSampResult\n     */\n    export interface MoodTestNSampResult extends _AvailableResult {\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'mood_test_nsamp';\n    }\n\n    export function isMoodTestNSampResult(toTest: ComputationResult): toTest is MoodTestNSampResult { return 'mood_test_nsamp' === toTest.type; }\n}","import {ListMostFrequentValues} from './list-most-frequent-values';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.queries.InteractiveQuery\n */\nexport interface _InteractiveQuery {}\n\nexport type InteractiveQuery = ListMostFrequentValues;\n\nexport namespace InteractiveQuery {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.queries.InteractiveQuery$InteractiveQueryResult\n     */\n    export interface _InteractiveQueryResult {}\n\n    export type InteractiveQueryResult = ListMostFrequentValues.ListMostFrequentValuesResult;\n\n    export function isInteractiveQueryResult(toTest: InteractiveQuery.InteractiveQueryResult): toTest is InteractiveQueryResult { return [\"list_most_frequent_values\"].includes(toTest.type); }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Grouping} from './../../grouping/grouping';\nimport {PValueAdjustmentMethod} from './../../stats/pvalue-adjustment-method';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.PairwiseMoodTest\n */\nexport interface PairwiseMoodTest extends Computation._UnivariateComputation {\n    adjustmentMethod: PValueAdjustmentMethod;\n    grouping: Grouping;\n\n    // PolyJson type\n    type: 'pairwise_mood_test';\n}\n\nexport function isPairwiseMoodTest(toTest: Computation): toTest is PairwiseMoodTest { return 'pairwise_mood_test' === toTest.type; }\n\nexport namespace PairwiseMoodTest {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.PairwiseMoodTest$PairwiseMoodTestResult\n     */\n    export interface PairwiseMoodTestResult extends _AvailableResult {\n        pvalues: number[];\n        statistics: number[];\n\n        // PolyJson type\n        type: 'pairwise_mood_test';\n    }\n\n    export function isPairwiseMoodTestResult(toTest: ComputationResult): toTest is PairwiseMoodTestResult { return 'pairwise_mood_test' === toTest.type; }\n}","import {DatasetOrdering} from './../../../../../../../dss-core/src/main/java/com/dataiku/dip/input/dataset-ordering';\nimport {DatasetSelectionToMemTable} from './dataset-selection-to-mem-table';\nimport {FilterDesc} from './../../../../../../../dss-core/src/main/java/com/dataiku/dip/dataflow/exec/filter/filter-desc';\nimport {SamplingParam} from './sampling-param';\nimport {StreamableDatasetSelection} from './streamable-dataset-selection';\n\n/**\n * Generated from com.dataiku.dip.datasets.DatasetSelection\n */\nexport interface _DatasetSelection extends SamplingParam {\n    filter: FilterDesc;\n    latestPartitionsN: number;\n    ordering: DatasetOrdering;\n    partitionSelectionMethod: DatasetSelection.PartitionSelectionMethod;\n    selectedPartitions?: string[] | null;\n}\n\nexport type DatasetSelection = DatasetSelectionToMemTable | StreamableDatasetSelection;\n\nexport namespace DatasetSelection {\n    /**\n     * Generated from com.dataiku.dip.datasets.DatasetSelection$PartitionSelectionMethod\n     */\n    export enum PartitionSelectionMethod {\n        ALL = 'ALL',\n        SELECTED = 'SELECTED',\n        LATEST_N = 'LATEST_N'\n    }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Filter} from './../../../compute/filtering/filter';\nimport {_UnivariateCard} from './../univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.CategoricalHistogramCard\n */\nexport interface CategoricalHistogramCard extends _UnivariateCard {\n    groupOthers: boolean;\n    highlightFilter?: Filter | null;\n    maxValues: number;\n\n    // PolyJson type\n    type: 'categorical_histogram';\n}\n\nexport function isCategoricalHistogramCard(toTest: Card): toTest is CategoricalHistogramCard { return 'categorical_histogram' === toTest.type; }\n\nexport namespace CategoricalHistogramCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.CategoricalHistogramCard$HistogramData\n     */\n    export interface HistogramData {\n        counts: number[];\n        filters: Filter[];\n        highlightedCounts?: number[] | null;\n        totalCount: number;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.CategoricalHistogramCard$CategoricalHistogramCardResult\n     */\n    export interface CategoricalHistogramCardResult extends _CardResult {\n        histogram: CategoricalHistogramCard.HistogramData;\n\n        // PolyJson type\n        type: 'categorical_histogram';\n    }\n\n    export function isCategoricalHistogramCardResult(toTest: CardResult): toTest is CategoricalHistogramCardResult { return 'categorical_histogram' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.EmpiricalCDF\n */\nexport interface EmpiricalCDF extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'empirical_cdf';\n}\n\nexport function isEmpiricalCDF(toTest: Computation): toTest is EmpiricalCDF { return 'empirical_cdf' === toTest.type; }\n\nexport namespace EmpiricalCDF {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.EmpiricalCDF$EmpiricalCDFResult\n     */\n    export interface EmpiricalCDFResult extends _AvailableResult {\n        probs: number[];\n        xvals: number[];\n\n        // PolyJson type\n        type: 'empirical_cdf';\n    }\n\n    export function isEmpiricalCDFResult(toTest: ComputationResult): toTest is EmpiricalCDFResult { return 'empirical_cdf' === toTest.type; }\n}","import {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {Curve} from './../../compute/curves/curve';\nimport {FitCurve} from './../../compute/computations/bivariate/fit-curve';\nimport {_BivariateCard} from './bivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.FitCurveCard\n */\nexport interface FitCurveCard extends _BivariateCard {\n    curves: Curve[];\n\n    // PolyJson type\n    type: 'fit_curve';\n}\n\nexport function isFitCurveCard(toTest: Card): toTest is FitCurveCard { return 'fit_curve' === toTest.type; }\n\nexport namespace FitCurveCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.FitCurveCard$FitCurveCardResult\n     */\n    export interface FitCurveCardResult extends _CardResult {\n        parametrizedCurves: FitCurve.FitCurveResult[];\n        xSeries: number[];\n        ySeries: number[];\n\n        // PolyJson type\n        type: 'fit_curve';\n    }\n\n    export function isFitCurveCardResult(toTest: CardResult): toTest is FitCurveCardResult { return 'fit_curve' === toTest.type; }\n}","import {AbstractCardContainer, _AbstractCardContainer} from './common/abstract-card-container';\nimport {CardResult} from './card-result';\nimport {Card} from './card';\nimport {Filter} from './../../compute/filtering/filter';\n\nexport namespace WorksheetRootCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.WorksheetRootCard$WorksheetRootCardResult\n     */\n    export interface WorksheetRootCardResult extends AbstractCardContainer._AbstractCardContainerResult {\n        // PolyJson type\n        type: 'worksheet_root';\n    }\n\n    export function isWorksheetRootCardResult(toTest: CardResult): toTest is WorksheetRootCardResult { return 'worksheet_root' === toTest.type; }\n}\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.WorksheetRootCard\n */\nexport interface WorksheetRootCard extends _AbstractCardContainer {\n    confidenceLevel: number;\n    highlightFilter?: Filter | null;\n    showConfidenceInterval: boolean;\n\n    // PolyJson type\n    type: 'worksheet_root';\n}\n\nexport function isWorksheetRootCard(toTest: Card): toTest is WorksheetRootCard { return 'worksheet_root' === toTest.type; }","import {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {Distribution2D} from './../../compute/distributions/distribution2-d';\nimport {Fit2DDistribution} from './../../compute/computations/bivariate/fit2-ddistribution';\nimport {_BivariateCard} from './bivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.Fit2DDistributionCard\n */\nexport interface Fit2DDistributionCard extends _BivariateCard {\n    distribution: Distribution2D;\n    xResolution: number;\n    yResolution: number;\n\n    // PolyJson type\n    type: 'fit_2d_distribution';\n}\n\nexport function isFit2DDistributionCard(toTest: Card): toTest is Fit2DDistributionCard { return 'fit_2d_distribution' === toTest.type; }\n\nexport namespace Fit2DDistributionCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.Fit2DDistributionCard$Fit2DDistributionCardResult\n     */\n    export interface Fit2DDistributionCardResult extends _CardResult {\n        result: Fit2DDistribution.Fit2DDistributionResult;\n\n        // PolyJson type\n        type: 'fit_2d_distribution';\n    }\n\n    export function isFit2DDistributionCardResult(toTest: CardResult): toTest is Fit2DDistributionCardResult { return 'fit_2d_distribution' === toTest.type; }\n}","import {AbstractNSampTestCard} from './common/abstract-nsamp-test-card';\nimport {CardResult} from './card-result';\nimport {Card} from './card';\nimport {_AbstractPairwiseTestCard} from './common/abstract-pairwise-test-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.PairwiseMoodTestCard\n */\nexport interface PairwiseMoodTestCard extends _AbstractPairwiseTestCard {\n    // PolyJson type\n    type: 'pairwise_mood';\n}\n\nexport function isPairwiseMoodTestCard(toTest: Card): toTest is PairwiseMoodTestCard { return 'pairwise_mood' === toTest.type; }\n\nexport namespace PairwiseMoodTestCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.PairwiseMoodTestCard$PairwiseMoodTestCardResult\n     */\n    export interface PairwiseMoodTestCardResult extends AbstractNSampTestCard._AbstractNSampleTestCardResult {\n        pvalues: number[];\n        statistics: number[];\n\n        // PolyJson type\n        type: 'pairwise_mood';\n    }\n\n    export function isPairwiseMoodTestCardResult(toTest: CardResult): toTest is PairwiseMoodTestCardResult { return 'pairwise_mood' === toTest.type; }\n}","/**\n * Generated from com.dataiku.dip.dataflow.exec.filter.FilterDesc\n */\nexport interface FilterDesc {\n    distinct: boolean;\n    enabled: boolean;\n    expression?: string | null;\n    expressionVariablesContext?: any /* TODO: Missing translation of com.dataiku.dip.variables.VariablesContext */ | null;\n    language?: FilterDesc.ExpressionLanguage | null;\n    uiData?: FilterDesc.FilterUiData | null;\n}\n\nexport namespace FilterDesc {\n    /**\n     * Generated from com.dataiku.dip.dataflow.exec.filter.FilterDesc$FilterUiCondition\n     */\n    export interface FilterUiCondition {\n        col: string;\n        date: string;\n        date2: string;\n        input: string;\n        num: number;\n        operator: string;\n        string: string;\n        subCondition: FilterDesc;\n        time: string;\n        time2: string;\n        unit: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.dataflow.exec.filter.FilterDesc$ExpressionLanguage\n     */\n    export enum ExpressionLanguage {\n        GREL = 'GREL',\n        SQL = 'SQL'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.dataflow.exec.filter.FilterDesc$FilterUiData\n     */\n    export interface FilterUiData {\n        conditions: FilterDesc.FilterUiCondition[];\n        mode: string;\n    }\n}","import {Filter, _Filter} from './filter';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.filtering.IntervalFilter\n */\nexport interface IntervalFilter extends _Filter {\n    closed: IntervalFilter.ClosedMode;\n    column: string;\n    left: number;\n    right: number;\n\n    // PolyJson type\n    type: 'interval';\n}\n\nexport function isIntervalFilter(toTest: Filter): toTest is IntervalFilter { return 'interval' === toTest.type; }\n\nexport namespace IntervalFilter {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.filtering.IntervalFilter$ClosedMode\n     */\n    export enum ClosedMode {\n        LEFT = 'LEFT',\n        RIGHT = 'RIGHT',\n        BOTH = 'BOTH',\n        NEITHER = 'NEITHER'\n    }\n}","import {AbstractCardContainer, _AbstractCardContainer} from './abstract-card-container';\nimport {BivariateHeaderCard} from './../bivariate_header/bivariate-header-card';\nimport {CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {UnivariateHeaderCard} from './../univariate_header/univariate-header-card';\nimport {Variable} from './../../models/variable';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.common.AbstractHeaderCard\n */\nexport interface _AbstractHeaderCard extends _AbstractCardContainer {\n    xColumns: Variable[];\n}\n\nexport type AbstractHeaderCard = BivariateHeaderCard | UnivariateHeaderCard;\n\nexport function isAbstractHeaderCard(toTest: Card): toTest is AbstractHeaderCard { return [\"bivariate_header\" , \"univariate_header\"].includes(toTest.type); }\n\nexport namespace AbstractHeaderCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.AbstractHeaderCard$AbstractHeaderCardResult\n     */\n    export interface _AbstractHeaderCardResult extends AbstractCardContainer._AbstractCardContainerResult {}\n\n    export type AbstractHeaderCardResult = UnivariateHeaderCard.UnivariateHeaderCardResult | BivariateHeaderCard.BivariateHeaderCardResult;\n\n    export function isAbstractHeaderCardResult(toTest: CardResult): toTest is AbstractHeaderCardResult { return [\"univariate_header\" , \"bivariate_header\"].includes(toTest.type); }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Min\n */\nexport interface Min extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'min';\n}\n\nexport function isMin(toTest: Computation): toTest is Min { return 'min' === toTest.type; }\n\nexport namespace Min {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Min$MinResult\n     */\n    export interface MinResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'min';\n    }\n\n    export function isMinResult(toTest: ComputationResult): toTest is MinResult { return 'min' === toTest.type; }\n}","import {Filter} from './../filtering/filter';\nimport {Grouping, _Grouping} from './grouping';\nimport {GroupingResult, _GroupingResult} from './grouping-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.grouping.SubsetGrouping\n */\nexport interface SubsetGrouping extends _Grouping {\n    filter: Filter;\n\n    // PolyJson type\n    type: 'subset';\n}\n\nexport function isSubsetGrouping(toTest: Grouping): toTest is SubsetGrouping { return 'subset' === toTest.type; }\n\nexport namespace SubsetGrouping {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.grouping.SubsetGrouping$SubsetGroupingResult\n     */\n    export interface SubsetGroupingResult extends _GroupingResult {\n        filter: Filter;\n\n        // PolyJson type\n        type: 'subset';\n    }\n\n    export function isSubsetGroupingResult(toTest: GroupingResult): toTest is SubsetGroupingResult { return 'subset' === toTest.type; }\n}","import {Beta} from './beta';\nimport {Binomial} from './binomial';\nimport {Exponential} from './exponential';\nimport {Laplace} from './laplace';\nimport {LogNormal} from './log-normal';\nimport {NormalMixture} from './normal-mixture';\nimport {Normal} from './normal';\nimport {Pareto} from './pareto';\nimport {Poisson} from './poisson';\nimport {Triangular} from './triangular';\nimport {Weibull} from './weibull';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Distribution\n */\nexport interface _Distribution {}\n\nexport type Distribution = Beta | NormalMixture | Poisson | Normal | Weibull | Binomial | LogNormal | Laplace | Triangular | Pareto | Exponential;\n\nexport namespace Distribution {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Distribution$FittedDistribution\n     */\n    export interface _FittedDistribution {}\n\n    export type FittedDistribution = Pareto.FittedPareto | Beta.FittedBeta | Exponential.FittedExponential | Binomial.FittedBinomial | Weibull.FittedWeibull | LogNormal.FittedLogNormal | Laplace.FittedLaplace | Poisson.FittedPoisson | NormalMixture.FittedNormalMixture | Triangular.FittedTriangular | Normal.FittedNormal;\n\n    export function isFittedDistribution(toTest: Distribution.FittedDistribution): toTest is FittedDistribution { return [\"pareto\" , \"beta\" , \"exponential\" , \"binomial\" , \"weibull\" , \"lognormal\" , \"laplace\" , \"poisson\" , \"normal_mixture\" , \"triangular\" , \"normal\"].includes(toTest.type); }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Covariance\n */\nexport interface Covariance extends Computation._BivariateComputation {\n    // PolyJson type\n    type: 'covariance';\n}\n\nexport function isCovariance(toTest: Computation): toTest is Covariance { return 'covariance' === toTest.type; }\n\nexport namespace Covariance {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Covariance$CovarianceResult\n     */\n    export interface CovarianceResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'covariance';\n    }\n\n    export function isCovarianceResult(toTest: ComputationResult): toTest is CovarianceResult { return 'covariance' === toTest.type; }\n}","import {BoxPlotFragment} from './fragments/box-plot-fragment';\nimport {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {NumericalHistogramFragment} from './fragments/numerical-histogram-fragment';\nimport {TestDistribution} from './../../compute/computations/univariate/test-distribution';\nimport {_UnivariateCard} from './univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.ShapiroNormalityTestCard\n */\nexport interface ShapiroNormalityTestCard extends _UnivariateCard {\n    confidenceLevel: number;\n\n    // PolyJson type\n    type: 'shapiro';\n}\n\nexport function isShapiroNormalityTestCard(toTest: Card): toTest is ShapiroNormalityTestCard { return 'shapiro' === toTest.type; }\n\nexport namespace ShapiroNormalityTestCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.ShapiroNormalityTestCard$ShapiroNormalityTestCardResult\n     */\n    export interface ShapiroNormalityTestCardResult extends _CardResult {\n        boxPlot: BoxPlotFragment;\n        histogram: NumericalHistogramFragment;\n        normalPdf: TestDistribution.ProbabilityDensityFunction;\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'shapiro';\n    }\n\n    export function isShapiroNormalityTestCardResult(toTest: CardResult): toTest is ShapiroNormalityTestCardResult { return 'shapiro' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Filter} from './../../filtering/filter';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.KsTest2Samp\n */\nexport interface KsTest2Samp extends Computation._UnivariateComputation {\n    filter1: Filter;\n    filter2: Filter;\n\n    // PolyJson type\n    type: 'ks_test_2samp';\n}\n\nexport function isKsTest2Samp(toTest: Computation): toTest is KsTest2Samp { return 'ks_test_2samp' === toTest.type; }\n\nexport namespace KsTest2Samp {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.KsTest2Samp$KsTest2SampResult\n     */\n    export interface KsTest2SampResult extends _AvailableResult {\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'ks_test_2samp';\n    }\n\n    export function isKsTest2SampResult(toTest: ComputationResult): toTest is KsTest2SampResult { return 'ks_test_2samp' === toTest.type; }\n}","import {AbstractNSampTestCard} from './common/abstract-nsamp-test-card';\nimport {CardResult} from './card-result';\nimport {Card} from './card';\nimport {_AbstractPairwiseTestCard} from './common/abstract-pairwise-test-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.PairwiseTTestCard\n */\nexport interface PairwiseTTestCard extends _AbstractPairwiseTestCard {\n    // PolyJson type\n    type: 'pairwise_ttest';\n}\n\nexport function isPairwiseTTestCard(toTest: Card): toTest is PairwiseTTestCard { return 'pairwise_ttest' === toTest.type; }\n\nexport namespace PairwiseTTestCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.PairwiseTTestCard$PairwiseTTestCardResult\n     */\n    export interface PairwiseTTestCardResult extends AbstractNSampTestCard._AbstractNSampleTestCardResult {\n        pvalues: number[];\n        statistics: number[];\n\n        // PolyJson type\n        type: 'pairwise_ttest';\n    }\n\n    export function isPairwiseTTestCardResult(toTest: CardResult): toTest is PairwiseTTestCardResult { return 'pairwise_ttest' === toTest.type; }\n}","import {JointNormal} from './joint-normal';\nimport {KDE2D} from './kde2-d';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Distribution2D\n */\nexport interface _Distribution2D {}\n\nexport type Distribution2D = KDE2D | JointNormal;\n\nexport namespace Distribution2D {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Distribution2D$FittedDistribution2D\n     */\n    export interface _FittedDistribution2D {}\n\n    export type FittedDistribution2D = JointNormal.FittedJointNormal | KDE2D.FittedKDE2D;\n\n    export function isFittedDistribution2D(toTest: Distribution2D.FittedDistribution2D): toTest is FittedDistribution2D { return [\"joint_normal\" , \"kde_2d\"].includes(toTest.type); }\n}","import {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {Filter} from './../../compute/filtering/filter';\nimport {HeatmapParams} from './common/heatmap-params';\nimport {SplitBySpec} from './../models/split-by-spec';\nimport {_MultivariateCard} from './multivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.PCACard\n */\nexport interface PCACard extends _MultivariateCard {\n    groupBy?: SplitBySpec | null;\n    heatmapParams: HeatmapParams;\n\n    // PolyJson type\n    type: 'pca';\n}\n\nexport function isPCACard(toTest: Card): toTest is PCACard { return 'pca' === toTest.type; }\n\nexport namespace PCACard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.PCACard$PCACardResult\n     */\n    export interface PCACardResult extends _CardResult {\n        components: number[][];\n        explainedVariance: number[];\n        explainedVarianceRatio: number[];\n        groups: Filter[];\n        partialErrors?: string[] | null;\n        projections: number[][][];\n\n        // PolyJson type\n        type: 'pca';\n    }\n\n    export function isPCACardResult(toTest: CardResult): toTest is PCACardResult { return 'pca' === toTest.type; }\n}","/**\n * Generated from com.dataiku.dip.containers.exec.ContainerExecSelection\n */\nexport interface ContainerExecSelection {\n    containerConf?: string | null;\n    containerMode: ContainerExecSelection.ContainerExecMode;\n}\n\nexport namespace ContainerExecSelection {\n    /**\n     * Generated from com.dataiku.dip.containers.exec.ContainerExecSelection$ContainerExecMode\n     */\n    export enum ContainerExecMode {\n        INHERIT = 'INHERIT',\n        EXPLICIT_CONTAINER = 'EXPLICIT_CONTAINER',\n        NONE = 'NONE'\n    }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.TTest1Samp\n */\nexport interface TTest1Samp extends Computation._UnivariateComputation {\n    hypothesizedMean: number;\n\n    // PolyJson type\n    type: 'ttest_1samp';\n}\n\nexport function isTTest1Samp(toTest: Computation): toTest is TTest1Samp { return 'ttest_1samp' === toTest.type; }\n\nexport namespace TTest1Samp {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TTest1Samp$TTest1SampResult\n     */\n    export interface TTest1SampResult extends _AvailableResult {\n        dof: number;\n        pvalue: number;\n        pvalueAltGt: number;\n        pvalueAltLt: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'ttest_1samp';\n    }\n\n    export function isTTest1SampResult(toTest: ComputationResult): toTest is TTest1SampResult { return 'ttest_1samp' === toTest.type; }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Filter} from './../../../compute/filtering/filter';\n\nexport namespace GroupedCompiledCardWrapper {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.GroupedCompiledCardWrapper$GroupedCardResult\n     */\n    export interface GroupedCardResult extends _CardResult {\n        groups: Filter[];\n        results: CardResult[];\n\n        // PolyJson type\n        type: 'groups';\n    }\n\n    export function isGroupedCardResult(toTest: CardResult): toTest is GroupedCardResult { return 'groups' === toTest.type; }\n}","/**\n * Generated from com.dataiku.dip.datasets.SamplingParam\n */\nexport interface SamplingParam {\n    column?: string | null;\n    maxReadUncompressedBytes: number;\n    maxRecords: number;\n    samplingMethod: SamplingParam.SamplingMethod;\n    targetRatio: number;\n    withinFirstN: number;\n}\n\nexport namespace SamplingParam {\n    /**\n     * Generated from com.dataiku.dip.datasets.SamplingParam$SamplingMethod\n     */\n    export enum SamplingMethod {\n        FULL = 'FULL',\n        HEAD_SEQUENTIAL = 'HEAD_SEQUENTIAL',\n        TAIL_SEQUENTIAL = 'TAIL_SEQUENTIAL',\n        RANDOM_FIXED_NB = 'RANDOM_FIXED_NB',\n        RANDOM_FIXED_RATIO = 'RANDOM_FIXED_RATIO',\n        COLUMN_BASED = 'COLUMN_BASED',\n        STRATIFIED_TARGET_NB_EXACT = 'STRATIFIED_TARGET_NB_EXACT',\n        STRATIFIED_TARGET_RATIO_EXACT = 'STRATIFIED_TARGET_RATIO_EXACT',\n        CLASS_REBALANCE_TARGET_NB_APPROX = 'CLASS_REBALANCE_TARGET_NB_APPROX',\n        CLASS_REBALANCE_TARGET_RATIO_APPROX = 'CLASS_REBALANCE_TARGET_RATIO_APPROX',\n        RANDOM_FIXED_NB_EXACT = 'RANDOM_FIXED_NB_EXACT',\n        RANDOM_FIXED_RATIO_EXACT = 'RANDOM_FIXED_RATIO_EXACT'\n    }\n}","import {Computation, _Computation} from './../computation';\nimport {ComputationResult} from './../computation-result';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.common.Count\n */\nexport interface Count extends _Computation {\n    // PolyJson type\n    type: 'count';\n}\n\nexport function isCount(toTest: Computation): toTest is Count { return 'count' === toTest.type; }\n\nexport namespace Count {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.common.Count$CountResult\n     */\n    export interface CountResult extends _AvailableResult {\n        count: number;\n\n        // PolyJson type\n        type: 'count';\n    }\n\n    export function isCountResult(toTest: ComputationResult): toTest is CountResult { return 'count' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {GroupingResult} from './../../grouping/grouping-result';\nimport {Grouping} from './../../grouping/grouping';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.multivariate.PCA\n */\nexport interface PCA extends Computation._MultivariateComputation {\n    projectionDim: number;\n    projectionGrouping: Grouping;\n\n    // PolyJson type\n    type: 'pca';\n}\n\nexport function isPCA(toTest: Computation): toTest is PCA { return 'pca' === toTest.type; }\n\nexport namespace PCA {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.multivariate.PCA$PCAResult\n     */\n    export interface PCAResult extends _AvailableResult {\n        eigenvalues: number[];\n        eigenvectors: number[][];\n        groups: GroupingResult;\n        projections: number[][][];\n\n        // PolyJson type\n        type: 'pca';\n    }\n\n    export function isPCAResult(toTest: ComputationResult): toTest is PCAResult { return 'pca' === toTest.type; }\n}","import {BivariateHistogramCard} from './../bivariate_header/bivariate-histogram-card';\nimport {BoxPlotFragment} from './../fragments/box-plot-fragment';\nimport {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Filter} from './../../../compute/filtering/filter';\nimport {MoodTestNSampCard} from './../mood-test-nsamp-card';\nimport {OneWayANOVACard} from './../one-way-anovacard';\nimport {PairwiseMoodTestCard} from './../pairwise-mood-test-card';\nimport {PairwiseTTestCard} from './../pairwise-ttest-card';\nimport {_BivariateCard} from './../bivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.common.AbstractNSampTestCard\n */\nexport interface _AbstractNSampTestCard extends _BivariateCard {\n    confidenceLevel: number;\n    maxGroups: number;\n    yValues?: string[] | null;\n}\n\nexport type AbstractNSampTestCard = MoodTestNSampCard | OneWayANOVACard | PairwiseTTestCard | PairwiseMoodTestCard;\n\nexport function isAbstractNSampTestCard(toTest: Card): toTest is AbstractNSampTestCard { return [\"mood_nsamp\" , \"oneway_anova\" , \"pairwise_ttest\" , \"pairwise_mood\"].includes(toTest.type); }\n\nexport namespace AbstractNSampTestCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.AbstractNSampTestCard$AbstractNSampleTestCardResult\n     */\n    export interface _AbstractNSampleTestCardResult extends _CardResult {\n        allGroups: AbstractNSampTestCard.GroupInfo;\n        groups: AbstractNSampTestCard.GroupInfo[];\n        histogramData: BivariateHistogramCard.BivariateHistogramData;\n    }\n\n    export type AbstractNSampleTestCardResult = MoodTestNSampCard.MoodTestNSampCardResult | OneWayANOVACard.OneWayANOVACardResult | PairwiseMoodTestCard.PairwiseMoodTestCardResult | PairwiseTTestCard.PairwiseTTestCardResult;\n\n    export function isAbstractNSampleTestCardResult(toTest: CardResult): toTest is AbstractNSampleTestCardResult { return [\"mood_nsamp\" , \"oneway_anova\" , \"pairwise_mood\" , \"pairwise_ttest\"].includes(toTest.type); }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.AbstractNSampTestCard$GroupInfo\n     */\n    export interface GroupInfo {\n        boxPlot: BoxPlotFragment;\n        filter: Filter;\n    }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Exponential\n */\nexport interface Exponential extends _Distribution {\n    // PolyJson type\n    type: 'exponential';\n}\n\nexport function isExponential(toTest: Distribution): toTest is Exponential { return 'exponential' === toTest.type; }\n\nexport namespace Exponential {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Exponential$FittedExponential\n     */\n    export interface FittedExponential extends Distribution._FittedDistribution {\n        rate: number;\n\n        // PolyJson type\n        type: 'exponential';\n    }\n\n    export function isFittedExponential(toTest: Distribution.FittedDistribution): toTest is FittedExponential { return 'exponential' === toTest.type; }\n}","import {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {Distribution} from './../../compute/distributions/distribution';\nimport {NumericalHistogramFragment} from './fragments/numerical-histogram-fragment';\nimport {TestDistribution} from './../../compute/computations/univariate/test-distribution';\nimport {_UnivariateCard} from './univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.FitDistributionCard\n */\nexport interface FitDistributionCard extends _UnivariateCard {\n    confidenceLevel: number;\n    distributions: FitDistributionCard.RequestedDistribution[];\n\n    // PolyJson type\n    type: 'fit_distribution';\n}\n\nexport function isFitDistributionCard(toTest: Card): toTest is FitDistributionCard { return 'fit_distribution' === toTest.type; }\n\nexport namespace FitDistributionCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.FitDistributionCard$RequestedDistribution\n     */\n    export interface RequestedDistribution {\n        distribution: Distribution;\n        fixedParameters?: Distribution.FittedDistribution | null;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.FitDistributionCard$SingleFitResult\n     */\n    export interface SingleFitResult {\n        distribution: Distribution;\n        fit: Distribution.FittedDistribution;\n        plot: TestDistribution.PlotData;\n        test: TestDistribution.StatTests;\n        warnings: string[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.FitDistributionCard$FitDistributionCardResult\n     */\n    export interface FitDistributionCardResult extends _CardResult {\n        distributions: FitDistributionCard.SingleFitResult[];\n        histogram: NumericalHistogramFragment;\n\n        // PolyJson type\n        type: 'fit_distribution';\n    }\n\n    export function isFitDistributionCardResult(toTest: CardResult): toTest is FitDistributionCardResult { return 'fit_distribution' === toTest.type; }\n}","import {Curve, _Curve} from './curve';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.curves.PolynomialCurve\n */\nexport interface PolynomialCurve extends _Curve {\n    degree: number;\n\n    // PolyJson type\n    type: 'polynomial';\n}\n\nexport function isPolynomialCurve(toTest: Curve): toTest is PolynomialCurve { return 'polynomial' === toTest.type; }\n\nexport namespace PolynomialCurve {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.curves.PolynomialCurve$ParametrizedPolynomialCurve\n     */\n    export interface ParametrizedPolynomialCurve extends Curve._ParametrizedCurve {\n        coefs: number[];\n\n        // PolyJson type\n        type: 'polynomial';\n    }\n\n    export function isParametrizedPolynomialCurve(toTest: Curve.ParametrizedCurve): toTest is ParametrizedPolynomialCurve { return 'polynomial' === toTest.type; }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Poisson\n */\nexport interface Poisson extends _Distribution {\n    // PolyJson type\n    type: 'poisson';\n}\n\nexport function isPoisson(toTest: Distribution): toTest is Poisson { return 'poisson' === toTest.type; }\n\nexport namespace Poisson {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Poisson$FittedPoisson\n     */\n    export interface FittedPoisson extends Distribution._FittedDistribution {\n        lambda: number;\n\n        // PolyJson type\n        type: 'poisson';\n    }\n\n    export function isFittedPoisson(toTest: Distribution.FittedDistribution): toTest is FittedPoisson { return 'poisson' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\nexport namespace Spearman {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Spearman$SpearmanResult\n     */\n    export interface SpearmanResult extends _AvailableResult {\n        correlation: number;\n        pvalue: number;\n\n        // PolyJson type\n        type: 'spearman';\n    }\n\n    export function isSpearmanResult(toTest: ComputationResult): toTest is SpearmanResult { return 'spearman' === toTest.type; }\n}\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Spearman\n */\nexport interface Spearman extends Computation._BivariateComputation {\n    // PolyJson type\n    type: 'spearman';\n}\n\nexport function isSpearman(toTest: Computation): toTest is Spearman { return 'spearman' === toTest.type; }","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Sem\n */\nexport interface Sem extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'sem';\n}\n\nexport function isSem(toTest: Computation): toTest is Sem { return 'sem' === toTest.type; }\n\nexport namespace Sem {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Sem$SemResult\n     */\n    export interface SemResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'sem';\n    }\n\n    export function isSemResult(toTest: ComputationResult): toTest is SemResult { return 'sem' === toTest.type; }\n}","import {Distribution2D, _Distribution2D} from './distribution2-d';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.KDE2D\n */\nexport interface KDE2D extends _Distribution2D {\n    x_relative_bandwidth: number;\n    y_relative_bandwidth: number;\n\n    // PolyJson type\n    type: 'kde_2d';\n}\n\nexport function isKDE2D(toTest: Distribution2D): toTest is KDE2D { return 'kde_2d' === toTest.type; }\n\nexport namespace KDE2D {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.KDE2D$FittedKDE2D\n     */\n    export interface FittedKDE2D extends Distribution2D._FittedDistribution2D {\n        // PolyJson type\n        type: 'kde_2d';\n    }\n\n    export function isFittedKDE2D(toTest: Distribution2D.FittedDistribution2D): toTest is FittedKDE2D { return 'kde_2d' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Distribution} from './../../distributions/distribution';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution\n */\nexport interface TestDistribution extends Computation._UnivariateComputation {\n    distribution: Distribution.FittedDistribution;\n\n    // PolyJson type\n    type: 'test_distribution';\n}\n\nexport function isTestDistribution(toTest: Computation): toTest is TestDistribution { return 'test_distribution' === toTest.type; }\n\nexport namespace TestDistribution {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$TestDistributionResult\n     */\n    export interface TestDistributionResult extends _AvailableResult {\n        plot: TestDistribution.PlotData;\n        test: TestDistribution.StatTests;\n\n        // PolyJson type\n        type: 'test_distribution';\n    }\n\n    export function isTestDistributionResult(toTest: ComputationResult): toTest is TestDistributionResult { return 'test_distribution' === toTest.type; }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$ProbabilityMassFunction\n     */\n    export interface ProbabilityMassFunction {\n        probs: number[];\n        xvals: number[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$ProbabilityDensityFunction\n     */\n    export interface ProbabilityDensityFunction {\n        probs: number[];\n        xvals: number[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$LikelihoodTestsResult\n     */\n    export interface LikelihoodTestsResult {\n        aic?: number | null;\n        aicc?: number | null;\n        bic?: number | null;\n        ll?: number | null;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$PlotData\n     */\n    export interface PlotData {\n        pdf?: TestDistribution.ProbabilityDensityFunction | null;\n        pmf?: TestDistribution.ProbabilityMassFunction | null;\n        qq: TestDistribution.QQPlotData;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$KolmogorovSmirnovTestResult\n     */\n    export interface KolmogorovSmirnovTestResult {\n        pvalue: number;\n        statistic: number;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$StatTests\n     */\n    export interface StatTests {\n        ks?: TestDistribution.KolmogorovSmirnovTestResult | null;\n        ll: TestDistribution.LikelihoodTestsResult;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$QQPlotData\n     */\n    export interface QQPlotData {\n        empirical: number[];\n        percentile: number[];\n        theoretical: number[];\n    }\n}","import {Grouping, _Grouping} from './grouping';\nimport {GroupingResult, _GroupingResult} from './grouping-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.grouping.UnionGrouping\n */\nexport interface UnionGrouping extends _Grouping {\n    groupings: Grouping[];\n\n    // PolyJson type\n    type: 'union';\n}\n\nexport function isUnionGrouping(toTest: Grouping): toTest is UnionGrouping { return 'union' === toTest.type; }\n\nexport namespace UnionGrouping {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.grouping.UnionGrouping$UnionGroupingResult\n     */\n    export interface UnionGroupingResult extends _GroupingResult {\n        groupings: GroupingResult[];\n\n        // PolyJson type\n        type: 'union';\n    }\n\n    export function isUnionGroupingResult(toTest: GroupingResult): toTest is UnionGroupingResult { return 'union' === toTest.type; }\n}","import {AbstractHeaderCard, _AbstractHeaderCard} from './../common/abstract-header-card';\nimport {CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Variable} from './../../models/variable';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHeaderCard\n */\nexport interface BivariateHeaderCard extends _AbstractHeaderCard {\n    showBoxPlot: boolean;\n    showFrequencyTable: boolean;\n    showHistogram: boolean;\n    showMosaicPlot: boolean;\n    showScatterPlot: boolean;\n    showSummary: boolean;\n    yColumn: Variable;\n\n    // PolyJson type\n    type: 'bivariate_header';\n}\n\nexport function isBivariateHeaderCard(toTest: Card): toTest is BivariateHeaderCard { return 'bivariate_header' === toTest.type; }\n\nexport namespace BivariateHeaderCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHeaderCard$BivariateHeaderCardResult\n     */\n    export interface BivariateHeaderCardResult extends AbstractHeaderCard._AbstractHeaderCardResult {\n        // PolyJson type\n        type: 'bivariate_header';\n    }\n\n    export function isBivariateHeaderCardResult(toTest: CardResult): toTest is BivariateHeaderCardResult { return 'bivariate_header' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Skewness\n */\nexport interface Skewness extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'skewness';\n}\n\nexport function isSkewness(toTest: Computation): toTest is Skewness { return 'skewness' === toTest.type; }\n\nexport namespace Skewness {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Skewness$SkewnessResult\n     */\n    export interface SkewnessResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'skewness';\n    }\n\n    export function isSkewnessResult(toTest: ComputationResult): toTest is SkewnessResult { return 'skewness' === toTest.type; }\n}","import {Chi2IndTest} from './bivariate/chi2-ind-test';\nimport {CountGroups} from './common/count-groups';\nimport {Count} from './common/count';\nimport {Covariance} from './bivariate/covariance';\nimport {DummyComputation} from './common/dummy-computation';\nimport {EmpiricalCDF} from './univariate/empirical-cdf';\nimport {FetchValues} from './multivariate/fetch-values';\nimport {Fit2DDistribution} from './bivariate/fit2-ddistribution';\nimport {FitCurve} from './bivariate/fit-curve';\nimport {FitDistribution} from './univariate/fit-distribution';\nimport {GroupedComputation} from './common/grouped-computation';\nimport {KendallTau} from './bivariate/kendall-tau';\nimport {KsTest2Samp} from './univariate/ks-test2-samp';\nimport {Kurtosis} from './univariate/kurtosis';\nimport {Max} from './univariate/max';\nimport {Mean} from './univariate/mean';\nimport {Min} from './univariate/min';\nimport {MoodTestNSamp} from './univariate/mood-test-nsamp';\nimport {MultiComputation} from './common/multi-computation';\nimport {MutualInformation} from './bivariate/mutual-information';\nimport {OneWayAnova} from './univariate/one-way-anova';\nimport {PCA} from './multivariate/pca';\nimport {PairwiseMoodTest} from './univariate/pairwise-mood-test';\nimport {PairwiseTTest} from './univariate/pairwise-ttest';\nimport {Pearson} from './bivariate/pearson';\nimport {Quantiles} from './univariate/quantiles';\nimport {Sem} from './univariate/sem';\nimport {Shapiro} from './univariate/shapiro';\nimport {SignTest1Samp} from './univariate/sign-test1-samp';\nimport {Skewness} from './univariate/skewness';\nimport {Spearman} from './bivariate/spearman';\nimport {StdDev} from './univariate/std-dev';\nimport {Sum} from './univariate/sum';\nimport {TTest1Samp} from './univariate/ttest1-samp';\nimport {TestDistribution} from './univariate/test-distribution';\nimport {Variance} from './univariate/variance';\nimport {ZTest1Samp} from './univariate/ztest1-samp';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.Computation\n */\nexport interface _Computation {}\n\nexport type Computation = CountGroups | Quantiles | Chi2IndTest | EmpiricalCDF | Kurtosis | Spearman | Covariance | FetchValues | Min | PairwiseMoodTest | KsTest2Samp | PCA | Fit2DDistribution | TTest1Samp | Pearson | Sem | DummyComputation | MoodTestNSamp | FitDistribution | Mean | Skewness | TestDistribution | Sum | KendallTau | GroupedComputation | Shapiro | Count | StdDev | MultiComputation | PairwiseTTest | Max | SignTest1Samp | Variance | FitCurve | ZTest1Samp | OneWayAnova | MutualInformation;\n\nexport namespace Computation {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.Computation$UnivariateComputation\n     */\n    export interface _UnivariateComputation extends _Computation {\n        column: string;\n    }\n\n    export type UnivariateComputation = Sem | Quantiles | EmpiricalCDF | MoodTestNSamp | Kurtosis | Min | PairwiseMoodTest | FitDistribution | Mean | Sum | Skewness | TestDistribution | KsTest2Samp | Shapiro | StdDev | PairwiseTTest | Max | SignTest1Samp | Variance | ZTest1Samp | OneWayAnova | TTest1Samp;\n\n    export function isUnivariateComputation(toTest: Computation): toTest is UnivariateComputation { return [\"sem\" , \"quantiles\" , \"empirical_cdf\" , \"mood_test_nsamp\" , \"kurtosis\" , \"min\" , \"pairwise_mood_test\" , \"fit_distribution\" , \"mean\" , \"sum\" , \"skewness\" , \"test_distribution\" , \"ks_test_2samp\" , \"shapiro\" , \"std_dev\" , \"pairwise_ttest\" , \"max\" , \"sign_test_1samp\" , \"variance\" , \"ztest_1samp\" , \"one_way_anova\" , \"ttest_1samp\"].includes(toTest.type); }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.Computation$BivariateComputation\n     */\n    export interface _BivariateComputation extends _Computation {\n        xColumn: string;\n        yColumn: string;\n    }\n\n    export type BivariateComputation = Pearson | KendallTau | Fit2DDistribution | Spearman | Covariance | FitCurve | MutualInformation;\n\n    export function isBivariateComputation(toTest: Computation): toTest is BivariateComputation { return [\"pearson\" , \"kendall_tau\" , \"fit_2d_distribution\" , \"spearman\" , \"covariance\" , \"fit_curve\" , \"mutual_information\"].includes(toTest.type); }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.Computation$MultivariateComputation\n     */\n    export interface _MultivariateComputation extends _Computation {\n        columns: string[];\n    }\n\n    export type MultivariateComputation = PCA | FetchValues;\n\n    export function isMultivariateComputation(toTest: Computation): toTest is MultivariateComputation { return [\"pca\" , \"fetch_values\"].includes(toTest.type); }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Weibull\n */\nexport interface Weibull extends _Distribution {\n    // PolyJson type\n    type: 'weibull';\n}\n\nexport function isWeibull(toTest: Distribution): toTest is Weibull { return 'weibull' === toTest.type; }\n\nexport namespace Weibull {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Weibull$FittedWeibull\n     */\n    export interface FittedWeibull extends Distribution._FittedDistribution {\n        scale: number;\n        shape: number;\n\n        // PolyJson type\n        type: 'weibull';\n    }\n\n    export function isFittedWeibull(toTest: Distribution.FittedDistribution): toTest is FittedWeibull { return 'weibull' === toTest.type; }\n}","export namespace ITaggingService {\n    /**\n     * Generated from com.dataiku.dip.server.services.ITaggingService$TaggableType\n     */\n    export enum TaggableType {\n        PROJECT = 'PROJECT',\n        FLOW_ZONE = 'FLOW_ZONE',\n        DATASET = 'DATASET',\n        RECIPE = 'RECIPE',\n        SQL_NOTEBOOK = 'SQL_NOTEBOOK',\n        JUPYTER_NOTEBOOK = 'JUPYTER_NOTEBOOK',\n        ANALYSIS = 'ANALYSIS',\n        SAVED_MODEL = 'SAVED_MODEL',\n        MODEL_EVALUATION_STORE = 'MODEL_EVALUATION_STORE',\n        INSIGHT = 'INSIGHT',\n        MANAGED_FOLDER = 'MANAGED_FOLDER',\n        LAMBDA_SERVICE = 'LAMBDA_SERVICE',\n        SCENARIO = 'SCENARIO',\n        DASHBOARD = 'DASHBOARD',\n        WEB_APP = 'WEB_APP',\n        REPORT = 'REPORT',\n        STREAMING_ENDPOINT = 'STREAMING_ENDPOINT',\n        ARTICLE = 'ARTICLE',\n        STATISTICS_WORKSHEET = 'STATISTICS_WORKSHEET',\n        API_DEPLOYER_INFRA = 'API_DEPLOYER_INFRA',\n        API_DEPLOYER_SERVICE = 'API_DEPLOYER_SERVICE',\n        API_DEPLOYER_DEPLOYMENT = 'API_DEPLOYER_DEPLOYMENT',\n        PROJECT_DEPLOYER_INFRA = 'PROJECT_DEPLOYER_INFRA',\n        PROJECT_DEPLOYER_PROJECT = 'PROJECT_DEPLOYER_PROJECT',\n        PROJECT_DEPLOYER_DEPLOYMENT = 'PROJECT_DEPLOYER_DEPLOYMENT'\n    }\n}","import {AbstractNSampTestCard, _AbstractNSampTestCard} from './common/abstract-nsamp-test-card';\nimport {CardResult} from './card-result';\nimport {Card} from './card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.OneWayANOVACard\n */\nexport interface OneWayANOVACard extends _AbstractNSampTestCard {\n    // PolyJson type\n    type: 'oneway_anova';\n}\n\nexport function isOneWayANOVACard(toTest: Card): toTest is OneWayANOVACard { return 'oneway_anova' === toTest.type; }\n\nexport namespace OneWayANOVACard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.OneWayANOVACard$OneWayANOVACardResult\n     */\n    export interface OneWayANOVACardResult extends AbstractNSampTestCard._AbstractNSampleTestCardResult {\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'oneway_anova';\n    }\n\n    export function isOneWayANOVACardResult(toTest: CardResult): toTest is OneWayANOVACardResult { return 'oneway_anova' === toTest.type; }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {CategoricalHistogramCard} from './categorical-histogram-card';\nimport {_UnivariateCard} from './../univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateFrequencyTableCard\n */\nexport interface UnivariateFrequencyTableCard extends _UnivariateCard {\n    maxValues: number;\n\n    // PolyJson type\n    type: 'univariate_frequency_table';\n}\n\nexport function isUnivariateFrequencyTableCard(toTest: Card): toTest is UnivariateFrequencyTableCard { return 'univariate_frequency_table' === toTest.type; }\n\nexport namespace UnivariateFrequencyTableCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateFrequencyTableCard$UnivariateFrequencyTableCardResult\n     */\n    export interface UnivariateFrequencyTableCardResult extends _CardResult {\n        distinctCount: number;\n        frequencies: CategoricalHistogramCard.HistogramData;\n\n        // PolyJson type\n        type: 'univariate_frequency_table';\n    }\n\n    export function isUnivariateFrequencyTableCardResult(toTest: CardResult): toTest is UnivariateFrequencyTableCardResult { return 'univariate_frequency_table' === toTest.type; }\n}","import {Grouping, _Grouping} from './grouping';\nimport {GroupingResult, _GroupingResult} from './grouping-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.grouping.BinnedGrouping\n */\nexport interface BinnedGrouping extends _Grouping {\n    binSize?: number | null;\n    column: string;\n    keepNA: boolean;\n    mode: BinnedGrouping.BinningMode;\n    nbBins?: number | null;\n\n    // PolyJson type\n    type: 'binned';\n}\n\nexport function isBinnedGrouping(toTest: Grouping): toTest is BinnedGrouping { return 'binned' === toTest.type; }\n\nexport namespace BinnedGrouping {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.grouping.BinnedGrouping$BinningMode\n     */\n    export enum BinningMode {\n        AUTO = 'AUTO',\n        FIXED_NB = 'FIXED_NB',\n        FIXED_SIZE = 'FIXED_SIZE'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.grouping.BinnedGrouping$BinnedGroupingResult\n     */\n    export interface BinnedGroupingResult extends _GroupingResult {\n        column: string;\n        edges: number[];\n        hasNa: boolean;\n\n        // PolyJson type\n        type: 'binned';\n    }\n\n    export function isBinnedGroupingResult(toTest: GroupingResult): toTest is BinnedGroupingResult { return 'binned' === toTest.type; }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Beta\n */\nexport interface Beta extends _Distribution {\n    // PolyJson type\n    type: 'beta';\n}\n\nexport function isBeta(toTest: Distribution): toTest is Beta { return 'beta' === toTest.type; }\n\nexport namespace Beta {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Beta$FittedBeta\n     */\n    export interface FittedBeta extends Distribution._FittedDistribution {\n        alpha: number;\n        beta: number;\n        lower: number;\n        upper: number;\n\n        // PolyJson type\n        type: 'beta';\n    }\n\n    export function isFittedBeta(toTest: Distribution.FittedDistribution): toTest is FittedBeta { return 'beta' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Sum\n */\nexport interface Sum extends Computation._UnivariateComputation {\n    confidence?: number | null;\n\n    // PolyJson type\n    type: 'sum';\n}\n\nexport function isSum(toTest: Computation): toTest is Sum { return 'sum' === toTest.type; }\n\nexport namespace Sum {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Sum$SumResult\n     */\n    export interface SumResult extends _AvailableResult {\n        lower?: number | null;\n        upper?: number | null;\n        value: number;\n\n        // PolyJson type\n        type: 'sum';\n    }\n\n    export function isSumResult(toTest: ComputationResult): toTest is SumResult { return 'sum' === toTest.type; }\n}","import {Computation, _Computation} from './../computation';\nimport {ComputationResult} from './../computation-result';\nimport {Grouping} from './../../grouping/grouping';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.common.CountGroups\n */\nexport interface CountGroups extends _Computation {\n    grouping: Grouping;\n\n    // PolyJson type\n    type: 'count_groups';\n}\n\nexport function isCountGroups(toTest: Computation): toTest is CountGroups { return 'count_groups' === toTest.type; }\n\nexport namespace CountGroups {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.common.CountGroups$CountGroupsResult\n     */\n    export interface CountGroupsResult extends _AvailableResult {\n        count: number;\n\n        // PolyJson type\n        type: 'count_groups';\n    }\n\n    export function isCountGroupsResult(toTest: ComputationResult): toTest is CountGroupsResult { return 'count_groups' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Max\n */\nexport interface Max extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'max';\n}\n\nexport function isMax(toTest: Computation): toTest is Max { return 'max' === toTest.type; }\n\nexport namespace Max {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Max$MaxResult\n     */\n    export interface MaxResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'max';\n    }\n\n    export function isMaxResult(toTest: ComputationResult): toTest is MaxResult { return 'max' === toTest.type; }\n}","import {Computation, _Computation} from './../computation';\nimport {ComputationResult} from './../computation-result';\nimport {GroupingResult} from './../../grouping/grouping-result';\nimport {Grouping} from './../../grouping/grouping';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.common.GroupedComputation\n */\nexport interface GroupedComputation extends _Computation {\n    computation: Computation;\n    grouping: Grouping;\n\n    // PolyJson type\n    type: 'grouped';\n}\n\nexport function isGroupedComputation(toTest: Computation): toTest is GroupedComputation { return 'grouped' === toTest.type; }\n\nexport namespace GroupedComputation {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.common.GroupedComputation$GroupedComputationResult\n     */\n    export interface GroupedComputationResult extends _AvailableResult {\n        groups: GroupingResult;\n        results: ComputationResult[];\n\n        // PolyJson type\n        type: 'grouped';\n    }\n\n    export function isGroupedComputationResult(toTest: ComputationResult): toTest is GroupedComputationResult { return 'grouped' === toTest.type; }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Laplace\n */\nexport interface Laplace extends _Distribution {\n    // PolyJson type\n    type: 'laplace';\n}\n\nexport function isLaplace(toTest: Distribution): toTest is Laplace { return 'laplace' === toTest.type; }\n\nexport namespace Laplace {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Laplace$FittedLaplace\n     */\n    export interface FittedLaplace extends Distribution._FittedDistribution {\n        b: number;\n        mu: number;\n\n        // PolyJson type\n        type: 'laplace';\n    }\n\n    export function isFittedLaplace(toTest: Distribution.FittedDistribution): toTest is FittedLaplace { return 'laplace' === toTest.type; }\n}","import {AbstractNSampTestCard, _AbstractNSampTestCard} from './common/abstract-nsamp-test-card';\nimport {CardResult} from './card-result';\nimport {Card} from './card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.MoodTestNSampCard\n */\nexport interface MoodTestNSampCard extends _AbstractNSampTestCard {\n    // PolyJson type\n    type: 'mood_nsamp';\n}\n\nexport function isMoodTestNSampCard(toTest: Card): toTest is MoodTestNSampCard { return 'mood_nsamp' === toTest.type; }\n\nexport namespace MoodTestNSampCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.MoodTestNSampCard$MoodTestNSampCardResult\n     */\n    export interface MoodTestNSampCardResult extends AbstractNSampTestCard._AbstractNSampleTestCardResult {\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'mood_nsamp';\n    }\n\n    export function isMoodTestNSampCardResult(toTest: CardResult): toTest is MoodTestNSampCardResult { return 'mood_nsamp' === toTest.type; }\n}","import {BoxPlotFragment} from './fragments/box-plot-fragment';\nimport {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {_UnivariateCard} from './univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.SignTest1SampCard\n */\nexport interface SignTest1SampCard extends _UnivariateCard {\n    confidenceLevel: number;\n    hypothesizedMedian: number;\n\n    // PolyJson type\n    type: 'sign_test_1samp';\n}\n\nexport function isSignTest1SampCard(toTest: Card): toTest is SignTest1SampCard { return 'sign_test_1samp' === toTest.type; }\n\nexport namespace SignTest1SampCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.SignTest1SampCard$SignTest1SampCardResult\n     */\n    export interface SignTest1SampCardResult extends _CardResult {\n        boxPlot: BoxPlotFragment;\n        nbLarger: number;\n        nbSmaller: number;\n        pvalue: number;\n\n        // PolyJson type\n        type: 'sign_test_1samp';\n    }\n\n    export function isSignTest1SampCardResult(toTest: CardResult): toTest is SignTest1SampCardResult { return 'sign_test_1samp' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.bivariate.MutualInformation\n */\nexport interface MutualInformation extends Computation._BivariateComputation {\n    // PolyJson type\n    type: 'mutual_information';\n}\n\nexport function isMutualInformation(toTest: Computation): toTest is MutualInformation { return 'mutual_information' === toTest.type; }\n\nexport namespace MutualInformation {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.MutualInformation$MutualInformationResult\n     */\n    export interface MutualInformationResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'mutual_information';\n    }\n\n    export function isMutualInformationResult(toTest: ComputationResult): toTest is MutualInformationResult { return 'mutual_information' === toTest.type; }\n}","import {Distribution2D, _Distribution2D} from './distribution2-d';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.JointNormal\n */\nexport interface JointNormal extends _Distribution2D {\n    // PolyJson type\n    type: 'joint_normal';\n}\n\nexport function isJointNormal(toTest: Distribution2D): toTest is JointNormal { return 'joint_normal' === toTest.type; }\n\nexport namespace JointNormal {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.JointNormal$FittedJointNormal\n     */\n    export interface FittedJointNormal extends Distribution2D._FittedDistribution2D {\n        covs: number[][];\n        means: number[];\n\n        // PolyJson type\n        type: 'joint_normal';\n    }\n\n    export function isFittedJointNormal(toTest: Distribution2D.FittedDistribution2D): toTest is FittedJointNormal { return 'joint_normal' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.multivariate.FetchValues\n */\nexport interface FetchValues extends Computation._MultivariateComputation {\n    // PolyJson type\n    type: 'fetch_values';\n}\n\nexport function isFetchValues(toTest: Computation): toTest is FetchValues { return 'fetch_values' === toTest.type; }\n\nexport namespace FetchValues {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.multivariate.FetchValues$FetchValuesResult\n     */\n    export interface FetchValuesResult extends _AvailableResult {\n        series: number[][];\n\n        // PolyJson type\n        type: 'fetch_values';\n    }\n\n    export function isFetchValuesResult(toTest: ComputationResult): toTest is FetchValuesResult { return 'fetch_values' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Grouping} from './../../grouping/grouping';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.OneWayAnova\n */\nexport interface OneWayAnova extends Computation._UnivariateComputation {\n    grouping: Grouping;\n\n    // PolyJson type\n    type: 'one_way_anova';\n}\n\nexport function isOneWayAnova(toTest: Computation): toTest is OneWayAnova { return 'one_way_anova' === toTest.type; }\n\nexport namespace OneWayAnova {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.OneWayAnova$OneWayAnovaResult\n     */\n    export interface OneWayAnovaResult extends _AvailableResult {\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'one_way_anova';\n    }\n\n    export function isOneWayAnovaResult(toTest: ComputationResult): toTest is OneWayAnovaResult { return 'one_way_anova' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Variance\n */\nexport interface Variance extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'variance';\n}\n\nexport function isVariance(toTest: Computation): toTest is Variance { return 'variance' === toTest.type; }\n\nexport namespace Variance {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Variance$VarianceResult\n     */\n    export interface VarianceResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'variance';\n    }\n\n    export function isVarianceResult(toTest: ComputationResult): toTest is VarianceResult { return 'variance' === toTest.type; }\n}","import {_Dimension} from './dimension';\n\n/**\n * Generated from com.dataiku.dip.partitioning.TimeDimension\n */\nexport interface TimeDimension extends _Dimension {\n    mappedPeriod: TimeDimension.Period;\n}\n\nexport namespace TimeDimension {\n    /**\n     * Generated from com.dataiku.dip.partitioning.TimeDimension$Period\n     */\n    export enum Period {\n        YEAR = 'YEAR',\n        MONTH = 'MONTH',\n        DAY = 'DAY',\n        HOUR = 'HOUR'\n    }\n}","import {BivariateBoxPlotCard} from './bivariate_header/bivariate-box-plot-card';\nimport {BivariateFrequencyTableCard} from './bivariate_header/bivariate-frequency-table-card';\nimport {BivariateHeaderCard} from './bivariate_header/bivariate-header-card';\nimport {BivariateHistogramCard} from './bivariate_header/bivariate-histogram-card';\nimport {BivariateSummaryStatsCard} from './bivariate_header/bivariate-summary-stats-card';\nimport {CategoricalHistogramCard} from './univariate_header/categorical-histogram-card';\nimport {Chi2IndTestCard} from './chi2-ind-test-card';\nimport {ColumnCard} from './common/column-card';\nimport {CorrelationMatrixCard} from './correlation-matrix-card';\nimport {EdaErrorCodes} from './../../eda-error-codes';\nimport {Fit2DDistributionCard} from './fit2-ddistribution-card';\nimport {FitCurveCard} from './fit-curve-card';\nimport {FitDistributionCard} from './fit-distribution-card';\nimport {GroupedCompiledCardWrapper} from './common/grouped-compiled-card-wrapper';\nimport {KsTest2SampCard} from './ks-test2-samp-card';\nimport {MoodTest2SampCard} from './mood-test2-samp-card';\nimport {MoodTestNSampCard} from './mood-test-nsamp-card';\nimport {MosaicPlotCard} from './bivariate_header/mosaic-plot-card';\nimport {NumericalHistogramCard} from './univariate_header/numerical-histogram-card';\nimport {OneWayANOVACard} from './one-way-anovacard';\nimport {PCACard} from './pcacard';\nimport {PairwiseMoodTestCard} from './pairwise-mood-test-card';\nimport {PairwiseTTestCard} from './pairwise-ttest-card';\nimport {QuantilesTableCard} from './univariate_header/quantiles-table-card';\nimport {ScatterPlotCard} from './bivariate_header/scatter-plot-card';\nimport {ShapiroNormalityTestCard} from './shapiro-normality-test-card';\nimport {SignTest1SampCard} from './sign-test1-samp-card';\nimport {TTest2SampCard} from './ttest2-samp-card';\nimport {TZTest1SampCard} from './tztest1-samp-card';\nimport {UnivariateFrequencyTableCard} from './univariate_header/univariate-frequency-table-card';\nimport {UnivariateHeaderCard} from './univariate_header/univariate-header-card';\nimport {UnivariateSummaryStatsCard} from './univariate_header/univariate-summary-stats-card';\nimport {WorksheetRootCard} from './worksheet-root-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.CardResult\n */\nexport interface _CardResult {\n    computationCount: number;\n    failedComputationsCount: number;\n    notComputedCount: number;\n    warnings?: string[] | null;\n}\n\nexport type CardResult = CardResult.UnavailableCardResult | MosaicPlotCard.MosaicPlotCardResult | PairwiseMoodTestCard.PairwiseMoodTestCardResult | PairwiseTTestCard.PairwiseTTestCardResult | FitCurveCard.FitCurveCardResult | SignTest1SampCard.SignTest1SampCardResult | BivariateHeaderCard.BivariateHeaderCardResult | BivariateHistogramCard.BivariateHistogramCardResult | CategoricalHistogramCard.CategoricalHistogramCardResult | KsTest2SampCard.KsTest2SampCardResult | OneWayANOVACard.OneWayANOVACardResult | PCACard.PCACardResult | BivariateFrequencyTableCard.BivariateFrequencyTableCardResult | ScatterPlotCard.ScatterPlotCardResult | BivariateSummaryStatsCard.BivariateSummaryStatsCardResult | Fit2DDistributionCard.Fit2DDistributionCardResult | MoodTestNSampCard.MoodTestNSampCardResult | BivariateBoxPlotCard.BivariateBoxPlotCardResult | UnivariateSummaryStatsCard.UnivariateSummaryStatsCardResult | CorrelationMatrixCard.CorrelationMatrixCardResult | Chi2IndTestCard.Chi2IndTestCardResult | TZTest1SampCard.TZTest1SampCardResult | ShapiroNormalityTestCard.ShapiroNormalityTestCardResult | GroupedCompiledCardWrapper.GroupedCardResult | ColumnCard.ColumnCardResult | FitDistributionCard.FitDistributionCardResult | UnivariateHeaderCard.UnivariateHeaderCardResult | MoodTest2SampCard.MoodTest2SampCardResult | TTest2SampCard.TTest2SampCardResult | QuantilesTableCard.QuantilesTableCardResult | NumericalHistogramCard.NumericalHistogramCardResult | UnivariateFrequencyTableCard.UnivariateFrequencyTableCardResult | WorksheetRootCard.WorksheetRootCardResult;\n\nexport namespace CardResult {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.CardResult$UnavailableCardResult\n     */\n    export interface UnavailableCardResult extends _CardResult {\n        code?: EdaErrorCodes | null;\n        message?: string | null;\n        reason: CardResult.UnavailabilityReason;\n\n        // PolyJson type\n        type: 'unavailable';\n    }\n\n    export function isUnavailableCardResult(toTest: CardResult): toTest is UnavailableCardResult { return 'unavailable' === toTest.type; }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.CardResult$UnavailabilityReason\n     */\n    export enum UnavailabilityReason {\n        NOT_COMPUTED = 'NOT_COMPUTED',\n        FAILURE = 'FAILURE'\n    }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Quantiles\n */\nexport interface Quantiles extends Computation._UnivariateComputation {\n    confidence?: number | null;\n    freqs: number[];\n\n    // PolyJson type\n    type: 'quantiles';\n}\n\nexport function isQuantiles(toTest: Computation): toTest is Quantiles { return 'quantiles' === toTest.type; }\n\nexport namespace Quantiles {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Quantiles$QuantileDesc\n     */\n    export interface QuantileDesc {\n        freq: number;\n        lower?: number | null;\n        quantile: number;\n        upper?: number | null;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Quantiles$QuantilesResult\n     */\n    export interface QuantilesResult extends _AvailableResult {\n        quantiles: Quantiles.QuantileDesc[];\n\n        // PolyJson type\n        type: 'quantiles';\n    }\n\n    export function isQuantilesResult(toTest: ComputationResult): toTest is QuantilesResult { return 'quantiles' === toTest.type; }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Binomial\n */\nexport interface Binomial extends _Distribution {\n    n: number;\n\n    // PolyJson type\n    type: 'binomial';\n}\n\nexport function isBinomial(toTest: Distribution): toTest is Binomial { return 'binomial' === toTest.type; }\n\nexport namespace Binomial {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Binomial$FittedBinomial\n     */\n    export interface FittedBinomial extends Distribution._FittedDistribution {\n        n: number;\n        p: number;\n\n        // PolyJson type\n        type: 'binomial';\n    }\n\n    export function isFittedBinomial(toTest: Distribution.FittedDistribution): toTest is FittedBinomial { return 'binomial' === toTest.type; }\n}","import {AppHomepageTile} from './app-homepage-tile';\n\n/**\n * Generated from com.dataiku.dip.coremodel.AppManifest\n */\nexport interface AppManifest {\n    description: string;\n    homepageSections: AppManifest.AppHomepageSection[];\n    id: string;\n    imgColor: string;\n    imgPattern: number;\n    instanceFeatures: AppManifest.AppInstancesFeatures;\n    instantiationPermission: AppManifest.AppInstantiationPermission;\n    label: string;\n    projectExportManifest: AppManifest.AppProjectExportManifest;\n    shortDesc: string;\n    showInitials: boolean;\n    tags: string[];\n    useAppHomepage: boolean;\n    useAsRecipeSettings: AppManifest.AppUseAsRecipeSettings;\n}\n\nexport namespace AppManifest {\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppManifest$AppInstancesFeatures\n     */\n    export interface AppInstancesFeatures {\n        showCodeNavLink: boolean;\n        showFlowNavLink: boolean;\n        showLabNavLink: boolean;\n        showVersionControlFeatures: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppManifest$AppInstantiationPermission\n     */\n    export enum AppInstantiationPermission {\n        EVERYBODY = 'EVERYBODY',\n        USE_APP_MASTER_PERMISSIONS = 'USE_APP_MASTER_PERMISSIONS'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppManifest$AppHomepageSection\n     */\n    export interface AppHomepageSection {\n        sectionText: string;\n        sectionTitle: string;\n        tiles: AppHomepageTile[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppManifest$AppProjectExportManifest\n     */\n    export interface AppProjectExportManifest {\n        exportAllDatasets: boolean;\n        exportAllInputDatasets: boolean;\n        exportAllInputManagedFolders: boolean;\n        exportAnalysisModels: boolean;\n        exportGitRepository: boolean;\n        exportInsightsData: boolean;\n        exportManagedFS: boolean;\n        exportManagedFolders: boolean;\n        exportModelEvaluationStores: boolean;\n        exportSavedModels: boolean;\n        exportUploads: boolean;\n        includedDatasetsData: any /* TODO: Missing translation of com.dataiku.dip.projects.importexport.model.ProjectExportOptions$IncludedDatasetData */[];\n        includedManagedFolders: any /* TODO: Missing translation of com.dataiku.dip.projects.importexport.model.ProjectExportOptions$IncludedManagedFolder */[];\n        includedModelEvaluationStores: any /* TODO: Missing translation of com.dataiku.dip.projects.importexport.model.ProjectExportOptions$IncludedModelEvaluationStore */[];\n        includedSavedModels: any /* TODO: Missing translation of com.dataiku.dip.projects.importexport.model.ProjectExportOptions$IncludedSavedModel */[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppManifest$AppUseAsRecipeSettings\n     */\n    export interface AppUseAsRecipeSettings {\n        category: string;\n        icon: string;\n        inputRoles: AppManifest.AppUseAsRecipeSettings.RoleMapping[];\n        outputRoles: AppManifest.AppUseAsRecipeSettings.RoleMapping[];\n        runScenarioTile: AppHomepageTile.RunScenarioTile;\n        variablesEditionTile: AppHomepageTile.ProjectVariablesTile;\n    }\n}\n\nexport namespace AppManifest.AppUseAsRecipeSettings {\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppManifest$AppUseAsRecipeSettings$RoleMapping\n     */\n    export interface RoleMapping {\n        objectId: string;\n        roleLabel: string;\n        type: any /* TODO: Missing translation of com.dataiku.dip.dataflow.graph.FlowComputable$FCType */;\n    }\n}","import {Curve, _Curve} from './curve';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.curves.IsotonicCurve\n */\nexport interface IsotonicCurve extends _Curve {\n    // PolyJson type\n    type: 'isotonic';\n}\n\nexport function isIsotonicCurve(toTest: Curve): toTest is IsotonicCurve { return 'isotonic' === toTest.type; }\n\nexport namespace IsotonicCurve {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.curves.IsotonicCurve$ParametrizedIsotonicCurve\n     */\n    export interface ParametrizedIsotonicCurve extends Curve._ParametrizedCurve {\n        // PolyJson type\n        type: 'isotonic';\n    }\n\n    export function isParametrizedIsotonicCurve(toTest: Curve.ParametrizedCurve): toTest is ParametrizedIsotonicCurve { return 'isotonic' === toTest.type; }\n}","import {InteractiveQuery, _InteractiveQuery} from './interactive-query';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.queries.ListMostFrequentValues\n */\nexport interface ListMostFrequentValues extends _InteractiveQuery {\n    column: string;\n    maxValues: number;\n\n    // PolyJson type\n    type: 'list_most_frequent_values';\n}\n\nexport function isListMostFrequentValues(toTest: InteractiveQuery): toTest is ListMostFrequentValues { return 'list_most_frequent_values' === toTest.type; }\n\nexport namespace ListMostFrequentValues {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.queries.ListMostFrequentValues$ListMostFrequentValuesResult\n     */\n    export interface ListMostFrequentValuesResult extends InteractiveQuery._InteractiveQueryResult {\n        values: string[];\n\n        // PolyJson type\n        type: 'list_most_frequent_values';\n    }\n\n    export function isListMostFrequentValuesResult(toTest: InteractiveQuery.InteractiveQueryResult): toTest is ListMostFrequentValuesResult { return 'list_most_frequent_values' === toTest.type; }\n}","export namespace DatasetNotebookService {\n    /**\n     * Generated from com.dataiku.dip.server.services.DatasetNotebookService$NotebookType\n     */\n    export enum NotebookType {\n        SQL = 'SQL',\n        JUPYTER = 'JUPYTER'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.server.services.DatasetNotebookService$SimpleNotebook\n     */\n    export interface SimpleNotebook {\n        analyzedDataset: string;\n        associatedRecipe: string;\n        connection: string;\n        creator: string;\n        id: string;\n        language: string;\n        lastModified: number;\n        name: string;\n        projectKey: string;\n        type: DatasetNotebookService.NotebookType;\n    }\n}","import {CompactedArray} from './../../utils/compacted-array';\nimport {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Distribution2D} from './../../distributions/distribution2-d';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Fit2DDistribution\n */\nexport interface Fit2DDistribution extends Computation._BivariateComputation {\n    distribution: Distribution2D;\n    xResolution: number;\n    yResolution: number;\n\n    // PolyJson type\n    type: 'fit_2d_distribution';\n}\n\nexport function isFit2DDistribution(toTest: Computation): toTest is Fit2DDistribution { return 'fit_2d_distribution' === toTest.type; }\n\nexport namespace Fit2DDistribution {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Fit2DDistribution$Fit2DDistributionResult\n     */\n    export interface Fit2DDistributionResult extends _AvailableResult {\n        density: Fit2DDistribution.Density;\n        model: Distribution2D.FittedDistribution2D;\n\n        // PolyJson type\n        type: 'fit_2d_distribution';\n    }\n\n    export function isFit2DDistributionResult(toTest: ComputationResult): toTest is Fit2DDistributionResult { return 'fit_2d_distribution' === toTest.type; }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Fit2DDistribution$Density\n     */\n    export interface Density {\n        data: CompactedArray;\n        xMax: number;\n        xMin: number;\n        yMax: number;\n        yMin: number;\n    }\n}","import {Grouping, _Grouping} from './grouping';\nimport {GroupingResult, _GroupingResult} from './grouping-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.grouping.AnumGrouping\n */\nexport interface AnumGrouping extends _Grouping {\n    column: string;\n    groupOthers: boolean;\n    maxValues?: number | null;\n\n    // PolyJson type\n    type: 'anum';\n}\n\nexport function isAnumGrouping(toTest: Grouping): toTest is AnumGrouping { return 'anum' === toTest.type; }\n\nexport namespace AnumGrouping {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.grouping.AnumGrouping$AnumGroupingResult\n     */\n    export interface AnumGroupingResult extends _GroupingResult {\n        column: string;\n        hasAllValues: boolean;\n        hasOthers: boolean;\n        values: string[];\n\n        // PolyJson type\n        type: 'anum';\n    }\n\n    export function isAnumGroupingResult(toTest: GroupingResult): toTest is AnumGroupingResult { return 'anum' === toTest.type; }\n}","import {Abstract2SampTestCard, _Abstract2SampTestCard} from './common/abstract2-samp-test-card';\nimport {CardResult} from './card-result';\nimport {Card} from './card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.TTest2SampCard\n */\nexport interface TTest2SampCard extends _Abstract2SampTestCard {\n    // PolyJson type\n    type: 'ttest_2samp';\n}\n\nexport function isTTest2SampCard(toTest: Card): toTest is TTest2SampCard { return 'ttest_2samp' === toTest.type; }\n\nexport namespace TTest2SampCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.TTest2SampCard$TTest2SampCardResult\n     */\n    export interface TTest2SampCardResult extends Abstract2SampTestCard._Abstract2SampTestCardResult {\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'ttest_2samp';\n    }\n\n    export function isTTest2SampCardResult(toTest: CardResult): toTest is TTest2SampCardResult { return 'ttest_2samp' === toTest.type; }\n}","/**\n * Generated from com.dataiku.dip.coremodel.AppHomepageTile\n */\nexport interface _AppHomepageTile {\n    help: string;\n    helpTitle: string;\n    prompt: string;\n    type: AppHomepageTile.AppHomepageTileType;\n}\n\nexport type AppHomepageTile = AppHomepageTile.DownloadDashboardTile | AppHomepageTile.RunScenarioTile | AppHomepageTile.EditFolderTile | AppHomepageTile.DownloadReportTile | AppHomepageTile.EditInlineDatasetTile | AppHomepageTile.EditAnyDatasetTile | AppHomepageTile.ManagedFolderSetFileTile | AppHomepageTile.DashboardLinkTile | AppHomepageTile.EditFSDatasetTile | AppHomepageTile.ManagedFolderLinkTile | AppHomepageTile.PropagateSchemaTile | AppHomepageTile.UploadDatasetSetFileTile | AppHomepageTile.EditAnyStreamingEndpointTile | AppHomepageTile.DownloadManagedFolderTile | AppHomepageTile.GuessTrainDeployTile | AppHomepageTile.VariableDisplayTile | AppHomepageTile.DownloadDatasetTile | AppHomepageTile.ProjectVariablesTile | AppHomepageTile.EditSQLDatasetTile;\n\nexport namespace AppHomepageTile {\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditFolderTile\n     */\n    export interface EditFolderTile extends _AppHomepageTile {\n        behavior: AppHomepageTile.EditFolderTileBehavior;\n        folderId: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$DownloadReportTile\n     */\n    export interface DownloadReportTile extends _AppHomepageTile {\n        format: any /* TODO: Missing translation of com.dataiku.dip.reports.Report$ReportOutputFormat */;\n        reportId: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$PropagateSchemaTileBehavior\n     */\n    export enum PropagateSchemaTileBehavior {\n        MANUAL = 'MANUAL',\n        AUTO_NO_BUILD = 'AUTO_NO_BUILD',\n        AUTO_WITH_BUILDS = 'AUTO_WITH_BUILDS'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$DashboardLinkTile\n     */\n    export interface DashboardLinkTile extends _AppHomepageTile {\n        dashboardId: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditAnyDatasetTile\n     */\n    export interface EditAnyDatasetTile extends _AppHomepageTile {\n        datasetName: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$GuessTrainDeployTile\n     */\n    export interface GuessTrainDeployTile extends _AppHomepageTile {\n        modelId: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$AppHomepageTileType\n     */\n    export enum AppHomepageTileType {\n        UPLOAD_DATASET_SET_FILE = 'UPLOAD_DATASET_SET_FILE',\n        INLINE_DATASET_EDIT = 'INLINE_DATASET_EDIT',\n        MANAGED_FOLDER_ADD_FILE = 'MANAGED_FOLDER_ADD_FILE',\n        DATASET_EDIT_SETTINGS = 'DATASET_EDIT_SETTINGS',\n        STREAMING_ENDPOINT_EDIT_SETTINGS = 'STREAMING_ENDPOINT_EDIT_SETTINGS',\n        FILES_BASED_DATASET_BROWSE_AND_PREVIEW = 'FILES_BASED_DATASET_BROWSE_AND_PREVIEW',\n        MANAGED_FOLDER_BROWSE = 'MANAGED_FOLDER_BROWSE',\n        CONNECTION_EXPLORER_TO_REPLACE_THE_SETTINGS_OF_A_DATASET_WITH_A_NEW_TABLE_REFERENCE = 'CONNECTION_EXPLORER_TO_REPLACE_THE_SETTINGS_OF_A_DATASET_WITH_A_NEW_TABLE_REFERENCE',\n        PROJECT_VARIABLES_EDIT = 'PROJECT_VARIABLES_EDIT',\n        PERFORM_SCHEMA_PROPAGATION = 'PERFORM_SCHEMA_PROPAGATION',\n        GUESS_TRAIN_DEPLOY = 'GUESS_TRAIN_DEPLOY',\n        SCENARIO_RUN = 'SCENARIO_RUN',\n        DASHBOARD_LINK = 'DASHBOARD_LINK',\n        DOWNLOAD_DATASET = 'DOWNLOAD_DATASET',\n        DOWNLOAD_RMARKDOWN = 'DOWNLOAD_RMARKDOWN',\n        MANAGED_FOLDER_LINK = 'MANAGED_FOLDER_LINK',\n        DOWNLOAD_MANAGED_FOLDER_FILE = 'DOWNLOAD_MANAGED_FOLDER_FILE',\n        DOWNLOAD_DASHBOARD_EXPORT = 'DOWNLOAD_DASHBOARD_EXPORT',\n        VARIABLE_DISPLAY = 'VARIABLE_DISPLAY'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$DownloadManagedFolderTile\n     */\n    export interface DownloadManagedFolderTile extends _AppHomepageTile {\n        folderId: string;\n        itemPath: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditFSDatasetTile\n     */\n    export interface EditFSDatasetTile extends _AppHomepageTile {\n        behavior: AppHomepageTile.EditFSDatasetTileBehavior;\n        datasetName: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$UploadDatasetSetFileTile\n     */\n    export interface UploadDatasetSetFileTile extends _AppHomepageTile {\n        behavior: AppHomepageTile.UploadDatasetSetFileTileBehavior;\n        datasetName: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$ManagedFolderSetFileTileBehavior\n     */\n    export enum ManagedFolderSetFileTileBehavior {\n        GO_TO_FOLDER = 'GO_TO_FOLDER',\n        INLINE_UPLOAD = 'INLINE_UPLOAD'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$PartitionDef\n     */\n    export interface PartitionDef {\n        from: string;\n        to: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$ManagedFolderSetFileTile\n     */\n    export interface ManagedFolderSetFileTile extends _AppHomepageTile {\n        behavior: AppHomepageTile.ManagedFolderSetFileTileBehavior;\n        folderId: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$DownloadDashboardTile\n     */\n    export interface DownloadDashboardTile extends _AppHomepageTile {\n        dashboardId: string;\n        format: any /* TODO: Missing translation of com.dataiku.dip.graphicsexport.model.ExportFormat */;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditFSDatasetTileBehavior\n     */\n    export enum EditFSDatasetTileBehavior {\n        GO_TO_DATASET = 'GO_TO_DATASET',\n        INLINE_BROWSE_ONLY = 'INLINE_BROWSE_ONLY',\n        INLINE_BROWSE_AND_REDETECT = 'INLINE_BROWSE_AND_REDETECT',\n        INLINE_BROWSE_REDETECT_AND_INFER = 'INLINE_BROWSE_REDETECT_AND_INFER',\n        MODAL_BROWSE_REDETECT_AND_INFER = 'MODAL_BROWSE_REDETECT_AND_INFER'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$DownloadDatasetTile\n     */\n    export interface DownloadDatasetTile extends _AppHomepageTile {\n        datasetName: string;\n        exportParams: any /* TODO: Missing translation of com.dataiku.dip.export.ExportParams */;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$VariableDisplayTile\n     */\n    export interface VariableDisplayTile extends _AppHomepageTile {\n        content: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$RunScenarioTile\n     */\n    export interface RunScenarioTile extends _AppHomepageTile {\n        buttonText: string;\n        scenarioId: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditSQLDatasetTile\n     */\n    export interface EditSQLDatasetTile extends _AppHomepageTile {\n        behavior: AppHomepageTile.EditSQLDatasetTileBehavior;\n        datasetName: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$UploadDatasetSetFileTileBehavior\n     */\n    export enum UploadDatasetSetFileTileBehavior {\n        GO_TO_DATASET = 'GO_TO_DATASET',\n        INLINE_UPLOAD_ONLY = 'INLINE_UPLOAD_ONLY',\n        INLINE_UPLOAD_AND_REDETECT = 'INLINE_UPLOAD_AND_REDETECT',\n        INLINE_UPLOAD_REDETECT_AND_INFER = 'INLINE_UPLOAD_REDETECT_AND_INFER'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$PropagateSchemaTile\n     */\n    export interface PropagateSchemaTile extends _AppHomepageTile {\n        behavior: AppHomepageTile.PropagateSchemaTileBehavior;\n        datasetName: string;\n        excludedRecipes: string[];\n        markAsOkRecipes: string[];\n        partitionByComputable: AppHomepageTile.PartitionDef[];\n        partitionByDim: AppHomepageTile.PartitionDef[];\n        recipeUpdateOptions: {[key: string]: any};\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditAnyStreamingEndpointTile\n     */\n    export interface EditAnyStreamingEndpointTile extends _AppHomepageTile {\n        streamingEndpointId: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditInlineDatasetTile\n     */\n    export interface EditInlineDatasetTile extends _AppHomepageTile {\n        datasetName: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$ProjectVariablesTile\n     */\n    export interface ProjectVariablesTile extends _AppHomepageTile {\n        behavior: AppHomepageTile.ProjectVariablesTileBehavior;\n        buttonText: string;\n        html: string;\n        js: string;\n        module: string;\n        params: any /* TODO: Missing translation of com.dataiku.dip.autoconfig.ParamDesc */[];\n        python: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditFolderTileBehavior\n     */\n    export enum EditFolderTileBehavior {\n        GO_TO_FOLDER = 'GO_TO_FOLDER',\n        INLINE_BROWSE = 'INLINE_BROWSE',\n        MODAL_BROWSE = 'MODAL_BROWSE'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$EditSQLDatasetTileBehavior\n     */\n    export enum EditSQLDatasetTileBehavior {\n        GO_TO_DATASET = 'GO_TO_DATASET',\n        INLINE_BROWSE_ONLY = 'INLINE_BROWSE_ONLY',\n        INLINE_BROWSE_AND_INFER = 'INLINE_BROWSE_AND_INFER',\n        MODAL_BROWSE_AND_INFER = 'MODAL_BROWSE_AND_INFER'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$ProjectVariablesTileBehavior\n     */\n    export enum ProjectVariablesTileBehavior {\n        INLINE_AUTO_SAVE = 'INLINE_AUTO_SAVE',\n        INLINE_EXPLICIT_SAVE = 'INLINE_EXPLICIT_SAVE',\n        MODAL = 'MODAL'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.AppHomepageTile$ManagedFolderLinkTile\n     */\n    export interface ManagedFolderLinkTile extends _AppHomepageTile {\n        folderId: string;\n    }\n}","/**\n * Generated from com.dataiku.dip.dashboards.model.Tile\n */\nexport interface Tile {\n    autoLoad: boolean;\n    borderColor?: string | null;\n    box: Tile.Box;\n    clickAction: Tile.TileClickAction;\n    displayMode?: Tile.TileDisplayMode | null;\n    imageId?: string | null;\n    insightId?: string | null;\n    insightType?: string | null;\n    resizeImageMode?: Tile.TileResizeImageMode | null;\n    showTitle: Tile.DisplayTitleMode;\n    targetInsightId?: string | null;\n    tileParams: any /* TODO: Missing translation of com.dataiku.dip.dashboards.model.TileParams */;\n    tileType: Tile.TileType;\n    title?: string | null;\n}\n\nexport namespace Tile {\n    /**\n     * Generated from com.dataiku.dip.dashboards.model.Tile$TileType\n     */\n    export enum TileType {\n        INSIGHT = 'INSIGHT',\n        TEXT = 'TEXT',\n        IMAGE = 'IMAGE',\n        IFRAME = 'IFRAME'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.dashboards.model.Tile$TileResizeImageMode\n     */\n    export enum TileResizeImageMode {\n        ORIG_SIZE = 'ORIG_SIZE',\n        FIT_SIZE = 'FIT_SIZE',\n        STRETCH_SIZE = 'STRETCH_SIZE',\n        FIT_CROP_SIZE = 'FIT_CROP_SIZE'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.dashboards.model.Tile$TileClickAction\n     */\n    export enum TileClickAction {\n        DO_NOTHING = 'DO_NOTHING',\n        OPEN_INSIGHT = 'OPEN_INSIGHT',\n        OPEN_OTHER_INSIGHT = 'OPEN_OTHER_INSIGHT'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.dashboards.model.Tile$DisplayTitleMode\n     */\n    export enum DisplayTitleMode {\n        YES = 'YES',\n        NO = 'NO',\n        MOUSEOVER = 'MOUSEOVER'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.dashboards.model.Tile$Box\n     */\n    export interface Box {\n        height: number;\n        left: number;\n        top: number;\n        width: number;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.dashboards.model.Tile$TileDisplayMode\n     */\n    export enum TileDisplayMode {\n        INSIGHT = 'INSIGHT',\n        INSIGHT_DESC = 'INSIGHT_DESC',\n        IMAGE_AND_INSIGHT_DESC = 'IMAGE_AND_INSIGHT_DESC',\n        IMAGE = 'IMAGE'\n    }\n}","import {Filter} from './../../../compute/filtering/filter';\n\nexport namespace SummaryCardBuilder {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.SummaryCardBuilder$ComputedStatType\n     */\n    export enum ComputedStatType {\n        FILTERS = 'FILTERS',\n        FLOAT = 'FLOAT',\n        INT = 'INT',\n        FAILURE = 'FAILURE',\n        NOT_COMPUTED = 'NOT_COMPUTED'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.SummaryCardBuilder$ComputedStat\n     */\n    export interface ComputedStat {\n        failureMessage?: string | null;\n        filterValues?: Filter[] | null;\n        flagName: string;\n        floatValue?: number | null;\n        fullLabel: string;\n        intValue?: number | null;\n        lower?: number | null;\n        pvalue?: number | null;\n        shortLabel: string;\n        type: SummaryCardBuilder.ComputedStatType;\n        upper?: number | null;\n        warning?: string | null;\n    }\n}","import {Computation, _Computation} from './../computation';\nimport {ComputationResult} from './../computation-result';\nimport {Grouping} from './../../grouping/grouping';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Chi2IndTest\n */\nexport interface Chi2IndTest extends _Computation {\n    xGrouping: Grouping;\n    yGrouping: Grouping;\n\n    // PolyJson type\n    type: 'chi2_ind_test';\n}\n\nexport function isChi2IndTest(toTest: Computation): toTest is Chi2IndTest { return 'chi2_ind_test' === toTest.type; }\n\nexport namespace Chi2IndTest {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Chi2IndTest$Chi2IndTestResult\n     */\n    export interface Chi2IndTestResult extends _AvailableResult {\n        dof: number;\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'chi2_ind_test';\n    }\n\n    export function isChi2IndTestResult(toTest: ComputationResult): toTest is Chi2IndTestResult { return 'chi2_ind_test' === toTest.type; }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Filter} from './../../../compute/filtering/filter';\nimport {_BivariateCard} from './../bivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.ScatterPlotCard\n */\nexport interface ScatterPlotCard extends _BivariateCard {\n    highlightFilter?: Filter | null;\n    symbolSize: number;\n\n    // PolyJson type\n    type: 'scatter_plot';\n}\n\nexport function isScatterPlotCard(toTest: Card): toTest is ScatterPlotCard { return 'scatter_plot' === toTest.type; }\n\nexport namespace ScatterPlotCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.ScatterPlotCard$ScatterPlotCardResult\n     */\n    export interface ScatterPlotCardResult extends _CardResult {\n        highlightedXSeries?: number[] | null;\n        highlightedYSeries?: number[] | null;\n        xSeries: number[];\n        ySeries: number[];\n\n        // PolyJson type\n        type: 'scatter_plot';\n    }\n\n    export function isScatterPlotCardResult(toTest: CardResult): toTest is ScatterPlotCardResult { return 'scatter_plot' === toTest.type; }\n}","import {AbstractNSampTestCard} from './abstract-nsamp-test-card';\nimport {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {KsTest2SampCard} from './../ks-test2-samp-card';\nimport {MoodTest2SampCard} from './../mood-test2-samp-card';\nimport {TTest2SampCard} from './../ttest2-samp-card';\nimport {_BivariateCard} from './../bivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.common.Abstract2SampTestCard\n */\nexport interface _Abstract2SampTestCard extends _BivariateCard {\n    confidenceLevel: number;\n    value1: string[];\n    value2: string[];\n}\n\nexport type Abstract2SampTestCard = MoodTest2SampCard | TTest2SampCard | KsTest2SampCard;\n\nexport function isAbstract2SampTestCard(toTest: Card): toTest is Abstract2SampTestCard { return [\"mood_test_2samp\" , \"ttest_2samp\" , \"ks_test_2samp\"].includes(toTest.type); }\n\nexport namespace Abstract2SampTestCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.Abstract2SampTestCard$Abstract2SampTestCardResult\n     */\n    export interface _Abstract2SampTestCardResult extends _CardResult {\n        allGroups: AbstractNSampTestCard.GroupInfo;\n        groups: AbstractNSampTestCard.GroupInfo[];\n    }\n\n    export type Abstract2SampTestCardResult = MoodTest2SampCard.MoodTest2SampCardResult | TTest2SampCard.TTest2SampCardResult | KsTest2SampCard.KsTest2SampCardResult;\n\n    export function isAbstract2SampTestCardResult(toTest: CardResult): toTest is Abstract2SampTestCardResult { return [\"mood_test_2samp\" , \"ttest_2samp\" , \"ks_test_2samp\"].includes(toTest.type); }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.bivariate.KendallTau\n */\nexport interface KendallTau extends Computation._BivariateComputation {\n    // PolyJson type\n    type: 'kendall_tau';\n}\n\nexport function isKendallTau(toTest: Computation): toTest is KendallTau { return 'kendall_tau' === toTest.type; }\n\nexport namespace KendallTau {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.KendallTau$KendallTauResult\n     */\n    export interface KendallTauResult extends _AvailableResult {\n        correlation: number;\n        pvalue: number;\n\n        // PolyJson type\n        type: 'kendall_tau';\n    }\n\n    export function isKendallTauResult(toTest: ComputationResult): toTest is KendallTauResult { return 'kendall_tau' === toTest.type; }\n}","import {ContainerExecSelection} from './../containers/exec/container-exec-selection';\nimport {ExposedObject} from './exposed-object';\nimport {ObjectCustomMetadata} from './object-custom-metadata';\nimport {RecipeEnginesPreferenceConfig} from './recipe-engines-preference-config';\nimport {TaggableObjectsService} from './../server/services/taggable-objects-service';\n\n/**\n * Generated from com.dataiku.dip.coremodel.SerializedProject\n */\nexport interface SerializedProject extends TaggableObjectsService._TaggableObject {\n    additionalDashboardUsers: SerializedProject.AdditionalDashboardUsers;\n    bundleContainerSettings: any /* TODO: Missing translation of com.dataiku.dip.projects.importexport.model.BundleContainerSettings */;\n    bundleExporterSettings: any /* TODO: Missing translation of com.dataiku.dip.projects.importexport.model.BundleExporterSettings */;\n    customMeta: ObjectCustomMetadata;\n    dashboardAuthorizations: SerializedProject.ProjectDashboardAuthorizations;\n    exposedObjects: SerializedProject.ProjectExposedObjects;\n    generatingAppId: string;\n    generatingAppVersion: string;\n    imgColor: string;\n    imgPattern: number;\n    metrics: any /* TODO: Missing translation of com.dataiku.dip.metrics.ProbesSet */;\n    metricsChecks: any /* TODO: Missing translation of com.dataiku.dip.metrics.ChecksSet */;\n    name: string;\n    owner: string;\n    permissions: SerializedProject.PermissionItem[];\n    projectAppType: SerializedProject.ProjectAppType;\n    projectKey: string;\n    projectStatus: string;\n    projectType: SerializedProject.ProjectType;\n    settings: SerializedProject.ProjectSettings;\n    showInitials: boolean;\n    tutorialId: string;\n    tutorialProject: boolean;\n}\n\nexport namespace SerializedProject.ReaderAuthorization {\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ReaderAuthorization$Mode\n     */\n    export enum Mode {\n        READ = 'READ',\n        RUN = 'RUN',\n        WRITE = 'WRITE'\n    }\n}\n\nexport namespace SerializedProject {\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectExposedObjects\n     */\n    export interface ProjectExposedObjects {\n        objects: ExposedObject[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectRelocationSettings\n     */\n    export interface ProjectRelocationSettings {\n        sqlLikeRecipesInitializationMode: SerializedProject.SQLLikeRecipeInitializationMode;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectWikiSettings\n     */\n    export interface ProjectWikiSettings {\n        promoted: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectSettings\n     */\n    export interface ProjectSettings {\n        cluster: any /* TODO: Missing translation of com.dataiku.dip.cluster.ClusterSelection */;\n        codeEnvs: any /* TODO: Missing translation of com.dataiku.dip.code.ProjectCodeEnvsSelection */;\n        container: ContainerExecSelection;\n        datasetsCreationSettings: any /* TODO: Missing translation of com.dataiku.dip.dao.GeneralSettingsDAO$ProjectDefaultDatasetCreationSettings */;\n        disableAutomaticTriggers: boolean;\n        flowAnchorSourcesAndSinks: boolean;\n        flowBuildSettings: SerializedProject.FlowBuildSettings;\n        flowDisplaySettings: SerializedProject.FlowDisplaySettings;\n        gitCommitMode: any /* TODO: Missing translation of com.dataiku.dip.git.IProjectCommitModeService$ProjectCommitMode */;\n        hiveEngineCreationSettings: SerializedProject.ProjectHiveEngineCreationSettings;\n        impalaEngineCreationSettings: SerializedProject.ProjectImpalaEngineCreationSettings;\n        integrations: SerializedProject.IntegrationsSettings;\n        k8sCluster: any /* TODO: Missing translation of com.dataiku.dip.cluster.ClusterSelection */;\n        limitsSettings: SerializedProject.LimitsSettings;\n        recipeEnginesPreferences: RecipeEnginesPreferenceConfig;\n        relocationSettings: SerializedProject.ProjectRelocationSettings;\n        sparkEngineCreationSettings: SerializedProject.ProjectSparkEngineCreationSettings;\n        useRemoteGit: boolean;\n        virtualWebAppBackendSettings: any /* TODO: Missing translation of com.dataiku.dip.webapps.VirtualWebAppBackendSettings */;\n        wikiSettings: SerializedProject.ProjectWikiSettings;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectSparkEngineCreationSettings\n     */\n    export interface ProjectSparkEngineCreationSettings {\n        executionConfig: string;\n        executionEngine: any /* TODO: Missing translation of com.dataiku.dip.recipes.AbstractSparkRecipeParams$SparkExecutionEngine */;\n        useGlobal: boolean;\n        useGlobalMetastore: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$LimitsSettings\n     */\n    export interface LimitsSettings {\n        attachmentBytes: any /* TODO: Missing translation of com.dataiku.dip.dao.GeneralSettingsDAO$SoftHardLimit */;\n        memSampleBytes: any /* TODO: Missing translation of com.dataiku.dip.dao.GeneralSettingsDAO$SoftHardLimit */;\n        shakerMemTableBytes: any /* TODO: Missing translation of com.dataiku.dip.dao.GeneralSettingsDAO$SoftHardLimit */;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectType\n     */\n    export enum ProjectType {\n        REGULAR = 'REGULAR',\n        BUNDLE_CONTAINER = 'BUNDLE_CONTAINER'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectHiveEngineCreationSettings\n     */\n    export interface ProjectHiveEngineCreationSettings {\n        executionConfig: string;\n        executionEngine: any /* TODO: Missing translation of com.dataiku.dip.recipes.code.hive.HiveRecipeMeta$HiveExecutionEngine */;\n        useGlobal: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectIntegration\n     */\n    export interface ProjectIntegration {\n        active: boolean;\n        hook: any /* TODO: Missing translation of com.dataiku.dip.integrations.IntegrationHook */;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$PermissionItem\n     */\n    export interface PermissionItem {\n        admin: boolean;\n        executeApp: boolean;\n        exportDatasetsData: boolean;\n        group: string;\n        manageAdditionalDashboardUsers: boolean;\n        manageDashboardAuthorizations: boolean;\n        manageExposedElements: boolean;\n        moderateDashboards: boolean;\n        readDashboards: boolean;\n        readProjectContent: boolean;\n        runScenarios: boolean;\n        user: string;\n        writeDashboards: boolean;\n        writeProjectContent: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectDashboardAuthorizations\n     */\n    export interface ProjectDashboardAuthorizations {\n        allAuthorized: boolean;\n        authorizations: SerializedProject.ReaderAuthorization[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectAppType\n     */\n    export enum ProjectAppType {\n        REGULAR = 'REGULAR',\n        APP_INSTANCE = 'APP_INSTANCE',\n        APP_TEMPLATE = 'APP_TEMPLATE'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$IntegrationsSettings\n     */\n    export interface IntegrationsSettings {\n        integrations: SerializedProject.ProjectIntegration[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$SQLLikeRecipeInitializationMode\n     */\n    export enum SQLLikeRecipeInitializationMode {\n        RESOLVED_TABLE_REFERENCES = 'RESOLVED_TABLE_REFERENCES',\n        VARIABILIZED_TABLE_REFERENCES = 'VARIABILIZED_TABLE_REFERENCES',\n        DATASET_REFERENCES = 'DATASET_REFERENCES'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ReaderAuthorization\n     */\n    export interface ReaderAuthorization {\n        modes: SerializedProject.ReaderAuthorization.Mode[];\n        objectRef: any /* TODO: Missing translation of com.dataiku.dip.SmartObjectRef */;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$FlowBuildSettings\n     */\n    export interface FlowBuildSettings {\n        mergeSparkPipelines: boolean;\n        mergeSqlPipelines: boolean;\n        pruneBeforeSparkPipelines: boolean;\n        pruneBeforeSqlPipelines: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$ProjectImpalaEngineCreationSettings\n     */\n    export interface ProjectImpalaEngineCreationSettings {\n        streamMode: boolean;\n        useGlobal: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$AdditionalDashboardUsers\n     */\n    export interface AdditionalDashboardUsers {\n        users: SerializedProject.AdditionalDashboardUser[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$AdditionalDashboardUser\n     */\n    export interface AdditionalDashboardUser {\n        login: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$FlowDisplaySettings\n     */\n    export interface FlowDisplaySettings {\n        zonesGraphConnectZones: boolean;\n        zonesGraphRenderingAlgorithm: SerializedProject.FlowDisplaySettings.ZonesGraphRenderingAlgorithm;\n    }\n}\n\nexport namespace SerializedProject.FlowDisplaySettings {\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedProject$FlowDisplaySettings$ZonesGraphRenderingAlgorithm\n     */\n    export enum ZonesGraphRenderingAlgorithm {\n        DOT_OLDRANK = 'DOT_OLDRANK',\n        DOT_NEWRANK_FREERANK = 'DOT_NEWRANK_FREERANK'\n    }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.ZTest1Samp\n */\nexport interface ZTest1Samp extends Computation._UnivariateComputation {\n    hypothesizedMean: number;\n    knownStdDev: number;\n\n    // PolyJson type\n    type: 'ztest_1samp';\n}\n\nexport function isZTest1Samp(toTest: Computation): toTest is ZTest1Samp { return 'ztest_1samp' === toTest.type; }\n\nexport namespace ZTest1Samp {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.ZTest1Samp$ZTest1SampResult\n     */\n    export interface ZTest1SampResult extends _AvailableResult {\n        pvalue: number;\n        pvalueAltGt: number;\n        pvalueAltLt: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'ztest_1samp';\n    }\n\n    export function isZTest1SampResult(toTest: ComputationResult): toTest is ZTest1SampResult { return 'ztest_1samp' === toTest.type; }\n}","import {Grouping, _Grouping} from './grouping';\nimport {GroupingResult, _GroupingResult} from './grouping-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.grouping.CrossGrouping\n */\nexport interface CrossGrouping extends _Grouping {\n    groupings: Grouping[];\n\n    // PolyJson type\n    type: 'cross';\n}\n\nexport function isCrossGrouping(toTest: Grouping): toTest is CrossGrouping { return 'cross' === toTest.type; }\n\nexport namespace CrossGrouping {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.grouping.CrossGrouping$CrossGroupingResult\n     */\n    export interface CrossGroupingResult extends _GroupingResult {\n        groups: GroupingResult[];\n\n        // PolyJson type\n        type: 'cross';\n    }\n\n    export function isCrossGroupingResult(toTest: GroupingResult): toTest is CrossGroupingResult { return 'cross' === toTest.type; }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.LogNormal\n */\nexport interface LogNormal extends _Distribution {\n    // PolyJson type\n    type: 'lognormal';\n}\n\nexport function isLogNormal(toTest: Distribution): toTest is LogNormal { return 'lognormal' === toTest.type; }\n\nexport namespace LogNormal {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.LogNormal$FittedLogNormal\n     */\n    export interface FittedLogNormal extends Distribution._FittedDistribution {\n        logmean: number;\n        logstd: number;\n\n        // PolyJson type\n        type: 'lognormal';\n    }\n\n    export function isFittedLogNormal(toTest: Distribution.FittedDistribution): toTest is FittedLogNormal { return 'lognormal' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Distribution} from './../../distributions/distribution';\nimport {TestDistribution} from './test-distribution';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.FitDistribution\n */\nexport interface FitDistribution extends Computation._UnivariateComputation {\n    distribution: Distribution;\n    test: boolean;\n\n    // PolyJson type\n    type: 'fit_distribution';\n}\n\nexport function isFitDistribution(toTest: Computation): toTest is FitDistribution { return 'fit_distribution' === toTest.type; }\n\nexport namespace FitDistribution {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.FitDistribution$FitDistributionResult\n     */\n    export interface FitDistributionResult extends _AvailableResult {\n        fit: Distribution.FittedDistribution;\n        test?: TestDistribution.TestDistributionResult | null;\n\n        // PolyJson type\n        type: 'fit_distribution';\n    }\n\n    export function isFitDistributionResult(toTest: ComputationResult): toTest is FitDistributionResult { return 'fit_distribution' === toTest.type; }\n}","import {Filter, _Filter} from './filter';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.filtering.AllFilter\n */\nexport interface AllFilter extends _Filter {\n    // PolyJson type\n    type: 'all';\n}\n\nexport function isAllFilter(toTest: Filter): toTest is AllFilter { return 'all' === toTest.type; }","import {Card} from './../card';\nimport {PValueAdjustmentMethod} from './../../../compute/stats/pvalue-adjustment-method';\nimport {PairwiseMoodTestCard} from './../pairwise-mood-test-card';\nimport {PairwiseTTestCard} from './../pairwise-ttest-card';\nimport {_AbstractNSampTestCard} from './abstract-nsamp-test-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.common.AbstractPairwiseTestCard\n */\nexport interface _AbstractPairwiseTestCard extends _AbstractNSampTestCard {\n    adjustmentMethod: PValueAdjustmentMethod;\n}\n\nexport type AbstractPairwiseTestCard = PairwiseTTestCard | PairwiseMoodTestCard;\n\nexport function isAbstractPairwiseTestCard(toTest: Card): toTest is AbstractPairwiseTestCard { return [\"pairwise_ttest\" , \"pairwise_mood\"].includes(toTest.type); }","import {Filter, _Filter} from './filter';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.filtering.AndFilter\n */\nexport interface AndFilter extends _Filter {\n    filters: Filter[];\n\n    // PolyJson type\n    type: 'and';\n}\n\nexport function isAndFilter(toTest: Filter): toTest is AndFilter { return 'and' === toTest.type; }","/**\n * Generated from com.dataiku.dip.eda.compute.stats.PValueAdjustmentMethod\n */\nexport enum PValueAdjustmentMethod {\n    BONFERRONI = 'BONFERRONI',\n    NONE = 'NONE',\n    HOLM_BONFERRONI = 'HOLM_BONFERRONI'\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Grouping} from './../../grouping/grouping';\nimport {PValueAdjustmentMethod} from './../../stats/pvalue-adjustment-method';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.PairwiseTTest\n */\nexport interface PairwiseTTest extends Computation._UnivariateComputation {\n    adjustmentMethod: PValueAdjustmentMethod;\n    grouping: Grouping;\n\n    // PolyJson type\n    type: 'pairwise_ttest';\n}\n\nexport function isPairwiseTTest(toTest: Computation): toTest is PairwiseTTest { return 'pairwise_ttest' === toTest.type; }\n\nexport namespace PairwiseTTest {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.PairwiseTTest$PairwiseTTestResult\n     */\n    export interface PairwiseTTestResult extends _AvailableResult {\n        pvalues: number[];\n        statistics: number[];\n\n        // PolyJson type\n        type: 'pairwise_ttest';\n    }\n\n    export function isPairwiseTTestResult(toTest: ComputationResult): toTest is PairwiseTTestResult { return 'pairwise_ttest' === toTest.type; }\n}","import {BivariateFrequencyTableFragment} from './fragments/bivariate-frequency-table-fragment';\nimport {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {_BivariateCard} from './bivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.Chi2IndTestCard\n */\nexport interface Chi2IndTestCard extends _BivariateCard {\n    confidenceLevel: number;\n    maxValuesX: number;\n    maxValuesY: number;\n\n    // PolyJson type\n    type: 'chi2_independence_test';\n}\n\nexport function isChi2IndTestCard(toTest: Card): toTest is Chi2IndTestCard { return 'chi2_independence_test' === toTest.type; }\n\nexport namespace Chi2IndTestCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.Chi2IndTestCard$Chi2IndTestCardResult\n     */\n    export interface Chi2IndTestCardResult extends _CardResult {\n        dof: number;\n        freqTableData: BivariateFrequencyTableFragment;\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'chi2_independence_test';\n    }\n\n    export function isChi2IndTestCardResult(toTest: CardResult): toTest is Chi2IndTestCardResult { return 'chi2_independence_test' === toTest.type; }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Pareto\n */\nexport interface Pareto extends _Distribution {\n    // PolyJson type\n    type: 'pareto';\n}\n\nexport function isPareto(toTest: Distribution): toTest is Pareto { return 'pareto' === toTest.type; }\n\nexport namespace Pareto {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Pareto$FittedPareto\n     */\n    export interface FittedPareto extends Distribution._FittedDistribution {\n        scale: number;\n        shape: number;\n\n        // PolyJson type\n        type: 'pareto';\n    }\n\n    export function isFittedPareto(toTest: Distribution.FittedDistribution): toTest is FittedPareto { return 'pareto' === toTest.type; }\n}","import {Computation, _Computation} from './../computation';\nimport {ComputationResult} from './../computation-result';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.common.MultiComputation\n */\nexport interface MultiComputation extends _Computation {\n    computations: Computation[];\n\n    // PolyJson type\n    type: 'multi';\n}\n\nexport function isMultiComputation(toTest: Computation): toTest is MultiComputation { return 'multi' === toTest.type; }\n\nexport namespace MultiComputation {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.common.MultiComputation$MultiComputationResult\n     */\n    export interface MultiComputationResult extends _AvailableResult {\n        results: ComputationResult[];\n\n        // PolyJson type\n        type: 'multi';\n    }\n\n    export function isMultiComputationResult(toTest: ComputationResult): toTest is MultiComputationResult { return 'multi' === toTest.type; }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.NormalMixture\n */\nexport interface NormalMixture extends _Distribution {\n    nbComponents: number;\n\n    // PolyJson type\n    type: 'normal_mixture';\n}\n\nexport function isNormalMixture(toTest: Distribution): toTest is NormalMixture { return 'normal_mixture' === toTest.type; }\n\nexport namespace NormalMixture {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.NormalMixture$FittedNormalMixture\n     */\n    export interface FittedNormalMixture extends Distribution._FittedDistribution {\n        components: NormalMixture.FittedNormalMixture.Component[];\n\n        // PolyJson type\n        type: 'normal_mixture';\n    }\n\n    export function isFittedNormalMixture(toTest: Distribution.FittedDistribution): toTest is FittedNormalMixture { return 'normal_mixture' === toTest.type; }\n}\n\nexport namespace NormalMixture.FittedNormalMixture {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.NormalMixture$FittedNormalMixture$Component\n     */\n    export interface Component {\n        mean: number;\n        std: number;\n        weight: number;\n    }\n}","import {Computation, _Computation} from './../computation';\nimport {ComputationResult} from './../computation-result';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.common.DummyComputation\n */\nexport interface DummyComputation extends _Computation {\n    // PolyJson type\n    type: 'dummy';\n}\n\nexport function isDummyComputation(toTest: Computation): toTest is DummyComputation { return 'dummy' === toTest.type; }\n\nexport namespace DummyComputation {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.common.DummyComputation$DummyComputationResult\n     */\n    export interface DummyComputationResult extends _AvailableResult {\n        // PolyJson type\n        type: 'dummy';\n    }\n\n    export function isDummyComputationResult(toTest: ComputationResult): toTest is DummyComputationResult { return 'dummy' === toTest.type; }\n}","import {BivariateFrequencyTableFragment} from './../fragments/bivariate-frequency-table-fragment';\nimport {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {_Abstract2DPivotCard} from './abstract2-dpivot-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateFrequencyTableCard\n */\nexport interface BivariateFrequencyTableCard extends _Abstract2DPivotCard {\n    // PolyJson type\n    type: 'bivariate_frequency_table';\n}\n\nexport function isBivariateFrequencyTableCard(toTest: Card): toTest is BivariateFrequencyTableCard { return 'bivariate_frequency_table' === toTest.type; }\n\nexport namespace BivariateFrequencyTableCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateFrequencyTableCard$BivariateFrequencyTableCardResult\n     */\n    export interface BivariateFrequencyTableCardResult extends _CardResult {\n        table: BivariateFrequencyTableFragment;\n\n        // PolyJson type\n        type: 'bivariate_frequency_table';\n    }\n\n    export function isBivariateFrequencyTableCardResult(toTest: CardResult): toTest is BivariateFrequencyTableCardResult { return 'bivariate_frequency_table' === toTest.type; }\n}","import {AbstractCardContainer, _AbstractCardContainer} from './abstract-card-container';\nimport {CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Variable} from './../../models/variable';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.common.ColumnCard\n */\nexport interface ColumnCard extends _AbstractCardContainer {\n    column: Variable;\n\n    // PolyJson type\n    type: 'column_card';\n}\n\nexport function isColumnCard(toTest: Card): toTest is ColumnCard { return 'column_card' === toTest.type; }\n\nexport namespace ColumnCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.ColumnCard$ColumnCardResult\n     */\n    export interface ColumnCardResult extends AbstractCardContainer._AbstractCardContainerResult {\n        column: Variable;\n\n        // PolyJson type\n        type: 'column_card';\n    }\n\n    export function isColumnCardResult(toTest: CardResult): toTest is ColumnCardResult { return 'column_card' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Pearson\n */\nexport interface Pearson extends Computation._BivariateComputation {\n    // PolyJson type\n    type: 'pearson';\n}\n\nexport function isPearson(toTest: Computation): toTest is Pearson { return 'pearson' === toTest.type; }\n\nexport namespace Pearson {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.Pearson$PearsonResult\n     */\n    export interface PearsonResult extends _AvailableResult {\n        correlation: number;\n        pvalue: number;\n\n        // PolyJson type\n        type: 'pearson';\n    }\n\n    export function isPearsonResult(toTest: ComputationResult): toTest is PearsonResult { return 'pearson' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.SignTest1Samp\n */\nexport interface SignTest1Samp extends Computation._UnivariateComputation {\n    hypothesizedMedian: number;\n\n    // PolyJson type\n    type: 'sign_test_1samp';\n}\n\nexport function isSignTest1Samp(toTest: Computation): toTest is SignTest1Samp { return 'sign_test_1samp' === toTest.type; }\n\nexport namespace SignTest1Samp {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.SignTest1Samp$SignTest1SampResult\n     */\n    export interface SignTest1SampResult extends _AvailableResult {\n        nbLarger: number;\n        nbSmaller: number;\n        pvalue: number;\n        pvalueAltGt: number;\n        pvalueAltLt: number;\n\n        // PolyJson type\n        type: 'sign_test_1samp';\n    }\n\n    export function isSignTest1SampResult(toTest: ComputationResult): toTest is SignTest1SampResult { return 'sign_test_1samp' === toTest.type; }\n}","import {BinningMode} from './../../models/binning-mode';\nimport {BoxPlotFragment} from './../fragments/box-plot-fragment';\nimport {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Filter} from './../../../compute/filtering/filter';\nimport {NumericalHistogramFragment} from './../fragments/numerical-histogram-fragment';\nimport {_UnivariateCard} from './../univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.NumericalHistogramCard\n */\nexport interface NumericalHistogramCard extends _UnivariateCard {\n    binningMode: BinningMode;\n    customBinningBoundaries: number[];\n    highlightFilter?: Filter | null;\n    nbBins: number;\n    showBoxPlot: boolean;\n    showHistogram: boolean;\n\n    // PolyJson type\n    type: 'numerical_histogram';\n}\n\nexport function isNumericalHistogramCard(toTest: Card): toTest is NumericalHistogramCard { return 'numerical_histogram' === toTest.type; }\n\nexport namespace NumericalHistogramCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.NumericalHistogramCard$NumericalHistogramCardResult\n     */\n    export interface NumericalHistogramCardResult extends _CardResult {\n        boxPlot?: BoxPlotFragment | null;\n        histogram?: NumericalHistogramFragment | null;\n\n        // PolyJson type\n        type: 'numerical_histogram';\n    }\n\n    export function isNumericalHistogramCardResult(toTest: CardResult): toTest is NumericalHistogramCardResult { return 'numerical_histogram' === toTest.type; }\n}","/**\n * Generated from com.dataiku.dip.eda.worksheets.models.Variable\n */\nexport interface Variable {\n    name: string;\n    type: Variable.Type;\n}\n\nexport namespace Variable {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.models.Variable$Type\n     */\n    export enum Type {\n        CATEGORICAL = 'CATEGORICAL',\n        CONTINUOUS = 'CONTINUOUS'\n    }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.StdDev\n */\nexport interface StdDev extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'std_dev';\n}\n\nexport function isStdDev(toTest: Computation): toTest is StdDev { return 'std_dev' === toTest.type; }\n\nexport namespace StdDev {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.StdDev$StdDevResult\n     */\n    export interface StdDevResult extends _AvailableResult {\n        value: number;\n\n        // PolyJson type\n        type: 'std_dev';\n    }\n\n    export function isStdDevResult(toTest: ComputationResult): toTest is StdDevResult { return 'std_dev' === toTest.type; }\n}","import {DatasetOrdering} from './../../../../../../../dss-core/src/main/java/com/dataiku/dip/input/dataset-ordering';\nimport {ObjectCustomMetadata} from './object-custom-metadata';\nimport {PartitioningScheme} from './../../../../../../../dss-core/src/main/java/com/dataiku/dip/partitioning/partitioning-scheme';\nimport {Schema} from './../../../../../../../dss-core/src/main/java/com/dataiku/dip/coremodel/schema';\nimport {TaggableObjectsService} from './../server/services/taggable-objects-service';\n\n/**\n * Generated from com.dataiku.dip.coremodel.SerializedDataset\n */\nexport interface SerializedDataset extends TaggableObjectsService._TaggableObject {\n    autodetectedFormatId: string;\n    checks: SerializedDataset.SerializedCheck[];\n    customMeta: ObjectCustomMetadata;\n    deserializationContext: any /* TODO: Missing translation of com.google.gson.JsonDeserializationContext */;\n    dkuProperties: any /* TODO: Missing translation of com.dataiku.dip.connections.AbstractSQLConnection$CustomDatabaseProperty */[];\n    flowOptions: SerializedDataset.FlowOptions;\n    formatParams: any /* TODO: Missing translation of com.dataiku.dip.coremodel.FormatParams */;\n    formatParamsRaw: any /* TODO: Missing translation of com.google.gson.JsonElement */;\n    formatParamsRawClass: any;\n    formatType: string;\n    managed: boolean;\n    metrics: any /* TODO: Missing translation of com.dataiku.dip.metrics.ProbesSet */;\n    metricsChecks: any /* TODO: Missing translation of com.dataiku.dip.metrics.ChecksSet */;\n    metricsChecksRaw: any /* TODO: Missing translation of com.google.gson.JsonElement */;\n    metricsRaw: any /* TODO: Missing translation of com.google.gson.JsonElement */;\n    name: string;\n    overrideTable: any /* TODO: Missing translation of com.dataiku.dip.variables.OverrideTable */;\n    params: any /* TODO: Missing translation of com.dataiku.dip.datasets.DatasetHandler$DatasetParams */;\n    paramsRaw: any /* TODO: Missing translation of com.google.gson.JsonElement */;\n    paramsRawClass: any;\n    partitioning: PartitioningScheme;\n    projectKey: string;\n    readWriteOptions: SerializedDataset.ReadWriteOptions;\n    remoteFiles: SerializedDataset.RemoteFiles;\n    schema: Schema;\n    smartName: string;\n    type: string;\n}\n\nexport namespace SerializedDataset {\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedDataset$RemoteFilesSource\n     */\n    export interface RemoteFilesSource {\n        connection: string;\n        path: string;\n        protocol: string;\n        url: string;\n        useConnection: boolean;\n        useGlobalProxy: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedDataset$SerializedCheck\n     */\n    export interface SerializedCheck {\n        params: {[key: string]: string};\n        type: string;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedDataset$CrossProjectBuildBehaviour\n     */\n    export enum CrossProjectBuildBehaviour {\n        DEFAULT = 'DEFAULT',\n        STOP = 'STOP',\n        TRAVERSE = 'TRAVERSE'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedDataset$RebuildBehavior\n     */\n    export enum RebuildBehavior {\n        NORMAL = 'NORMAL',\n        EXPLICIT = 'EXPLICIT',\n        WRITE_PROTECT = 'WRITE_PROTECT'\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedDataset$ReadWriteOptions\n     */\n    export interface ReadWriteOptions {\n        defaultReadOrdering: DatasetOrdering;\n        forceSingleOutputFile: boolean;\n        preserveOrder: boolean;\n        singleOutputFileBaseName: string;\n        writeBuckets: number;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedDataset$RemoteFiles\n     */\n    export interface RemoteFiles {\n        alwaysCheckSync: boolean;\n        sources: SerializedDataset.RemoteFilesSource[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.coremodel.SerializedDataset$FlowOptions\n     */\n    export interface FlowOptions {\n        crossProjectBuildBehavior: SerializedDataset.CrossProjectBuildBehaviour;\n        dateBlacklist: string;\n        flowEpoch: string;\n        rebuildBehavior: SerializedDataset.RebuildBehavior;\n        virtualizable: boolean;\n    }\n}","import {BinningMode} from './../../models/binning-mode';\nimport {BoxPlotFragment} from './../fragments/box-plot-fragment';\nimport {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Filter} from './../../../compute/filtering/filter';\nimport {Variable} from './../../models/variable';\nimport {_BivariateCard} from './../bivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateBoxPlotCard\n */\nexport interface BivariateBoxPlotCard extends _BivariateCard {\n    binningMode: BinningMode;\n    customBinningBoundaries: number[];\n    groupOthers: boolean;\n    maxValues: number;\n\n    // PolyJson type\n    type: 'bivariate_box_plot';\n}\n\nexport function isBivariateBoxPlotCard(toTest: Card): toTest is BivariateBoxPlotCard { return 'bivariate_box_plot' === toTest.type; }\n\nexport namespace BivariateBoxPlotCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateBoxPlotCard$BivariateBoxPlotCardResult\n     */\n    export interface BivariateBoxPlotCardResult extends _CardResult {\n        aggregatedVariable: Variable;\n        axisVals: Filter[];\n        axisVariable: Variable;\n        boxPlots: BoxPlotFragment[];\n\n        // PolyJson type\n        type: 'bivariate_box_plot';\n    }\n\n    export function isBivariateBoxPlotCardResult(toTest: CardResult): toTest is BivariateBoxPlotCardResult { return 'bivariate_box_plot' === toTest.type; }\n}","import {Abstract2SampTestCard, _Abstract2SampTestCard} from './common/abstract2-samp-test-card';\nimport {CardResult} from './card-result';\nimport {Card} from './card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.MoodTest2SampCard\n */\nexport interface MoodTest2SampCard extends _Abstract2SampTestCard {\n    // PolyJson type\n    type: 'mood_test_2samp';\n}\n\nexport function isMoodTest2SampCard(toTest: Card): toTest is MoodTest2SampCard { return 'mood_test_2samp' === toTest.type; }\n\nexport namespace MoodTest2SampCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.MoodTest2SampCard$MoodTest2SampCardResult\n     */\n    export interface MoodTest2SampCardResult extends Abstract2SampTestCard._Abstract2SampTestCardResult {\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'mood_test_2samp';\n    }\n\n    export function isMoodTest2SampCardResult(toTest: CardResult): toTest is MoodTest2SampCardResult { return 'mood_test_2samp' === toTest.type; }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Quantiles} from './../../../compute/computations/univariate/quantiles';\nimport {_UnivariateCard} from './../univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.QuantilesTableCard\n */\nexport interface QuantilesTableCard extends _UnivariateCard {\n    confidenceLevel: number;\n    customFreqs?: number[] | null;\n    showConfidenceInterval: boolean;\n\n    // PolyJson type\n    type: 'quantile_table';\n}\n\nexport function isQuantilesTableCard(toTest: Card): toTest is QuantilesTableCard { return 'quantile_table' === toTest.type; }\n\nexport namespace QuantilesTableCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.QuantilesTableCard$QuantilesTableCardResult\n     */\n    export interface QuantilesTableCardResult extends _CardResult {\n        quantiles: Quantiles.QuantileDesc[];\n\n        // PolyJson type\n        type: 'quantile_table';\n    }\n\n    export function isQuantilesTableCardResult(toTest: CardResult): toTest is QuantilesTableCardResult { return 'quantile_table' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {Curve} from './../../curves/curve';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.bivariate.FitCurve\n */\nexport interface FitCurve extends Computation._BivariateComputation {\n    curve: Curve;\n\n    // PolyJson type\n    type: 'fit_curve';\n}\n\nexport function isFitCurve(toTest: Computation): toTest is FitCurve { return 'fit_curve' === toTest.type; }\n\nexport namespace FitCurve {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.FitCurve$FitCurveResult\n     */\n    export interface FitCurveResult extends _AvailableResult {\n        parametrized: Curve.ParametrizedCurve;\n        plot: FitCurve.PlotData;\n        scores: FitCurve.ScoreData;\n\n        // PolyJson type\n        type: 'fit_curve';\n    }\n\n    export function isFitCurveResult(toTest: ComputationResult): toTest is FitCurveResult { return 'fit_curve' === toTest.type; }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.FitCurve$ScoreData\n     */\n    export interface ScoreData {\n        r2: number;\n        rmse: number;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.bivariate.FitCurve$PlotData\n     */\n    export interface PlotData {\n        x: number[];\n        y: number[];\n    }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Filter} from './../../../compute/filtering/filter';\nimport {_Abstract2DPivotCard} from './abstract2-dpivot-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHistogramCard\n */\nexport interface BivariateHistogramCard extends _Abstract2DPivotCard {\n    highlightFilter?: Filter | null;\n\n    // PolyJson type\n    type: 'bivariate_histogram';\n}\n\nexport function isBivariateHistogramCard(toTest: Card): toTest is BivariateHistogramCard { return 'bivariate_histogram' === toTest.type; }\n\nexport namespace BivariateHistogramCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHistogramCard$BivariateHistogramData\n     */\n    export interface BivariateHistogramData {\n        counts: number[];\n        highlightedCounts?: number[] | null;\n        xBins: Filter[];\n        yBins: Filter[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHistogramCard$BivariateHistogramCardResult\n     */\n    export interface BivariateHistogramCardResult extends _CardResult {\n        histogram: BivariateHistogramCard.BivariateHistogramData;\n\n        // PolyJson type\n        type: 'bivariate_histogram';\n    }\n\n    export function isBivariateHistogramCardResult(toTest: CardResult): toTest is BivariateHistogramCardResult { return 'bivariate_histogram' === toTest.type; }\n}","import {BoxPlotFragment} from './fragments/box-plot-fragment';\nimport {CardResult, _CardResult} from './card-result';\nimport {Card} from './card';\nimport {_UnivariateCard} from './univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.TZTest1SampCard\n */\nexport interface TZTest1SampCard extends _UnivariateCard {\n    confidenceLevel: number;\n    hypothesizedMean: number;\n    knownStdDev?: number | null;\n\n    // PolyJson type\n    type: 'ttest_ztest_1samp';\n}\n\nexport function isTZTest1SampCard(toTest: Card): toTest is TZTest1SampCard { return 'ttest_ztest_1samp' === toTest.type; }\n\nexport namespace TZTest1SampCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.TZTest1SampCard$TZTest1SampCardResult\n     */\n    export interface TZTest1SampCardResult extends _CardResult {\n        boxPlot: BoxPlotFragment;\n        dof?: number | null;\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'ttest_ztest_1samp';\n    }\n\n    export function isTZTest1SampCardResult(toTest: CardResult): toTest is TZTest1SampCardResult { return 'ttest_ztest_1samp' === toTest.type; }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {Filter} from './../../../compute/filtering/filter';\nimport {_Abstract2DPivotCard} from './abstract2-dpivot-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.MosaicPlotCard\n */\nexport interface MosaicPlotCard extends _Abstract2DPivotCard {\n    highlightFilter?: Filter | null;\n\n    // PolyJson type\n    type: 'mosaic_plot';\n}\n\nexport function isMosaicPlotCard(toTest: Card): toTest is MosaicPlotCard { return 'mosaic_plot' === toTest.type; }\n\nexport namespace MosaicPlotCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.MosaicPlotCard$MosaicPlotData\n     */\n    export interface MosaicPlotData {\n        counts: number[];\n        highlightedYPercentages?: number[] | null;\n        totalCount: number;\n        xPercentages: number[];\n        xVals: Filter[];\n        yPercentages: number[];\n        yVals: Filter[];\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.MosaicPlotCard$MosaicPlotCardResult\n     */\n    export interface MosaicPlotCardResult extends _CardResult {\n        mosaic: MosaicPlotCard.MosaicPlotData;\n\n        // PolyJson type\n        type: 'mosaic_plot';\n    }\n\n    export function isMosaicPlotCardResult(toTest: CardResult): toTest is MosaicPlotCardResult { return 'mosaic_plot' === toTest.type; }\n}","import {Grouping, _Grouping} from './grouping';\nimport {GroupingResult, _GroupingResult} from './grouping-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.grouping.MergeGrouping\n */\nexport interface MergeGrouping extends _Grouping {\n    innerGrouping: Grouping;\n\n    // PolyJson type\n    type: 'merge';\n}\n\nexport function isMergeGrouping(toTest: Grouping): toTest is MergeGrouping { return 'merge' === toTest.type; }\n\nexport namespace MergeGrouping {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.grouping.MergeGrouping$MergeGroupingResult\n     */\n    export interface MergeGroupingResult extends _GroupingResult {\n        innerGroupingResult: GroupingResult;\n\n        // PolyJson type\n        type: 'merge';\n    }\n\n    export function isMergeGroupingResult(toTest: GroupingResult): toTest is MergeGroupingResult { return 'merge' === toTest.type; }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {SummaryCardBuilder} from './../common/summary-card-builder';\nimport {_UnivariateCard} from './../univariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateSummaryStatsCard\n */\nexport interface UnivariateSummaryStatsCard extends _UnivariateCard {\n    compute: UnivariateSummaryStatsCard.StatsToCompute;\n    confidenceLevel: number;\n    showConfidenceInterval: boolean;\n\n    // PolyJson type\n    type: 'univariate_summary';\n}\n\nexport function isUnivariateSummaryStatsCard(toTest: Card): toTest is UnivariateSummaryStatsCard { return 'univariate_summary' === toTest.type; }\n\nexport namespace UnivariateSummaryStatsCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateSummaryStatsCard$StatsToCompute\n     */\n    export interface StatsToCompute {\n        completeCount: boolean;\n        distinctCount: boolean;\n        iqr: boolean;\n        kurtosis: boolean;\n        max: boolean;\n        mean: boolean;\n        median: boolean;\n        min: boolean;\n        mode: boolean;\n        nbEmpty: boolean;\n        nbNonEmpty: boolean;\n        nonZeroRatio: boolean;\n        range: boolean;\n        sem: boolean;\n        skewness: boolean;\n        std: boolean;\n        sum: boolean;\n        totalCount: boolean;\n        variance: boolean;\n        zeroCount: boolean;\n        zeroRatio: boolean;\n    }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateSummaryStatsCard$UnivariateSummaryStatsCardResult\n     */\n    export interface UnivariateSummaryStatsCardResult extends _CardResult {\n        stats: SummaryCardBuilder.ComputedStat[];\n\n        // PolyJson type\n        type: 'univariate_summary';\n    }\n\n    export function isUnivariateSummaryStatsCardResult(toTest: CardResult): toTest is UnivariateSummaryStatsCardResult { return 'univariate_summary' === toTest.type; }\n}","import {CardResult, _CardResult} from './../card-result';\nimport {Card} from './../card';\nimport {SummaryCardBuilder} from './../common/summary-card-builder';\nimport {_BivariateCard} from './../bivariate-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateSummaryStatsCard\n */\nexport interface BivariateSummaryStatsCard extends _BivariateCard {\n    compute: BivariateSummaryStatsCard.StatsToCompute;\n    confidenceLevel: number;\n    showConfidenceInterval: boolean;\n\n    // PolyJson type\n    type: 'bivariate_summary';\n}\n\nexport function isBivariateSummaryStatsCard(toTest: Card): toTest is BivariateSummaryStatsCard { return 'bivariate_summary' === toTest.type; }\n\nexport namespace BivariateSummaryStatsCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateSummaryStatsCard$BivariateSummaryStatsCardResult\n     */\n    export interface BivariateSummaryStatsCardResult extends _CardResult {\n        stats: SummaryCardBuilder.ComputedStat[];\n\n        // PolyJson type\n        type: 'bivariate_summary';\n    }\n\n    export function isBivariateSummaryStatsCardResult(toTest: CardResult): toTest is BivariateSummaryStatsCardResult { return 'bivariate_summary' === toTest.type; }\n\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateSummaryStatsCard$StatsToCompute\n     */\n    export interface StatsToCompute {\n        completeCount: boolean;\n        covariance: boolean;\n        kendallTau: boolean;\n        mutualInformation: boolean;\n        pearson: boolean;\n        spearman: boolean;\n        totalCount: boolean;\n    }\n}","import {IsotonicCurve} from './isotonic-curve';\nimport {PolynomialCurve} from './polynomial-curve';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.curves.Curve\n */\nexport interface _Curve {}\n\nexport type Curve = IsotonicCurve | PolynomialCurve;\n\nexport namespace Curve {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.curves.Curve$ParametrizedCurve\n     */\n    export interface _ParametrizedCurve {}\n\n    export type ParametrizedCurve = IsotonicCurve.ParametrizedIsotonicCurve | PolynomialCurve.ParametrizedPolynomialCurve;\n\n    export function isParametrizedCurve(toTest: Curve.ParametrizedCurve): toTest is ParametrizedCurve { return [\"isotonic\" , \"polynomial\"].includes(toTest.type); }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Normal\n */\nexport interface Normal extends _Distribution {\n    // PolyJson type\n    type: 'normal';\n}\n\nexport function isNormal(toTest: Distribution): toTest is Normal { return 'normal' === toTest.type; }\n\nexport namespace Normal {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Normal$FittedNormal\n     */\n    export interface FittedNormal extends Distribution._FittedDistribution {\n        mean: number;\n        std: number;\n\n        // PolyJson type\n        type: 'normal';\n    }\n\n    export function isFittedNormal(toTest: Distribution.FittedDistribution): toTest is FittedNormal { return 'normal' === toTest.type; }\n}","import {ComputationResult} from './../computation-result';\nimport {Computation} from './../computation';\nimport {_AvailableResult} from './../available-result';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.computations.univariate.Shapiro\n */\nexport interface Shapiro extends Computation._UnivariateComputation {\n    // PolyJson type\n    type: 'shapiro';\n}\n\nexport function isShapiro(toTest: Computation): toTest is Shapiro { return 'shapiro' === toTest.type; }\n\nexport namespace Shapiro {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.computations.univariate.Shapiro$ShapiroResult\n     */\n    export interface ShapiroResult extends _AvailableResult {\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'shapiro';\n    }\n\n    export function isShapiroResult(toTest: ComputationResult): toTest is ShapiroResult { return 'shapiro' === toTest.type; }\n}","import {Abstract2SampTestCard, _Abstract2SampTestCard} from './common/abstract2-samp-test-card';\nimport {CardResult} from './card-result';\nimport {Card} from './card';\nimport {EmpiricalCDF} from './../../compute/computations/univariate/empirical-cdf';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.KsTest2SampCard\n */\nexport interface KsTest2SampCard extends _Abstract2SampTestCard {\n    // PolyJson type\n    type: 'ks_test_2samp';\n}\n\nexport function isKsTest2SampCard(toTest: Card): toTest is KsTest2SampCard { return 'ks_test_2samp' === toTest.type; }\n\nexport namespace KsTest2SampCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.KsTest2SampCard$KsTest2SampCardResult\n     */\n    export interface KsTest2SampCardResult extends Abstract2SampTestCard._Abstract2SampTestCardResult {\n        cdf1: EmpiricalCDF.EmpiricalCDFResult;\n        cdf2: EmpiricalCDF.EmpiricalCDFResult;\n        pvalue: number;\n        statistic: number;\n\n        // PolyJson type\n        type: 'ks_test_2samp';\n    }\n\n    export function isKsTest2SampCardResult(toTest: CardResult): toTest is KsTest2SampCardResult { return 'ks_test_2samp' === toTest.type; }\n}","import {AbstractHeaderCard, _AbstractHeaderCard} from './../common/abstract-header-card';\nimport {CardResult} from './../card-result';\nimport {Card} from './../card';\n\nexport namespace UnivariateHeaderCard {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateHeaderCard$UnivariateHeaderCardResult\n     */\n    export interface UnivariateHeaderCardResult extends AbstractHeaderCard._AbstractHeaderCardResult {\n        // PolyJson type\n        type: 'univariate_header';\n    }\n\n    export function isUnivariateHeaderCardResult(toTest: CardResult): toTest is UnivariateHeaderCardResult { return 'univariate_header' === toTest.type; }\n}\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateHeaderCard\n */\nexport interface UnivariateHeaderCard extends _AbstractHeaderCard {\n    showBoxPlot: boolean;\n    showFrequencyTable: boolean;\n    showHistogram: boolean;\n    showQuantile: boolean;\n    showSummary: boolean;\n\n    // PolyJson type\n    type: 'univariate_header';\n}\n\nexport function isUnivariateHeaderCard(toTest: Card): toTest is UnivariateHeaderCard { return 'univariate_header' === toTest.type; }","import {BivariateHeaderCard} from './../bivariate_header/bivariate-header-card';\nimport {Card, _Card} from './../card';\nimport {CardResult, _CardResult} from './../card-result';\nimport {ColumnCard} from './column-card';\nimport {UnivariateHeaderCard} from './../univariate_header/univariate-header-card';\nimport {WorksheetRootCard} from './../worksheet-root-card';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.common.AbstractCardContainer\n */\nexport interface _AbstractCardContainer extends _Card {\n    cards: Card[];\n}\n\nexport type AbstractCardContainer = BivariateHeaderCard | WorksheetRootCard | UnivariateHeaderCard | ColumnCard;\n\nexport function isAbstractCardContainer(toTest: Card): toTest is AbstractCardContainer { return [\"bivariate_header\" , \"worksheet_root\" , \"univariate_header\" , \"column_card\"].includes(toTest.type); }\n\nexport namespace AbstractCardContainer {\n    /**\n     * Generated from com.dataiku.dip.eda.worksheets.cards.common.AbstractCardContainer$AbstractCardContainerResult\n     */\n    export interface _AbstractCardContainerResult extends _CardResult {\n        results: CardResult[];\n    }\n\n    export type AbstractCardContainerResult = UnivariateHeaderCard.UnivariateHeaderCardResult | BivariateHeaderCard.BivariateHeaderCardResult | WorksheetRootCard.WorksheetRootCardResult | ColumnCard.ColumnCardResult;\n\n    export function isAbstractCardContainerResult(toTest: CardResult): toTest is AbstractCardContainerResult { return [\"univariate_header\" , \"bivariate_header\" , \"worksheet_root\" , \"column_card\"].includes(toTest.type); }\n}","import {Distribution, _Distribution} from './distribution';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.distributions.Triangular\n */\nexport interface Triangular extends _Distribution {\n    // PolyJson type\n    type: 'triangular';\n}\n\nexport function isTriangular(toTest: Distribution): toTest is Triangular { return 'triangular' === toTest.type; }\n\nexport namespace Triangular {\n    /**\n     * Generated from com.dataiku.dip.eda.compute.distributions.Triangular$FittedTriangular\n     */\n    export interface FittedTriangular extends Distribution._FittedDistribution {\n        a: number;\n        b: number;\n        c: number;\n\n        // PolyJson type\n        type: 'triangular';\n    }\n\n    export function isFittedTriangular(toTest: Distribution.FittedDistribution): toTest is FittedTriangular { return 'triangular' === toTest.type; }\n}","import {Card, _Card} from './card';\nimport {CorrelationMatrixCard} from './correlation-matrix-card';\nimport {PCACard} from './pcacard';\nimport {Variable} from './../models/variable';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.MultivariateCard\n */\nexport interface _MultivariateCard extends _Card {\n    columns: Variable[];\n}\n\nexport type MultivariateCard = PCACard | CorrelationMatrixCard;\n\nexport function isMultivariateCard(toTest: Card): toTest is MultivariateCard { return [\"pca\" , \"correlation_matrix\"].includes(toTest.type); }","import {BivariateBoxPlotCard} from './bivariate_header/bivariate-box-plot-card';\nimport {BivariateFrequencyTableCard} from './bivariate_header/bivariate-frequency-table-card';\nimport {BivariateHistogramCard} from './bivariate_header/bivariate-histogram-card';\nimport {BivariateSummaryStatsCard} from './bivariate_header/bivariate-summary-stats-card';\nimport {Card, _Card} from './card';\nimport {Chi2IndTestCard} from './chi2-ind-test-card';\nimport {Fit2DDistributionCard} from './fit2-ddistribution-card';\nimport {FitCurveCard} from './fit-curve-card';\nimport {KsTest2SampCard} from './ks-test2-samp-card';\nimport {MoodTest2SampCard} from './mood-test2-samp-card';\nimport {MoodTestNSampCard} from './mood-test-nsamp-card';\nimport {MosaicPlotCard} from './bivariate_header/mosaic-plot-card';\nimport {OneWayANOVACard} from './one-way-anovacard';\nimport {PairwiseMoodTestCard} from './pairwise-mood-test-card';\nimport {PairwiseTTestCard} from './pairwise-ttest-card';\nimport {ScatterPlotCard} from './bivariate_header/scatter-plot-card';\nimport {TTest2SampCard} from './ttest2-samp-card';\nimport {Variable} from './../models/variable';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.BivariateCard\n */\nexport interface _BivariateCard extends _Card {\n    xColumn: Variable;\n    yColumn: Variable;\n}\n\nexport type BivariateCard = MosaicPlotCard | Chi2IndTestCard | Fit2DDistributionCard | PairwiseMoodTestCard | MoodTestNSampCard | ScatterPlotCard | BivariateSummaryStatsCard | BivariateFrequencyTableCard | OneWayANOVACard | PairwiseTTestCard | TTest2SampCard | MoodTest2SampCard | BivariateHistogramCard | KsTest2SampCard | BivariateBoxPlotCard | FitCurveCard;\n\nexport function isBivariateCard(toTest: Card): toTest is BivariateCard { return [\"mosaic_plot\" , \"chi2_independence_test\" , \"fit_2d_distribution\" , \"pairwise_mood\" , \"mood_nsamp\" , \"scatter_plot\" , \"bivariate_summary\" , \"bivariate_frequency_table\" , \"oneway_anova\" , \"pairwise_ttest\" , \"ttest_2samp\" , \"mood_test_2samp\" , \"bivariate_histogram\" , \"ks_test_2samp\" , \"bivariate_box_plot\" , \"fit_curve\"].includes(toTest.type); }","import {Card, _Card} from './card';\nimport {CategoricalHistogramCard} from './univariate_header/categorical-histogram-card';\nimport {FitDistributionCard} from './fit-distribution-card';\nimport {NumericalHistogramCard} from './univariate_header/numerical-histogram-card';\nimport {QuantilesTableCard} from './univariate_header/quantiles-table-card';\nimport {ShapiroNormalityTestCard} from './shapiro-normality-test-card';\nimport {SignTest1SampCard} from './sign-test1-samp-card';\nimport {TZTest1SampCard} from './tztest1-samp-card';\nimport {UnivariateFrequencyTableCard} from './univariate_header/univariate-frequency-table-card';\nimport {UnivariateSummaryStatsCard} from './univariate_header/univariate-summary-stats-card';\nimport {Variable} from './../models/variable';\n\n/**\n * Generated from com.dataiku.dip.eda.worksheets.cards.UnivariateCard\n */\nexport interface _UnivariateCard extends _Card {\n    column: Variable;\n}\n\nexport type UnivariateCard = SignTest1SampCard | CategoricalHistogramCard | ShapiroNormalityTestCard | UnivariateFrequencyTableCard | QuantilesTableCard | UnivariateSummaryStatsCard | NumericalHistogramCard | FitDistributionCard | TZTest1SampCard;\n\nexport function isUnivariateCard(toTest: Card): toTest is UnivariateCard { return [\"sign_test_1samp\" , \"categorical_histogram\" , \"shapiro\" , \"univariate_frequency_table\" , \"quantile_table\" , \"univariate_summary\" , \"numerical_histogram\" , \"fit_distribution\" , \"ttest_ztest_1samp\"].includes(toTest.type); }","export const GENERATED_MAPPING = {\n    'com.dataiku.dip.eda.compute.filtering.AnumFilter' : 'AnumFilter',\n    'com.dataiku.dip.eda.compute.computations.univariate.Mean' : 'Mean',\n    'com.dataiku.dip.eda.compute.computations.univariate.Mean$MeanResult' : 'Mean.MeanResult',\n    'com.dataiku.dip.eda.EdaErrorCodes' : 'EdaErrorCodes',\n    'com.dataiku.dip.eda.compute.sampling.Sample' : 'Sample',\n    'com.dataiku.dip.eda.compute.computations.univariate.Kurtosis$KurtosisResult' : 'Kurtosis.KurtosisResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.Kurtosis' : 'Kurtosis',\n    'com.dataiku.dip.dashboards.model.Dashboard$DashboardListItem' : 'Dashboard.DashboardListItem',\n    'com.dataiku.dip.dashboards.model.Dashboard' : 'Dashboard',\n    'com.dataiku.dip.coremodel.ObjectCustomMetadata' : 'ObjectCustomMetadata',\n    'com.dataiku.dip.eda.worksheets.cards.fragments.NumericalHistogramFragment' : 'NumericalHistogramFragment',\n    'com.dataiku.dip.eda.worksheets.models.BinningMode' : 'BinningMode',\n    'com.dataiku.dip.coremodel.ExposedObject' : 'ExposedObject',\n    'com.dataiku.dip.coremodel.ExposedObject$Rule' : 'ExposedObject.Rule',\n    'com.dataiku.dip.eda.worksheets.cards.CorrelationMatrixCard$CorrelationMetric' : 'CorrelationMatrixCard.CorrelationMetric',\n    'com.dataiku.dip.eda.worksheets.cards.CorrelationMatrixCard' : 'CorrelationMatrixCard',\n    'com.dataiku.dip.eda.worksheets.cards.CorrelationMatrixCard$CorrelationMatrixCardResult' : 'CorrelationMatrixCard.CorrelationMatrixCardResult',\n    'com.dataiku.dip.eda.compute.grouping.Grouping' : 'Grouping',\n    'com.dataiku.dip.dashboards.model.ui.EnrichedDashboardPage$InsightAccessState' : 'EnrichedDashboardPage.InsightAccessState',\n    'com.dataiku.dip.eda.compute.computations.univariate.MoodTestNSamp' : 'MoodTestNSamp',\n    'com.dataiku.dip.eda.compute.computations.univariate.MoodTestNSamp$MoodTestNSampResult' : 'MoodTestNSamp.MoodTestNSampResult',\n    'com.dataiku.dip.server.services.TaggableObjectsService$TaggableObject' : 'TaggableObjectsService.TaggableObject',\n    'com.dataiku.dip.server.services.TaggableObjectsService$TaggableListItem' : 'TaggableObjectsService.TaggableListItem',\n    'com.dataiku.dip.server.services.TaggableObjectsService$TaggableObjectRef' : 'TaggableObjectsService.TaggableObjectRef',\n    'com.dataiku.dip.eda.worksheets.queries.InteractiveQuery$InteractiveQueryResult' : 'InteractiveQuery.InteractiveQueryResult',\n    'com.dataiku.dip.eda.worksheets.queries.InteractiveQuery' : 'InteractiveQuery',\n    'com.dataiku.dip.eda.compute.computations.univariate.PairwiseMoodTest' : 'PairwiseMoodTest',\n    'com.dataiku.dip.eda.compute.computations.univariate.PairwiseMoodTest$PairwiseMoodTestResult' : 'PairwiseMoodTest.PairwiseMoodTestResult',\n    'com.dataiku.dip.dashboards.model.TilesGrid' : 'TilesGrid',\n    'com.dataiku.dip.datasets.DatasetSelection' : 'DatasetSelection',\n    'com.dataiku.dip.datasets.DatasetSelection$PartitionSelectionMethod' : 'DatasetSelection.PartitionSelectionMethod',\n    'com.dataiku.dip.coremodel.Checklist' : 'Checklist',\n    'com.dataiku.dip.coremodel.Checklist$ChecklistItem' : 'Checklist.ChecklistItem',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.CategoricalHistogramCard$HistogramData' : 'CategoricalHistogramCard.HistogramData',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.CategoricalHistogramCard$CategoricalHistogramCardResult' : 'CategoricalHistogramCard.CategoricalHistogramCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.CategoricalHistogramCard' : 'CategoricalHistogramCard',\n    'com.dataiku.dip.eda.compute.computations.univariate.EmpiricalCDF' : 'EmpiricalCDF',\n    'com.dataiku.dip.eda.compute.computations.univariate.EmpiricalCDF$EmpiricalCDFResult' : 'EmpiricalCDF.EmpiricalCDFResult',\n    'com.dataiku.dip.eda.worksheets.cards.FitCurveCard$FitCurveCardResult' : 'FitCurveCard.FitCurveCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.FitCurveCard' : 'FitCurveCard',\n    'com.dataiku.dip.coremodel.Schema' : 'Schema',\n    'com.dataiku.dip.eda.compute.filtering.AllFilter' : 'AllFilter',\n    'com.dataiku.dip.server.services.JupyterService$ActiveSession' : 'JupyterService.ActiveSession',\n    'com.dataiku.dip.server.services.JupyterService$JupyterNotebookListEntry' : 'JupyterService.JupyterNotebookListEntry',\n    'com.dataiku.dip.server.services.JupyterService$DisplayKernelSpec' : 'JupyterService.DisplayKernelSpec',\n    'com.dataiku.dip.eda.worksheets.cards.WorksheetRootCard$WorksheetRootCardResult' : 'WorksheetRootCard.WorksheetRootCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.WorksheetRootCard' : 'WorksheetRootCard',\n    'com.dataiku.dip.eda.worksheets.cards.Fit2DDistributionCard' : 'Fit2DDistributionCard',\n    'com.dataiku.dip.eda.worksheets.cards.Fit2DDistributionCard$Fit2DDistributionCardResult' : 'Fit2DDistributionCard.Fit2DDistributionCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.PairwiseMoodTestCard' : 'PairwiseMoodTestCard',\n    'com.dataiku.dip.eda.worksheets.cards.PairwiseMoodTestCard$PairwiseMoodTestCardResult' : 'PairwiseMoodTestCard.PairwiseMoodTestCardResult',\n    'com.dataiku.dip.dataflow.exec.filter.FilterDesc$FilterUiCondition' : 'FilterDesc.FilterUiCondition',\n    'com.dataiku.dip.dataflow.exec.filter.FilterDesc$ExpressionLanguage' : 'FilterDesc.ExpressionLanguage',\n    'com.dataiku.dip.dataflow.exec.filter.FilterDesc' : 'FilterDesc',\n    'com.dataiku.dip.dataflow.exec.filter.FilterDesc$FilterUiData' : 'FilterDesc.FilterUiData',\n    'com.dataiku.dip.coremodel.SchemaColumn' : 'SchemaColumn',\n    'com.dataiku.dip.coremodel.Checklists' : 'Checklists',\n    'com.dataiku.dip.eda.compute.filtering.IntervalFilter$ClosedMode' : 'IntervalFilter.ClosedMode',\n    'com.dataiku.dip.eda.compute.filtering.IntervalFilter' : 'IntervalFilter',\n    'com.dataiku.dip.eda.worksheets.cards.common.AbstractHeaderCard$AbstractHeaderCardResult' : 'AbstractHeaderCard.AbstractHeaderCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.common.AbstractHeaderCard' : 'AbstractHeaderCard',\n    'com.dataiku.dip.eda.compute.computations.univariate.Min$MinResult' : 'Min.MinResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.Min' : 'Min',\n    'com.dataiku.dip.eda.compute.grouping.SubsetGrouping' : 'SubsetGrouping',\n    'com.dataiku.dip.eda.compute.grouping.SubsetGrouping$SubsetGroupingResult' : 'SubsetGrouping.SubsetGroupingResult',\n    'com.dataiku.dip.eda.compute.distributions.Distribution' : 'Distribution',\n    'com.dataiku.dip.eda.compute.distributions.Distribution$FittedDistribution' : 'Distribution.FittedDistribution',\n    'com.dataiku.dip.datasets.Type' : 'Type',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Covariance$CovarianceResult' : 'Covariance.CovarianceResult',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Covariance' : 'Covariance',\n    'com.dataiku.dip.eda.compute.computations.FailedResult' : 'FailedResult',\n    'com.dataiku.dip.eda.worksheets.cards.ShapiroNormalityTestCard' : 'ShapiroNormalityTestCard',\n    'com.dataiku.dip.eda.worksheets.cards.ShapiroNormalityTestCard$ShapiroNormalityTestCardResult' : 'ShapiroNormalityTestCard.ShapiroNormalityTestCardResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.KsTest2Samp$KsTest2SampResult' : 'KsTest2Samp.KsTest2SampResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.KsTest2Samp' : 'KsTest2Samp',\n    'com.dataiku.dip.eda.worksheets.cards.PairwiseTTestCard$PairwiseTTestCardResult' : 'PairwiseTTestCard.PairwiseTTestCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.PairwiseTTestCard' : 'PairwiseTTestCard',\n    'com.dataiku.dip.server.services.ReadOnlyJobsInternalDB$ObjectBuild' : 'ReadOnlyJobsInternalDB.ObjectBuild',\n    'com.dataiku.dip.eda.compute.distributions.Distribution2D$FittedDistribution2D' : 'Distribution2D.FittedDistribution2D',\n    'com.dataiku.dip.eda.compute.distributions.Distribution2D' : 'Distribution2D',\n    'com.dataiku.dip.server.controllers.ProjectsCRUDController$ProjectHead' : 'ProjectsCRUDController.ProjectHead',\n    'com.dataiku.dip.dashboards.model.Insight' : 'Insight',\n    'com.dataiku.dip.dashboards.model.Insight$InsightListItem' : 'Insight.InsightListItem',\n    'com.dataiku.dip.eda.worksheets.cards.PCACard' : 'PCACard',\n    'com.dataiku.dip.eda.worksheets.cards.PCACard$PCACardResult' : 'PCACard.PCACardResult',\n    'com.dataiku.dip.containers.exec.ContainerExecSelection' : 'ContainerExecSelection',\n    'com.dataiku.dip.containers.exec.ContainerExecSelection$ContainerExecMode' : 'ContainerExecSelection.ContainerExecMode',\n    'com.dataiku.dip.eda.compute.computations.univariate.TTest1Samp' : 'TTest1Samp',\n    'com.dataiku.dip.eda.compute.computations.univariate.TTest1Samp$TTest1SampResult' : 'TTest1Samp.TTest1SampResult',\n    'com.dataiku.dip.eda.worksheets.cards.common.AbstractPairwiseTestCard' : 'AbstractPairwiseTestCard',\n    'com.dataiku.dip.eda.worksheets.cards.common.GroupedCompiledCardWrapper$GroupedCardResult' : 'GroupedCompiledCardWrapper.GroupedCardResult',\n    'com.dataiku.dip.datasets.SamplingParam' : 'SamplingParam',\n    'com.dataiku.dip.datasets.SamplingParam$SamplingMethod' : 'SamplingParam.SamplingMethod',\n    'com.dataiku.dip.eda.compute.computations.common.Count' : 'Count',\n    'com.dataiku.dip.eda.compute.computations.common.Count$CountResult' : 'Count.CountResult',\n    'com.dataiku.dip.server.UsabilityComputer$ListSettings' : 'UsabilityComputer.ListSettings',\n    'com.dataiku.dip.server.UsabilityComputer$UsableComputable' : 'UsabilityComputer.UsableComputable',\n    'com.dataiku.dip.server.UsabilityComputer$Usable' : 'UsabilityComputer.Usable',\n    'com.dataiku.dip.server.services.ExploresService$DatasetChart' : 'ExploresService.DatasetChart',\n    'com.dataiku.dip.eda.compute.computations.multivariate.PCA' : 'PCA',\n    'com.dataiku.dip.eda.compute.computations.multivariate.PCA$PCAResult' : 'PCA.PCAResult',\n    'com.dataiku.dip.eda.compute.utils.CompactedArray' : 'CompactedArray',\n    'com.dataiku.dip.eda.worksheets.cards.common.AbstractNSampTestCard' : 'AbstractNSampTestCard',\n    'com.dataiku.dip.eda.worksheets.cards.common.AbstractNSampTestCard$AbstractNSampleTestCardResult' : 'AbstractNSampTestCard.AbstractNSampleTestCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.common.AbstractNSampTestCard$GroupInfo' : 'AbstractNSampTestCard.GroupInfo',\n    'com.dataiku.dip.eda.compute.distributions.Exponential$FittedExponential' : 'Exponential.FittedExponential',\n    'com.dataiku.dip.eda.compute.distributions.Exponential' : 'Exponential',\n    'com.dataiku.dip.eda.worksheets.cards.fragments.BivariateFrequencyTableFragment' : 'BivariateFrequencyTableFragment',\n    'com.dataiku.dip.eda.worksheets.cards.FitDistributionCard' : 'FitDistributionCard',\n    'com.dataiku.dip.eda.worksheets.cards.FitDistributionCard$RequestedDistribution' : 'FitDistributionCard.RequestedDistribution',\n    'com.dataiku.dip.eda.worksheets.cards.FitDistributionCard$SingleFitResult' : 'FitDistributionCard.SingleFitResult',\n    'com.dataiku.dip.eda.worksheets.cards.FitDistributionCard$FitDistributionCardResult' : 'FitDistributionCard.FitDistributionCardResult',\n    'com.dataiku.dip.eda.compute.curves.PolynomialCurve$ParametrizedPolynomialCurve' : 'PolynomialCurve.ParametrizedPolynomialCurve',\n    'com.dataiku.dip.eda.compute.curves.PolynomialCurve' : 'PolynomialCurve',\n    'com.dataiku.dip.eda.compute.distributions.Poisson' : 'Poisson',\n    'com.dataiku.dip.eda.compute.distributions.Poisson$FittedPoisson' : 'Poisson.FittedPoisson',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Spearman$SpearmanResult' : 'Spearman.SpearmanResult',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Spearman' : 'Spearman',\n    'com.dataiku.dip.coremodel.Zone' : 'Zone',\n    'com.dataiku.dip.eda.compute.computations.univariate.Sem' : 'Sem',\n    'com.dataiku.dip.eda.compute.computations.univariate.Sem$SemResult' : 'Sem.SemResult',\n    'com.dataiku.dip.eda.compute.distributions.KDE2D' : 'KDE2D',\n    'com.dataiku.dip.eda.compute.distributions.KDE2D$FittedKDE2D' : 'KDE2D.FittedKDE2D',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$TestDistributionResult' : 'TestDistribution.TestDistributionResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$ProbabilityMassFunction' : 'TestDistribution.ProbabilityMassFunction',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$ProbabilityDensityFunction' : 'TestDistribution.ProbabilityDensityFunction',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$LikelihoodTestsResult' : 'TestDistribution.LikelihoodTestsResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$PlotData' : 'TestDistribution.PlotData',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution' : 'TestDistribution',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$KolmogorovSmirnovTestResult' : 'TestDistribution.KolmogorovSmirnovTestResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$StatTests' : 'TestDistribution.StatTests',\n    'com.dataiku.dip.eda.compute.computations.univariate.TestDistribution$QQPlotData' : 'TestDistribution.QQPlotData',\n    'com.dataiku.dip.eda.compute.grouping.UnionGrouping' : 'UnionGrouping',\n    'com.dataiku.dip.eda.compute.grouping.UnionGrouping$UnionGroupingResult' : 'UnionGrouping.UnionGroupingResult',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHeaderCard$BivariateHeaderCardResult' : 'BivariateHeaderCard.BivariateHeaderCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHeaderCard' : 'BivariateHeaderCard',\n    'com.dataiku.dip.eda.compute.computations.univariate.Skewness$SkewnessResult' : 'Skewness.SkewnessResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.Skewness' : 'Skewness',\n    'com.dataiku.dip.eda.compute.computations.Computation$UnivariateComputation' : 'Computation.UnivariateComputation',\n    'com.dataiku.dip.eda.compute.computations.Computation$BivariateComputation' : 'Computation.BivariateComputation',\n    'com.dataiku.dip.eda.compute.computations.Computation' : 'Computation',\n    'com.dataiku.dip.eda.compute.computations.Computation$MultivariateComputation' : 'Computation.MultivariateComputation',\n    'com.dataiku.dip.eda.compute.distributions.Weibull' : 'Weibull',\n    'com.dataiku.dip.eda.compute.distributions.Weibull$FittedWeibull' : 'Weibull.FittedWeibull',\n    'com.dataiku.dip.server.services.ITaggingService$TaggableType' : 'ITaggingService.TaggableType',\n    'com.dataiku.dip.eda.compute.computations.NotComputedResult' : 'NotComputedResult',\n    'com.dataiku.dip.eda.worksheets.cards.OneWayANOVACard$OneWayANOVACardResult' : 'OneWayANOVACard.OneWayANOVACardResult',\n    'com.dataiku.dip.eda.worksheets.cards.OneWayANOVACard' : 'OneWayANOVACard',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateFrequencyTableCard' : 'UnivariateFrequencyTableCard',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateFrequencyTableCard$UnivariateFrequencyTableCardResult' : 'UnivariateFrequencyTableCard.UnivariateFrequencyTableCardResult',\n    'com.dataiku.dip.eda.compute.filtering.Filter' : 'Filter',\n    'com.dataiku.dip.eda.compute.grouping.BinnedGrouping$BinningMode' : 'BinnedGrouping.BinningMode',\n    'com.dataiku.dip.eda.compute.grouping.BinnedGrouping$BinnedGroupingResult' : 'BinnedGrouping.BinnedGroupingResult',\n    'com.dataiku.dip.eda.compute.grouping.BinnedGrouping' : 'BinnedGrouping',\n    'com.dataiku.dip.eda.compute.distributions.Beta$FittedBeta' : 'Beta.FittedBeta',\n    'com.dataiku.dip.eda.compute.distributions.Beta' : 'Beta',\n    'com.dataiku.dip.eda.compute.computations.univariate.Sum$SumResult' : 'Sum.SumResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.Sum' : 'Sum',\n    'com.dataiku.dip.eda.compute.computations.ComputationResult$ComputationCounts' : 'ComputationResult.ComputationCounts',\n    'com.dataiku.dip.eda.compute.computations.ComputationResult' : 'ComputationResult',\n    'com.dataiku.dip.eda.worksheets.cards.common.HeatmapParams' : 'HeatmapParams',\n    'com.dataiku.dip.eda.compute.computations.common.CountGroups$CountGroupsResult' : 'CountGroups.CountGroupsResult',\n    'com.dataiku.dip.eda.compute.computations.common.CountGroups' : 'CountGroups',\n    'com.dataiku.dip.eda.compute.computations.AvailableResult' : 'AvailableResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.Max' : 'Max',\n    'com.dataiku.dip.eda.compute.computations.univariate.Max$MaxResult' : 'Max.MaxResult',\n    'com.dataiku.dip.server.services.ProjectsService$UIProject' : 'ProjectsService.UIProject',\n    'com.dataiku.dip.eda.compute.grouping.GroupingResult' : 'GroupingResult',\n    'com.dataiku.dip.eda.compute.filtering.MissingValueFilter' : 'MissingValueFilter',\n    'com.dataiku.dip.eda.compute.computations.common.GroupedComputation' : 'GroupedComputation',\n    'com.dataiku.dip.eda.compute.computations.common.GroupedComputation$GroupedComputationResult' : 'GroupedComputation.GroupedComputationResult',\n    'com.dataiku.dip.eda.compute.distributions.Laplace$FittedLaplace' : 'Laplace.FittedLaplace',\n    'com.dataiku.dip.eda.compute.distributions.Laplace' : 'Laplace',\n    'com.dataiku.dip.eda.worksheets.cards.fragments.CountCompleteFragment' : 'CountCompleteFragment',\n    'com.dataiku.dip.eda.worksheets.cards.MoodTestNSampCard' : 'MoodTestNSampCard',\n    'com.dataiku.dip.eda.worksheets.cards.MoodTestNSampCard$MoodTestNSampCardResult' : 'MoodTestNSampCard.MoodTestNSampCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.SignTest1SampCard$SignTest1SampCardResult' : 'SignTest1SampCard.SignTest1SampCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.SignTest1SampCard' : 'SignTest1SampCard',\n    'com.dataiku.dip.eda.compute.computations.bivariate.MutualInformation' : 'MutualInformation',\n    'com.dataiku.dip.eda.compute.computations.bivariate.MutualInformation$MutualInformationResult' : 'MutualInformation.MutualInformationResult',\n    'com.dataiku.dip.eda.compute.distributions.JointNormal' : 'JointNormal',\n    'com.dataiku.dip.eda.compute.distributions.JointNormal$FittedJointNormal' : 'JointNormal.FittedJointNormal',\n    'com.dataiku.dip.eda.compute.computations.multivariate.FetchValues$FetchValuesResult' : 'FetchValues.FetchValuesResult',\n    'com.dataiku.dip.eda.compute.computations.multivariate.FetchValues' : 'FetchValues',\n    'com.dataiku.dip.eda.compute.computations.univariate.OneWayAnova$OneWayAnovaResult' : 'OneWayAnova.OneWayAnovaResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.OneWayAnova' : 'OneWayAnova',\n    'com.dataiku.dip.eda.compute.computations.univariate.Variance' : 'Variance',\n    'com.dataiku.dip.eda.compute.computations.univariate.Variance$VarianceResult' : 'Variance.VarianceResult',\n    'com.dataiku.dip.partitioning.TimeDimension' : 'TimeDimension',\n    'com.dataiku.dip.partitioning.TimeDimension$Period' : 'TimeDimension.Period',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.Abstract2DPivotCard' : 'Abstract2DPivotCard',\n    'com.dataiku.dip.coremodel.SerializedRecipe$SDep' : 'SerializedRecipe.SDep',\n    'com.dataiku.dip.coremodel.SerializedRecipe$RecipeListItem' : 'SerializedRecipe.RecipeListItem',\n    'com.dataiku.dip.coremodel.SerializedRecipe' : 'SerializedRecipe',\n    'com.dataiku.dip.coremodel.SerializedRecipe$InputRole' : 'SerializedRecipe.InputRole',\n    'com.dataiku.dip.coremodel.SerializedRecipe$RecipeInput' : 'SerializedRecipe.RecipeInput',\n    'com.dataiku.dip.coremodel.SerializedRecipe$OutputRole' : 'SerializedRecipe.OutputRole',\n    'com.dataiku.dip.coremodel.SerializedRecipe$RecipeOutput' : 'SerializedRecipe.RecipeOutput',\n    'com.dataiku.dip.eda.worksheets.cards.CardResult$UnavailableCardResult' : 'CardResult.UnavailableCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.CardResult' : 'CardResult',\n    'com.dataiku.dip.eda.worksheets.cards.CardResult$UnavailabilityReason' : 'CardResult.UnavailabilityReason',\n    'com.dataiku.dip.eda.compute.computations.univariate.Quantiles' : 'Quantiles',\n    'com.dataiku.dip.eda.compute.computations.univariate.Quantiles$QuantileDesc' : 'Quantiles.QuantileDesc',\n    'com.dataiku.dip.eda.compute.computations.univariate.Quantiles$QuantilesResult' : 'Quantiles.QuantilesResult',\n    'com.dataiku.dip.eda.compute.filtering.AndFilter' : 'AndFilter',\n    'com.dataiku.dip.eda.compute.sampling.DataSpec' : 'DataSpec',\n    'com.dataiku.dip.dashboards.model.DashboardPage' : 'DashboardPage',\n    'com.dataiku.dip.eda.compute.distributions.Binomial$FittedBinomial' : 'Binomial.FittedBinomial',\n    'com.dataiku.dip.eda.compute.distributions.Binomial' : 'Binomial',\n    'com.dataiku.dip.coremodel.AppManifest' : 'AppManifest',\n    'com.dataiku.dip.coremodel.AppManifest$AppInstancesFeatures' : 'AppManifest.AppInstancesFeatures',\n    'com.dataiku.dip.coremodel.AppManifest$AppInstantiationPermission' : 'AppManifest.AppInstantiationPermission',\n    'com.dataiku.dip.coremodel.AppManifest$AppHomepageSection' : 'AppManifest.AppHomepageSection',\n    'com.dataiku.dip.coremodel.AppManifest$AppUseAsRecipeSettings$RoleMapping' : 'AppManifest.AppUseAsRecipeSettings.RoleMapping',\n    'com.dataiku.dip.coremodel.AppManifest$AppProjectExportManifest' : 'AppManifest.AppProjectExportManifest',\n    'com.dataiku.dip.coremodel.AppManifest$AppUseAsRecipeSettings' : 'AppManifest.AppUseAsRecipeSettings',\n    'com.dataiku.dip.eda.compute.curves.IsotonicCurve$ParametrizedIsotonicCurve' : 'IsotonicCurve.ParametrizedIsotonicCurve',\n    'com.dataiku.dip.eda.compute.curves.IsotonicCurve' : 'IsotonicCurve',\n    'com.dataiku.dip.eda.worksheets.queries.ListMostFrequentValues$ListMostFrequentValuesResult' : 'ListMostFrequentValues.ListMostFrequentValuesResult',\n    'com.dataiku.dip.eda.worksheets.queries.ListMostFrequentValues' : 'ListMostFrequentValues',\n    'com.dataiku.dip.server.services.DatasetNotebookService$NotebookType' : 'DatasetNotebookService.NotebookType',\n    'com.dataiku.dip.server.services.DatasetNotebookService$SimpleNotebook' : 'DatasetNotebookService.SimpleNotebook',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Fit2DDistribution$Fit2DDistributionResult' : 'Fit2DDistribution.Fit2DDistributionResult',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Fit2DDistribution$Density' : 'Fit2DDistribution.Density',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Fit2DDistribution' : 'Fit2DDistribution',\n    'com.dataiku.dip.eda.compute.grouping.AnumGrouping$AnumGroupingResult' : 'AnumGrouping.AnumGroupingResult',\n    'com.dataiku.dip.eda.compute.grouping.AnumGrouping' : 'AnumGrouping',\n    'com.dataiku.dip.eda.worksheets.cards.TTest2SampCard' : 'TTest2SampCard',\n    'com.dataiku.dip.eda.worksheets.cards.TTest2SampCard$TTest2SampCardResult' : 'TTest2SampCard.TTest2SampCardResult',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditFolderTile' : 'AppHomepageTile.EditFolderTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$DownloadReportTile' : 'AppHomepageTile.DownloadReportTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$PropagateSchemaTileBehavior' : 'AppHomepageTile.PropagateSchemaTileBehavior',\n    'com.dataiku.dip.coremodel.AppHomepageTile$DashboardLinkTile' : 'AppHomepageTile.DashboardLinkTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditAnyDatasetTile' : 'AppHomepageTile.EditAnyDatasetTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$GuessTrainDeployTile' : 'AppHomepageTile.GuessTrainDeployTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$AppHomepageTileType' : 'AppHomepageTile.AppHomepageTileType',\n    'com.dataiku.dip.coremodel.AppHomepageTile$DownloadManagedFolderTile' : 'AppHomepageTile.DownloadManagedFolderTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditFSDatasetTile' : 'AppHomepageTile.EditFSDatasetTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$UploadDatasetSetFileTile' : 'AppHomepageTile.UploadDatasetSetFileTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$ManagedFolderSetFileTileBehavior' : 'AppHomepageTile.ManagedFolderSetFileTileBehavior',\n    'com.dataiku.dip.coremodel.AppHomepageTile$PartitionDef' : 'AppHomepageTile.PartitionDef',\n    'com.dataiku.dip.coremodel.AppHomepageTile$ManagedFolderSetFileTile' : 'AppHomepageTile.ManagedFolderSetFileTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$DownloadDashboardTile' : 'AppHomepageTile.DownloadDashboardTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditFSDatasetTileBehavior' : 'AppHomepageTile.EditFSDatasetTileBehavior',\n    'com.dataiku.dip.coremodel.AppHomepageTile$DownloadDatasetTile' : 'AppHomepageTile.DownloadDatasetTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile' : 'AppHomepageTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$VariableDisplayTile' : 'AppHomepageTile.VariableDisplayTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$RunScenarioTile' : 'AppHomepageTile.RunScenarioTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditSQLDatasetTile' : 'AppHomepageTile.EditSQLDatasetTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$UploadDatasetSetFileTileBehavior' : 'AppHomepageTile.UploadDatasetSetFileTileBehavior',\n    'com.dataiku.dip.coremodel.AppHomepageTile$PropagateSchemaTile' : 'AppHomepageTile.PropagateSchemaTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditAnyStreamingEndpointTile' : 'AppHomepageTile.EditAnyStreamingEndpointTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditInlineDatasetTile' : 'AppHomepageTile.EditInlineDatasetTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$ProjectVariablesTile' : 'AppHomepageTile.ProjectVariablesTile',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditFolderTileBehavior' : 'AppHomepageTile.EditFolderTileBehavior',\n    'com.dataiku.dip.coremodel.AppHomepageTile$EditSQLDatasetTileBehavior' : 'AppHomepageTile.EditSQLDatasetTileBehavior',\n    'com.dataiku.dip.coremodel.AppHomepageTile$ProjectVariablesTileBehavior' : 'AppHomepageTile.ProjectVariablesTileBehavior',\n    'com.dataiku.dip.coremodel.AppHomepageTile$ManagedFolderLinkTile' : 'AppHomepageTile.ManagedFolderLinkTile',\n    'com.dataiku.dip.dashboards.model.Tile$TileType' : 'Tile.TileType',\n    'com.dataiku.dip.dashboards.model.Tile$TileResizeImageMode' : 'Tile.TileResizeImageMode',\n    'com.dataiku.dip.dashboards.model.Tile' : 'Tile',\n    'com.dataiku.dip.dashboards.model.Tile$TileClickAction' : 'Tile.TileClickAction',\n    'com.dataiku.dip.dashboards.model.Tile$DisplayTitleMode' : 'Tile.DisplayTitleMode',\n    'com.dataiku.dip.dashboards.model.Tile$Box' : 'Tile.Box',\n    'com.dataiku.dip.dashboards.model.Tile$TileDisplayMode' : 'Tile.TileDisplayMode',\n    'com.dataiku.dip.eda.worksheets.cards.common.SummaryCardBuilder$ComputedStatType' : 'SummaryCardBuilder.ComputedStatType',\n    'com.dataiku.dip.eda.worksheets.cards.common.SummaryCardBuilder$ComputedStat' : 'SummaryCardBuilder.ComputedStat',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Chi2IndTest$Chi2IndTestResult' : 'Chi2IndTest.Chi2IndTestResult',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Chi2IndTest' : 'Chi2IndTest',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.ScatterPlotCard' : 'ScatterPlotCard',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.ScatterPlotCard$ScatterPlotCardResult' : 'ScatterPlotCard.ScatterPlotCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.common.Abstract2SampTestCard' : 'Abstract2SampTestCard',\n    'com.dataiku.dip.eda.worksheets.cards.common.Abstract2SampTestCard$Abstract2SampTestCardResult' : 'Abstract2SampTestCard.Abstract2SampTestCardResult',\n    'com.dataiku.dip.input.DatasetOrdering$DatasetOrderingRule' : 'DatasetOrdering.DatasetOrderingRule',\n    'com.dataiku.dip.input.DatasetOrdering' : 'DatasetOrdering',\n    'com.dataiku.dip.eda.worksheets.models.SplitBySpec' : 'SplitBySpec',\n    'com.dataiku.dip.eda.compute.computations.bivariate.KendallTau$KendallTauResult' : 'KendallTau.KendallTauResult',\n    'com.dataiku.dip.eda.compute.computations.bivariate.KendallTau' : 'KendallTau',\n    'com.dataiku.dip.eda.worksheets.cards.fragments.BoxPlotFragment' : 'BoxPlotFragment',\n    'com.dataiku.dip.coremodel.SerializedProject$ReaderAuthorization$Mode' : 'SerializedProject.ReaderAuthorization.Mode',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectExposedObjects' : 'SerializedProject.ProjectExposedObjects',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectRelocationSettings' : 'SerializedProject.ProjectRelocationSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectWikiSettings' : 'SerializedProject.ProjectWikiSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectSettings' : 'SerializedProject.ProjectSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectSparkEngineCreationSettings' : 'SerializedProject.ProjectSparkEngineCreationSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$LimitsSettings' : 'SerializedProject.LimitsSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectType' : 'SerializedProject.ProjectType',\n    'com.dataiku.dip.coremodel.SerializedProject' : 'SerializedProject',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectHiveEngineCreationSettings' : 'SerializedProject.ProjectHiveEngineCreationSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectIntegration' : 'SerializedProject.ProjectIntegration',\n    'com.dataiku.dip.coremodel.SerializedProject$PermissionItem' : 'SerializedProject.PermissionItem',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectDashboardAuthorizations' : 'SerializedProject.ProjectDashboardAuthorizations',\n    'com.dataiku.dip.coremodel.SerializedProject$FlowDisplaySettings$ZonesGraphRenderingAlgorithm' : 'SerializedProject.FlowDisplaySettings.ZonesGraphRenderingAlgorithm',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectAppType' : 'SerializedProject.ProjectAppType',\n    'com.dataiku.dip.coremodel.SerializedProject$IntegrationsSettings' : 'SerializedProject.IntegrationsSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$SQLLikeRecipeInitializationMode' : 'SerializedProject.SQLLikeRecipeInitializationMode',\n    'com.dataiku.dip.coremodel.SerializedProject$ReaderAuthorization' : 'SerializedProject.ReaderAuthorization',\n    'com.dataiku.dip.coremodel.SerializedProject$FlowBuildSettings' : 'SerializedProject.FlowBuildSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$ProjectImpalaEngineCreationSettings' : 'SerializedProject.ProjectImpalaEngineCreationSettings',\n    'com.dataiku.dip.coremodel.SerializedProject$AdditionalDashboardUsers' : 'SerializedProject.AdditionalDashboardUsers',\n    'com.dataiku.dip.coremodel.SerializedProject$AdditionalDashboardUser' : 'SerializedProject.AdditionalDashboardUser',\n    'com.dataiku.dip.coremodel.SerializedProject$FlowDisplaySettings' : 'SerializedProject.FlowDisplaySettings',\n    'com.dataiku.dip.eda.compute.computations.univariate.ZTest1Samp$ZTest1SampResult' : 'ZTest1Samp.ZTest1SampResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.ZTest1Samp' : 'ZTest1Samp',\n    'com.dataiku.dip.eda.compute.grouping.CrossGrouping$CrossGroupingResult' : 'CrossGrouping.CrossGroupingResult',\n    'com.dataiku.dip.eda.compute.grouping.CrossGrouping' : 'CrossGrouping',\n    'com.dataiku.dip.eda.compute.distributions.LogNormal$FittedLogNormal' : 'LogNormal.FittedLogNormal',\n    'com.dataiku.dip.eda.compute.distributions.LogNormal' : 'LogNormal',\n    'com.dataiku.dip.eda.compute.computations.univariate.FitDistribution$FitDistributionResult' : 'FitDistribution.FitDistributionResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.FitDistribution' : 'FitDistribution',\n    'com.dataiku.dip.eda.compute.stats.PValueAdjustmentMethod' : 'PValueAdjustmentMethod',\n    'com.dataiku.dip.server.datasets.DatasetsCRUDController$DatasetListItem' : 'DatasetsCRUDController.DatasetListItem',\n    'com.dataiku.dip.server.datasets.DatasetsCRUDController$RecipeLink' : 'DatasetsCRUDController.RecipeLink',\n    'com.dataiku.dip.eda.worksheets.cards.MultivariateCard' : 'MultivariateCard',\n    'com.dataiku.dip.eda.compute.computations.univariate.PairwiseTTest$PairwiseTTestResult' : 'PairwiseTTest.PairwiseTTestResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.PairwiseTTest' : 'PairwiseTTest',\n    'com.dataiku.dip.eda.worksheets.cards.Chi2IndTestCard' : 'Chi2IndTestCard',\n    'com.dataiku.dip.eda.worksheets.cards.Chi2IndTestCard$Chi2IndTestCardResult' : 'Chi2IndTestCard.Chi2IndTestCardResult',\n    'com.dataiku.dip.eda.compute.distributions.Pareto' : 'Pareto',\n    'com.dataiku.dip.eda.compute.distributions.Pareto$FittedPareto' : 'Pareto.FittedPareto',\n    'com.dataiku.dip.eda.compute.computations.common.MultiComputation' : 'MultiComputation',\n    'com.dataiku.dip.eda.compute.computations.common.MultiComputation$MultiComputationResult' : 'MultiComputation.MultiComputationResult',\n    'com.dataiku.dip.eda.worksheets.WorksheetsService$WorksheetHead' : 'WorksheetsService.WorksheetHead',\n    'com.dataiku.dip.eda.compute.distributions.NormalMixture$FittedNormalMixture$Component' : 'NormalMixture.FittedNormalMixture.Component',\n    'com.dataiku.dip.eda.compute.distributions.NormalMixture$FittedNormalMixture' : 'NormalMixture.FittedNormalMixture',\n    'com.dataiku.dip.eda.compute.distributions.NormalMixture' : 'NormalMixture',\n    'com.dataiku.dip.eda.compute.computations.common.DummyComputation$DummyComputationResult' : 'DummyComputation.DummyComputationResult',\n    'com.dataiku.dip.eda.compute.computations.common.DummyComputation' : 'DummyComputation',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateFrequencyTableCard' : 'BivariateFrequencyTableCard',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateFrequencyTableCard$BivariateFrequencyTableCardResult' : 'BivariateFrequencyTableCard.BivariateFrequencyTableCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.common.ColumnCard$ColumnCardResult' : 'ColumnCard.ColumnCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.common.ColumnCard' : 'ColumnCard',\n    'com.dataiku.dip.eda.worksheets.cards.BivariateCard' : 'BivariateCard',\n    'com.dataiku.dip.server.datasets.DatasetMetricsStatusService$DatasetSummaryStatus' : 'DatasetMetricsStatusService.DatasetSummaryStatus',\n    'com.dataiku.dip.util.AnyLoc' : 'AnyLoc',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Pearson' : 'Pearson',\n    'com.dataiku.dip.eda.compute.computations.bivariate.Pearson$PearsonResult' : 'Pearson.PearsonResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.SignTest1Samp' : 'SignTest1Samp',\n    'com.dataiku.dip.eda.compute.computations.univariate.SignTest1Samp$SignTest1SampResult' : 'SignTest1Samp.SignTest1SampResult',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.NumericalHistogramCard' : 'NumericalHistogramCard',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.NumericalHistogramCard$NumericalHistogramCardResult' : 'NumericalHistogramCard.NumericalHistogramCardResult',\n    'com.dataiku.dip.coremodel.VersionTag' : 'VersionTag',\n    'com.dataiku.dip.coremodel.VersionTag$VersionTagUser' : 'VersionTag.VersionTagUser',\n    'com.dataiku.dip.eda.worksheets.models.Variable' : 'Variable',\n    'com.dataiku.dip.eda.worksheets.models.Variable$Type' : 'Variable.Type',\n    'com.dataiku.dip.eda.compute.computations.univariate.StdDev' : 'StdDev',\n    'com.dataiku.dip.eda.compute.computations.univariate.StdDev$StdDevResult' : 'StdDev.StdDevResult',\n    'com.dataiku.dip.coremodel.SerializedDataset' : 'SerializedDataset',\n    'com.dataiku.dip.coremodel.SerializedDataset$RemoteFilesSource' : 'SerializedDataset.RemoteFilesSource',\n    'com.dataiku.dip.coremodel.SerializedDataset$SerializedCheck' : 'SerializedDataset.SerializedCheck',\n    'com.dataiku.dip.coremodel.SerializedDataset$CrossProjectBuildBehaviour' : 'SerializedDataset.CrossProjectBuildBehaviour',\n    'com.dataiku.dip.coremodel.SerializedDataset$RebuildBehavior' : 'SerializedDataset.RebuildBehavior',\n    'com.dataiku.dip.coremodel.SerializedDataset$ReadWriteOptions' : 'SerializedDataset.ReadWriteOptions',\n    'com.dataiku.dip.coremodel.SerializedDataset$RemoteFiles' : 'SerializedDataset.RemoteFiles',\n    'com.dataiku.dip.coremodel.SerializedDataset$FlowOptions' : 'SerializedDataset.FlowOptions',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateBoxPlotCard' : 'BivariateBoxPlotCard',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateBoxPlotCard$BivariateBoxPlotCardResult' : 'BivariateBoxPlotCard.BivariateBoxPlotCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.MoodTest2SampCard' : 'MoodTest2SampCard',\n    'com.dataiku.dip.eda.worksheets.cards.MoodTest2SampCard$MoodTest2SampCardResult' : 'MoodTest2SampCard.MoodTest2SampCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.QuantilesTableCard' : 'QuantilesTableCard',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.QuantilesTableCard$QuantilesTableCardResult' : 'QuantilesTableCard.QuantilesTableCardResult',\n    'com.dataiku.dip.eda.compute.computations.bivariate.FitCurve$FitCurveResult' : 'FitCurve.FitCurveResult',\n    'com.dataiku.dip.eda.compute.computations.bivariate.FitCurve$ScoreData' : 'FitCurve.ScoreData',\n    'com.dataiku.dip.eda.compute.computations.bivariate.FitCurve$PlotData' : 'FitCurve.PlotData',\n    'com.dataiku.dip.eda.compute.computations.bivariate.FitCurve' : 'FitCurve',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHistogramCard' : 'BivariateHistogramCard',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHistogramCard$BivariateHistogramData' : 'BivariateHistogramCard.BivariateHistogramData',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateHistogramCard$BivariateHistogramCardResult' : 'BivariateHistogramCard.BivariateHistogramCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.TZTest1SampCard' : 'TZTest1SampCard',\n    'com.dataiku.dip.eda.worksheets.cards.TZTest1SampCard$TZTest1SampCardResult' : 'TZTest1SampCard.TZTest1SampCardResult',\n    'com.dataiku.dip.datasets.DatasetSelectionToMemTable' : 'DatasetSelectionToMemTable',\n    'com.dataiku.dip.server.controllers.StreamingEndpointsController$StreamingEndpointListItem' : 'StreamingEndpointsController.StreamingEndpointListItem',\n    'com.dataiku.dip.eda.compute.computations.UnavailableResult' : 'UnavailableResult',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.MosaicPlotCard$MosaicPlotData' : 'MosaicPlotCard.MosaicPlotData',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.MosaicPlotCard' : 'MosaicPlotCard',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.MosaicPlotCard$MosaicPlotCardResult' : 'MosaicPlotCard.MosaicPlotCardResult',\n    'com.dataiku.dip.partitioning.Dimension' : 'Dimension',\n    'com.dataiku.dip.server.controllers.JupyterController$JupyterNotebookListItem' : 'JupyterController.JupyterNotebookListItem',\n    'com.dataiku.dip.eda.compute.grouping.MergeGrouping$MergeGroupingResult' : 'MergeGrouping.MergeGroupingResult',\n    'com.dataiku.dip.eda.compute.grouping.MergeGrouping' : 'MergeGrouping',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateSummaryStatsCard$StatsToCompute' : 'UnivariateSummaryStatsCard.StatsToCompute',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateSummaryStatsCard$UnivariateSummaryStatsCardResult' : 'UnivariateSummaryStatsCard.UnivariateSummaryStatsCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateSummaryStatsCard' : 'UnivariateSummaryStatsCard',\n    'com.dataiku.dip.eda.worksheets.models.Worksheet' : 'Worksheet',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateSummaryStatsCard' : 'BivariateSummaryStatsCard',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateSummaryStatsCard$BivariateSummaryStatsCardResult' : 'BivariateSummaryStatsCard.BivariateSummaryStatsCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.bivariate_header.BivariateSummaryStatsCard$StatsToCompute' : 'BivariateSummaryStatsCard.StatsToCompute',\n    'com.dataiku.dip.eda.compute.curves.Curve$ParametrizedCurve' : 'Curve.ParametrizedCurve',\n    'com.dataiku.dip.eda.compute.curves.Curve' : 'Curve',\n    'com.dataiku.dip.partitioning.ExactValueDimension' : 'ExactValueDimension',\n    'com.dataiku.dip.datasets.StreamableDatasetSelection' : 'StreamableDatasetSelection',\n    'com.dataiku.dip.server.services.NavigatorService$SavedModelFullInfo' : 'NavigatorService.SavedModelFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$ObjectLink' : 'NavigatorService.ObjectLink',\n    'com.dataiku.dip.server.services.NavigatorService$WorksheetFullInfo' : 'NavigatorService.WorksheetFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$WebAppFullInfo' : 'NavigatorService.WebAppFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$ComputableFullInfo' : 'NavigatorService.ComputableFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$ReportFullInfo' : 'NavigatorService.ReportFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$RecipeFullInfo' : 'NavigatorService.RecipeFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$ModelEvaluationStoreFullInfo' : 'NavigatorService.ModelEvaluationStoreFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$AnalysisFullInfo' : 'NavigatorService.AnalysisFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$TaggableObjectFullInfo' : 'NavigatorService.TaggableObjectFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$ManagedFolderFullInfo' : 'NavigatorService.ManagedFolderFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$DashboardFullInfo' : 'NavigatorService.DashboardFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$ZoneFullInfo' : 'NavigatorService.ZoneFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$NotebookFullInfo' : 'NavigatorService.NotebookFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$InsightFullInfo' : 'NavigatorService.InsightFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$DatasetFullInfo' : 'NavigatorService.DatasetFullInfo',\n    'com.dataiku.dip.server.services.NavigatorService$StreamingEndpointFullInfo' : 'NavigatorService.StreamingEndpointFullInfo',\n    'com.dataiku.dip.eda.compute.filtering.NotFilter' : 'NotFilter',\n    'com.dataiku.dip.eda.compute.distributions.Normal$FittedNormal' : 'Normal.FittedNormal',\n    'com.dataiku.dip.eda.compute.distributions.Normal' : 'Normal',\n    'com.dataiku.dip.eda.compute.computations.univariate.Shapiro$ShapiroResult' : 'Shapiro.ShapiroResult',\n    'com.dataiku.dip.eda.compute.computations.univariate.Shapiro' : 'Shapiro',\n    'com.dataiku.dip.eda.worksheets.cards.KsTest2SampCard$KsTest2SampCardResult' : 'KsTest2SampCard.KsTest2SampCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.KsTest2SampCard' : 'KsTest2SampCard',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateHeaderCard$UnivariateHeaderCardResult' : 'UnivariateHeaderCard.UnivariateHeaderCardResult',\n    'com.dataiku.dip.eda.worksheets.cards.univariate_header.UnivariateHeaderCard' : 'UnivariateHeaderCard',\n    'com.dataiku.dip.eda.worksheets.cards.UnivariateCard' : 'UnivariateCard',\n    'com.dataiku.dip.partitioning.PartitioningScheme' : 'PartitioningScheme',\n    'com.dataiku.dip.coremodel.RecipeEnginesPreferenceConfig' : 'RecipeEnginesPreferenceConfig',\n    'com.dataiku.dip.coremodel.HeadWithVersioningInfo' : 'HeadWithVersioningInfo',\n    'com.dataiku.dip.eda.worksheets.cards.Card' : 'Card',\n    'com.dataiku.dip.eda.worksheets.cards.common.AbstractCardContainer' : 'AbstractCardContainer',\n    'com.dataiku.dip.eda.worksheets.cards.common.AbstractCardContainer$AbstractCardContainerResult' : 'AbstractCardContainer.AbstractCardContainerResult',\n    'com.dataiku.dip.eda.compute.distributions.Triangular$FittedTriangular' : 'Triangular.FittedTriangular',\n    'com.dataiku.dip.eda.compute.distributions.Triangular' : 'Triangular'\n\n};\nexport * from './src/main/java/com/dataiku/dip/eda/compute/filtering/anum-filter';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/mean';\nexport * from './src/main/java/com/dataiku/dip/eda/eda-error-codes';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/sampling/sample';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/kurtosis';\nexport * from './src/main/java/com/dataiku/dip/dashboards/model/dashboard';\nexport * from './src/main/java/com/dataiku/dip/coremodel/object-custom-metadata';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/fragments/numerical-histogram-fragment';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/models/binning-mode';\nexport * from './src/main/java/com/dataiku/dip/coremodel/exposed-object';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/correlation-matrix-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/grouping/grouping';\nexport * from './src/main/java/com/dataiku/dip/dashboards/model/ui/enriched-dashboard-page';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/mood-test-nsamp';\nexport * from './src/main/java/com/dataiku/dip/server/services/taggable-objects-service';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/queries/interactive-query';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/pairwise-mood-test';\nexport * from './src/main/java/com/dataiku/dip/dashboards/model/tiles-grid';\nexport * from './src/main/java/com/dataiku/dip/datasets/dataset-selection';\nexport * from './src/main/java/com/dataiku/dip/coremodel/checklist';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/categorical-histogram-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/empirical-cdf';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/fit-curve-card';\nexport * from './dss-core/src/main/java/com/dataiku/dip/coremodel/schema';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/filtering/all-filter';\nexport * from './src/main/java/com/dataiku/dip/server/services/jupyter-service';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/worksheet-root-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/fit2-ddistribution-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/pairwise-mood-test-card';\nexport * from './dss-core/src/main/java/com/dataiku/dip/dataflow/exec/filter/filter-desc';\nexport * from './dss-core/src/main/java/com/dataiku/dip/coremodel/schema-column';\nexport * from './src/main/java/com/dataiku/dip/coremodel/checklists';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/filtering/interval-filter';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract-header-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/min';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/grouping/subset-grouping';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/distribution';\nexport * from './dss-core/src/main/java/com/dataiku/dip/datasets/type';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/covariance';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/failed-result';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/shapiro-normality-test-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/ks-test2-samp';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/pairwise-ttest-card';\nexport * from './src/main/java/com/dataiku/dip/server/services/read-only-jobs-internal-db';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/distribution2-d';\nexport * from './src/main/java/com/dataiku/dip/server/controllers/projects-crudcontroller';\nexport * from './src/main/java/com/dataiku/dip/dashboards/model/insight';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/pcacard';\nexport * from './src/main/java/com/dataiku/dip/containers/exec/container-exec-selection';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/ttest1-samp';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract-pairwise-test-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/grouped-compiled-card-wrapper';\nexport * from './src/main/java/com/dataiku/dip/datasets/sampling-param';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/common/count';\nexport * from './src/main/java/com/dataiku/dip/server/usability-computer';\nexport * from './src/main/java/com/dataiku/dip/server/services/explores-service';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/multivariate/pca';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/utils/compacted-array';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract-nsamp-test-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/exponential';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/fragments/bivariate-frequency-table-fragment';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/fit-distribution-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/curves/polynomial-curve';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/poisson';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/spearman';\nexport * from './src/main/java/com/dataiku/dip/coremodel/zone';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/sem';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/kde2-d';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/test-distribution';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/grouping/union-grouping';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-header-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/skewness';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/computation';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/weibull';\nexport * from './src/main/java/com/dataiku/dip/server/services/itagging-service';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/not-computed-result';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/one-way-anovacard';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/univariate-frequency-table-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/filtering/filter';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/grouping/binned-grouping';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/beta';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/sum';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/computation-result';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/heatmap-params';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/common/count-groups';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/available-result';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/max';\nexport * from './src/main/java/com/dataiku/dip/server/services/projects-service';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/grouping/grouping-result';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/filtering/missing-value-filter';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/common/grouped-computation';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/laplace';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/fragments/count-complete-fragment';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/mood-test-nsamp-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/sign-test1-samp-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/mutual-information';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/joint-normal';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/multivariate/fetch-values';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/one-way-anova';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/variance';\nexport * from './dss-core/src/main/java/com/dataiku/dip/partitioning/time-dimension';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/abstract2-dpivot-card';\nexport * from './src/main/java/com/dataiku/dip/coremodel/serialized-recipe';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/card-result';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/quantiles';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/filtering/and-filter';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/sampling/data-spec';\nexport * from './src/main/java/com/dataiku/dip/dashboards/model/dashboard-page';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/binomial';\nexport * from './src/main/java/com/dataiku/dip/coremodel/app-manifest';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/curves/isotonic-curve';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/queries/list-most-frequent-values';\nexport * from './src/main/java/com/dataiku/dip/server/services/dataset-notebook-service';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/fit2-ddistribution';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/grouping/anum-grouping';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/ttest2-samp-card';\nexport * from './src/main/java/com/dataiku/dip/coremodel/app-homepage-tile';\nexport * from './src/main/java/com/dataiku/dip/dashboards/model/tile';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/summary-card-builder';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/chi2-ind-test';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/scatter-plot-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract2-samp-test-card';\nexport * from './dss-core/src/main/java/com/dataiku/dip/input/dataset-ordering';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/models/split-by-spec';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/kendall-tau';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/fragments/box-plot-fragment';\nexport * from './src/main/java/com/dataiku/dip/coremodel/serialized-project';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/ztest1-samp';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/grouping/cross-grouping';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/log-normal';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/fit-distribution';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/stats/pvalue-adjustment-method';\nexport * from './src/main/java/com/dataiku/dip/server/datasets/datasets-crudcontroller';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/multivariate-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/pairwise-ttest';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/chi2-ind-test-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/pareto';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/common/multi-computation';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/worksheets-service';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/normal-mixture';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/common/dummy-computation';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-frequency-table-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/column-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate-card';\nexport * from './src/main/java/com/dataiku/dip/server/datasets/dataset-metrics-status-service';\nexport * from './src/main/java/com/dataiku/dip/util/any-loc';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/pearson';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/sign-test1-samp';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/numerical-histogram-card';\nexport * from './src/main/java/com/dataiku/dip/coremodel/version-tag';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/models/variable';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/std-dev';\nexport * from './src/main/java/com/dataiku/dip/coremodel/serialized-dataset';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-box-plot-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/mood-test2-samp-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/quantiles-table-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/bivariate/fit-curve';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-histogram-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/tztest1-samp-card';\nexport * from './src/main/java/com/dataiku/dip/datasets/dataset-selection-to-mem-table';\nexport * from './src/main/java/com/dataiku/dip/server/controllers/streaming-endpoints-controller';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/unavailable-result';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/mosaic-plot-card';\nexport * from './dss-core/src/main/java/com/dataiku/dip/partitioning/dimension';\nexport * from './src/main/java/com/dataiku/dip/server/controllers/jupyter-controller';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/grouping/merge-grouping';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/univariate-summary-stats-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/models/worksheet';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/bivariate_header/bivariate-summary-stats-card';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/curves/curve';\nexport * from './dss-core/src/main/java/com/dataiku/dip/partitioning/exact-value-dimension';\nexport * from './src/main/java/com/dataiku/dip/datasets/streamable-dataset-selection';\nexport * from './src/main/java/com/dataiku/dip/server/services/navigator-service';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/filtering/not-filter';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/normal';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/computations/univariate/shapiro';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/ks-test2-samp-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate_header/univariate-header-card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/univariate-card';\nexport * from './dss-core/src/main/java/com/dataiku/dip/partitioning/partitioning-scheme';\nexport * from './src/main/java/com/dataiku/dip/coremodel/recipe-engines-preference-config';\nexport * from './src/main/java/com/dataiku/dip/coremodel/head-with-versioning-info';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/card';\nexport * from './src/main/java/com/dataiku/dip/eda/worksheets/cards/common/abstract-card-container';\nexport * from './src/main/java/com/dataiku/dip/eda/compute/distributions/triangular';","const CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport function randomId(length: number = 7) {\n    return Array.from({ length }, _ => randomChar()).join('');\n}\n\nexport function randomChar() {\n    return CHARS[Math.floor(Math.random() * CHARS.length)];\n}\n","import { realAny } from 'dku-frontend-core';\n\nexport function dkuDeepCopy<T extends (object | any[])>(src: T, filter?: Function): T {\n    if (Array.isArray(src)) {\n        let s = <realAny[]><realAny>src;\n        let arr = [];\n        for (let i = 0; i < s.length; i++) {\n            arr[i] = dkuDeepCopy(s[i], filter);\n        }\n        return <T><realAny>arr;\n    } else if (isObject(src)) {\n        let obj: realAny = {};\n        dkuForEach(src, (value: realAny, key: realAny) => {\n            if (!filter || filter(key)) {\n                obj[key] = dkuDeepCopy(value, filter);\n            }\n        });\n        return obj;\n    } else {\n        let angularJS = (<realAny>window).angular;\n        return angularJS.copy(src);\n    }\n}\n\nexport function dkuEquals(one: realAny, two: realAny): boolean {\n    let angularJS = (<realAny>window).angular;\n    return angularJS.equals(one, two);\n}\n\n// Mostly used to migrate previous uses of angular.forEach\nexport function dkuForEach(input: object | realAny[], iter: (value: realAny, key: any) => void) {\n    let angularJS = (<realAny>window).angular;\n    return angularJS.forEach(input, iter);\n}\n\nexport function isObject(value: realAny) {\n    return value !== null && typeof value === 'object';\n}\n\nexport function isFunction(value: realAny) {\n    return typeof value === 'function';\n}\n\nexport function isString(value: realAny) {\n    return typeof value === 'string';\n}\n\nexport function dkuExtend(dst: object, o1: object, ...others: object[]) {\n    let angularJS = (<realAny>window).angular;\n    return angularJS.extend(dst, o1, ...others);\n}\n\nexport function mapValues<T>(object: realAny, func: (...args: any[]) => T) {\n    return Object.values(object).map(func);\n}\n\n\nexport function isDefined(object: realAny): boolean {\n    return object !== null && object !== undefined;\n}\n","import { isObject } from '@utils/objects';\nimport { DataikuAPIService } from './dataiku-api.service';\nimport { throwError, Observable, EMPTY } from 'rxjs';\nimport { upgradePromise, EnrichedPromise } from './utils/enriched-promise';\nimport { catchError } from 'rxjs/operators';\nimport { SerializedError } from 'dku-frontend-core';\n\nexport interface RawAPIError {\n    httpCode: number;\n    code?: string;\n    message: string;\n    details?: string;\n    errorType: string;\n}\n\nexport interface EnhancedSerializedError extends SerializedError {\n    httpCode: number;\n}\n\nexport type APIError = RawAPIError | EnhancedSerializedError;\n\nexport function isSerializedError(toTest: any): toTest is SerializedError { \n    return isObject(toTest) &&\n        'errorType' in toTest &&\n        'code' in toTest &&\n        'stackTrace' in toTest;\n}\n\nexport function isEnhancedSerializedError(toTest: APIError): toTest is EnhancedSerializedError { \n    return isSerializedError(toTest) &&\n        'httpCode' in toTest;\n}\n\nexport function isRawAPIError(toTest: any): toTest is RawAPIError {\n    return isObject(toTest) &&\n        'httpCode' in toTest &&\n        'errorType' in toTest;\n}\n\nexport function isAPIError(toTest: any): toTest is APIError {\n    return isEnhancedSerializedError(toTest) || isRawAPIError(toTest);\n}\n\nexport function getErrorDetails(data: any, status: any, headers: any, statusText: string) : APIError {\n    /* Network / HTTP error */\n    if (data == null && status == -1) {\n        return {\n            httpCode: status,\n            message: \"Network error: \" + (statusText === undefined ? \"\" : statusText),\n            errorType: \"XHRNetworkError\"\n        };\n    }\n    if (status == 413) {\n        return {\n            httpCode: status,\n            message: data && data.message || 'No message',\n            details: data && data.details || 'No details',\n            errorType: \"HTTPError413\"\n        };\n    }\n\n    if (data && data.$customMessage) {\n        return {\n            httpCode: status,\n            code: \"0\",\n            message: data.message || \"Unknown error\",\n            details: data.details,\n            errorType: data.errorType || \"unknown\"\n        };\n    }\n\n    const ctype = headers(\"Content-type\");\n    if (ctype && ctype.startsWith(\"application/json\") && data && data.errorType) {\n        return {\n            ...data,\n            httpCode: status\n        };\n    } else {\n        let errorType = \"unknown\";\n        if (status == 502) {\n            errorType = \"Gateway error\";\n        }\n        return {\n            httpCode: status,\n            code: \"0\",\n            message: 'Unknown error',\n            details: data && data.details || 'No details',\n            errorType: errorType\n        };\n    }\n}\n\nexport interface ErrorContext { pushError(error: APIError): void; }\n\nfunction catchAPIErrorFailureAction(errorContext: ErrorContext, rethrowCaught: boolean, err: any) {\n    if (isAPIError(err)) {\n        errorContext.pushError(err);\n        if (rethrowCaught) {\n            return throwError(err);\n        } else {\n            return EMPTY;\n        }\n    } else {\n        return throwError(err);\n    }\n}\n\nexport function catchAPIError<T>(errorContext: ErrorContext, rethrowCaught: boolean = false) {\n    return catchError<T, Observable<T>>(err => catchAPIErrorFailureAction(errorContext, rethrowCaught, err));\n}\n\nexport function upgradePromiseCatchError<T>(promise: EnrichedPromise<T>): Promise<T> {\n    return upgradePromise(promise).catch(\n        error => {\n            const errorDetails: APIError = getErrorDetails(error.data, error.status, error.headers, error.statusText);\n            throw errorDetails;\n        }\n    );\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'formatModality'\n})\nexport class FormatModalityPipe implements PipeTransform {\n    transform(values: string[], quoteValues: boolean = false): string {\n        if (!values) {\n            return '';\n        }\n\n        if (quoteValues) {\n            values = values.map(value => `\"${value}\"`);\n        }\n\n        if (1 === values.length) {\n            return values[0];\n        }\n        return `(${values.join(', ')})`;\n    }\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'plurify'\n})\nexport class PlurifyPipe implements PipeTransform {\n\n    transform(singular: string, num: number, plural?: string): any {\n        plural = typeof(plural) !== 'undefined' ? plural : singular + 's';\n        return num == 1 ? singular : plural; // in english zero uses plural mode (crazy guys)\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'capitalize'\n})\nexport class CapitalizePipe implements PipeTransform {\n\n    transform(input: string): string {\n        if (input && input.length > 0) {\n            return input.charAt(0).toUpperCase() + input.slice(1);\n        } else {\n            return '';\n        }\n    }\n}\n","import { Card, isUnivariateCard, isBivariateCard, isAbstractHeaderCard, isMultivariateCard, isAbstract2SampTestCard, isAbstractNSampTestCard, isShapiroNormalityTestCard, isTZTest1SampCard, isFit2DDistributionCard, isFitCurveCard, isPCACard, isFitDistributionCard, isChi2IndTestCard, isSignTest1SampCard, isWorksheetRootCard, isColumnCard, CardResult, isAbstractCardContainer, Worksheet, isCorrelationMatrixCard, Filter, isAndFilter, isAllFilter, Variable } from 'src/generated-sources';\nimport { FormatModalityPipe } from '@shared/pipes/list-pipes/format-modality.pipe';\nimport { PlurifyPipe } from '@shared/pipes/text-pipes/plurify.pipe';\nimport { assertNever } from 'dku-frontend-core';\nimport { randomId } from '@utils/random';\nimport _ from 'lodash';\nimport deepEqual from 'fast-deep-equal';\nimport { CapitalizePipe } from '@shared/pipes/capitalize.pipe';\nimport produce from 'immer';\nimport { CardWizardVariable } from './card-models';\n\nconst formatModality = new FormatModalityPipe().transform;\nconst plurify = new PlurifyPipe().transform;\nconst capitalize = new CapitalizePipe().transform;\n\n// Short title (without any config-related wordings)\nexport function getBasicCardTitle(card: Card): string {\n    switch (card.type) {\n        case 'bivariate_box_plot':\n            return 'Box Plot';\n        case 'bivariate_frequency_table':\n            return 'Frequency table';\n        case 'bivariate_header':\n            return 'Bivariate analysis';\n        case 'bivariate_histogram':\n            return 'Histogram';\n        case 'bivariate_summary':\n            return 'Summary';\n        case 'categorical_histogram':\n            return 'Histogram';\n        case 'chi2_independence_test':\n            return 'Chi-square independence test';\n        case 'column_card':\n            return 'variable';\n        case 'correlation_matrix':\n            return 'Correlation matrix';\n        case 'fit_2d_distribution':\n            return 'Fit 2D distribution';\n        case 'fit_curve':\n            return 'Fit curve';\n        case 'fit_distribution':\n            return 'Fit distribution';\n        case 'ks_test_2samp':\n            return 'Two-sample Kolmogorov–Smirnov test';\n        case 'mood_nsamp':\n            return 'N-sample Mood test';\n        case 'mood_test_2samp':\n            return 'Two-sample Mood test';\n        case 'mosaic_plot':\n            return 'Mosaic plot';\n        case 'numerical_histogram':\n            return card.showHistogram ? 'Histogram' : 'Box Plot';\n        case 'oneway_anova':\n            return 'One-way ANOVA';\n        case 'pairwise_mood':\n            return 'Pairwise Mood test';\n        case 'pairwise_ttest':\n            return 'Pairwise 𝘵-test';\n        case 'pca':\n            return 'PCA';\n        case 'quantile_table':\n            return 'Quantile table';\n        case 'scatter_plot':\n            return 'Scatter plot';\n        case 'shapiro':\n            return 'Shapiro-Wilk normality test';\n        case 'sign_test_1samp':\n            return 'Sign test';\n        case 'ttest_ztest_1samp':\n            return card.knownStdDev == null ? 'Student 𝘵-test' : 'Z-test';\n        case 'ttest_2samp':\n            return 'Two-sample 𝘵-test';\n        case 'univariate_frequency_table':\n            return 'Frequency table';\n        case 'univariate_header':\n            return 'Univariate analysis';\n        case 'univariate_summary':\n            return 'Summary stats';\n        case 'worksheet_root':\n            return 'Worksheet';\n    }\n}\n\n// Menu title in action menus\nexport function getConfigureCardTitle(card: Card): string {\n    if (isAbstract2SampTestCard(card)\n        || isAbstractNSampTestCard(card)\n        || isShapiroNormalityTestCard(card)\n        || isTZTest1SampCard(card)\n        || isChi2IndTestCard(card)\n        || isSignTest1SampCard(card)) {\n        return 'Configure test…';\n    }\n    if (isFit2DDistributionCard(card)) {\n        return 'Configure distribution…';\n    }\n    if (isFitDistributionCard(card)) {\n        return 'Configure distributions…';\n    }\n    if (isFitCurveCard(card)) {\n        return 'Configure curves…';\n    }\n    if (isPCACard(card)) {\n        return 'Configure PCA…';\n    }\n    return 'Configure ' + getBasicCardTitle(card).toLowerCase() + '…';\n}\n\n// Full title (with config-related wordings)\nexport function getFullCardTitle(card: Card): string {\n    let ret = getBasicCardTitle(card);\n\n    if (!getCardSubtitle(card)) {\n        if (isAbstractHeaderCard(card)) {\n            ret += ` on ${card.xColumns.length} ${plurify('variable', card.xColumns.length)} `;\n        } else if (isMultivariateCard(card)) {\n            ret += ` on ${card.columns.length} ${plurify('variable', card.columns.length)} `;\n        } else if (isUnivariateCard(card)) {\n            ret += ` on ${card.column.name} `;\n        } else if (isBivariateCard(card)) {\n            ret += ` on ${card.xColumn.name} & ${card.yColumn.name} `;\n        }\n    }\n\n    if (isCorrelationMatrixCard(card)) {\n        ret += ' (' + capitalize(card.metric!.toLowerCase()) + ')';\n    }\n\n    if (isCorrelationMatrixCard(card) && card.heatmapParams.filterVariablesWithoutValues) {\n        ret += ' (hiding variables with no value)';\n    }\n\n    return ret;\n}\n\n\n// Sub-title (additional config-related wordings when they are not present in the full title)\nexport function getCardSubtitle(card: Card): string {\n    if (isAbstract2SampTestCard(card)) {\n        let testTarget;\n        switch (card.type) {\n            case 'ks_test_2samp':\n                testTarget = 'distribution';\n                break;\n            case 'mood_test_2samp':\n                testTarget = 'median';\n                break;\n            case 'ttest_2samp':\n                testTarget = 'mean';\n                break;\n            default:\n                assertNever(card);\n        }\n\n        return `Compare ${testTarget} of ${card.xColumn.name} `\n            + `for ${formatModality(card.value1, true)} and ${formatModality(card.value2, true)} `\n            + `from ${card.yColumn.name}`;\n    }\n\n    if (isAbstractNSampTestCard(card)) {\n        let testTarget;\n        switch (card.type) {\n            case 'oneway_anova':\n            case 'pairwise_ttest':\n                testTarget = 'mean';\n                break;\n            case 'pairwise_mood':\n            case 'mood_nsamp':\n                testTarget = 'median';\n                break;\n            default:\n                assertNever(card);\n        }\n\n        if (card.yValues) {\n            return `Compare ${testTarget} of ${card.xColumn.name} `\n                + `for ${formatModality(card.yValues, true)} of ${card.yColumn.name}`;\n        } else {\n            return `Compare ${testTarget} of ${card.xColumn.name} `\n                + `for each ${card.yColumn.name}`;\n        }\n    }\n\n    return '';\n}\n\n/**\n * Produces a user-friendlier filter selecting the same subset of data\n *\n * Filters produced by combining other filters can be dumb. Example:\n * - Histogram card on \"Sex\" + split by \"Survived\"\n * - User clicks on \"Sex: Male\" bar within the \"All\" group\n * => The combined filter is AndFilter(AnumFilter('Sex','Male'), AllFilter())\n * => The simplified filter is just AnumFilter('Sex','Male')\n */\nfunction simplifyFilter(filter: Filter): Filter {\n    if (isAndFilter(filter)) {\n        const innerFilters = [];\n        for (const innerFilter of filter.filters) {\n            const simplifiedInnerFilter = simplifyFilter(innerFilter);\n            if (isAndFilter(simplifiedInnerFilter)) {\n                for (const innerOfSimplified of simplifiedInnerFilter.filters) {\n                    innerFilters.push(innerOfSimplified);\n                }\n            } else {\n                innerFilters.push(simplifiedInnerFilter);\n            }\n        }\n\n        const dedupedFilters = [];\n        outer: for (const innerFilter of innerFilters) {\n            for (const dedupedFilter of dedupedFilters) {\n                if (deepEqual(dedupedFilter, innerFilter)) {\n                    continue outer;\n                }\n            }\n            if (!isAllFilter(innerFilter)) {\n                dedupedFilters.push(innerFilter);\n            }\n        }\n\n        if (dedupedFilters.length === 0) {\n            return { type: 'all' };\n        } else if (dedupedFilters.length === 1) {\n            return dedupedFilters[0];\n        } else {\n            return { type: 'and', filters: dedupedFilters }\n        }\n    }\n    return filter;\n}\n\n/**\n * Return a simplified filter, or null if the filter doesn't filter anything\n */\nexport function noFilterIfAll(filter?: Filter | null): Filter | null {\n    if (!filter) {\n        return null;\n    }\n    filter = simplifyFilter(filter);\n    if (filter.type === 'all') {\n        return null;\n    }\n    return filter;\n}\n\nexport function getNumberOfColumns(card: Card): number {\n    if (isAbstractHeaderCard(card)) {\n        return card.xColumns.length;\n    } else if (isMultivariateCard(card)) {\n        return card.columns.length;\n    } else if (isUnivariateCard(card)) {\n        return 1;\n    } else if (isBivariateCard(card)) {\n        return 2;\n    } else if (isWorksheetRootCard(card) || isColumnCard(card)) {\n        return 0;\n    }\n\n    return assertNever(card);\n}\n\nexport const MAX_HEADER_COLUMNS = 100;\n\nexport const CANNOT_ADD_REASON = {\n    MAX_VARIABLES_EXCEEDED: `Number of variables cannot exceed ${MAX_HEADER_COLUMNS}.`,\n    NO_VARIABLE_SELECTED: 'No variables are selected.',\n    NOT_EXACTLY_ONE: `Exactly 1 variable must be selected.`\n};\n\n\nexport function isFullyComputed(result: CardResult) {\n    if (result.type === 'unavailable') {\n        return result.reason !== CardResult.UnavailabilityReason.NOT_COMPUTED;\n    }\n    return !(result.computationCount > 0 && result.notComputedCount > 0);\n}\n\n\n// Re-generate new card IDs (recursively)\nexport function resetCardIds<T extends Card>(card: T): T {\n    if (isAbstractCardContainer(card)) {\n        card = {\n            ...card,\n            cards: card.cards.map(subCard => resetCardIds(subCard))\n        };\n    }\n    return { ...card, id: randomId() };\n}\n\n// WT1 tracking purpose\nexport function getWorksheetStats(worksheet: Worksheet) {\n    return {\n        sample: {\n            ..._.pick(worksheet.dataSpec.datasetSelection, ['samplingMethod', 'maxRecords', 'targetRatio']),\n            hasFilter: worksheet.dataSpec.datasetSelection.filter && worksheet.dataSpec.datasetSelection.filter.enabled\n        },\n        cards: worksheet.rootCard ? worksheet.rootCard.cards.map(card => {\n            return {\n                type: card.type,\n                split: card.splitBy !== null,\n                nbColumns: getNumberOfColumns(card),\n            };\n        }) : []\n    };\n}\n\nexport function identicalVariableNames(a: Variable, b: Variable) {\n    return a.name === b.name;\n}\n\n\nexport function unselectVariables(vars: CardWizardVariable[]): CardWizardVariable[] {\n    return produce(vars, draft => {\n        draft.map(v => {\n            if (Object.keys(v)) {\n                v.selected = false;\n            }\n            return v;\n        })\n    });\n}\n\nexport function unselectVariable(variable: CardWizardVariable): CardWizardVariable {\n    return produce(variable, draft => {\n        if (Object.keys(draft).length) {\n            draft.selected = false;\n        }\n    });\n}\n","import { TaggableObjectsService } from '@model-main/server/services/taggable-objects-service';\nimport { Worksheet, ITaggingService, Insight, Card, AnyLoc, isAbstractCardContainer } from 'src/generated-sources';\n\nexport function getWorksheetObjectRef(ws: Worksheet): TaggableObjectsService.TaggableObjectRef {\n    return { id: ws.id!, projectKey: ws.projectKey, type: ITaggingService.TaggableType.STATISTICS_WORKSHEET };\n}\n\nexport function getInsightObjectRef(insight: Insight): TaggableObjectsService.TaggableObjectRef {\n    return { id: insight.id!, projectKey: insight.projectKey, type: ITaggingService.TaggableType.INSIGHT };\n}\n\nexport function hasConfidenceLevel(params: Card): params is Card & {\n    showConfidenceInterval: boolean,\n    confidenceLevel: number\n} {\n    return ('confidenceLevel' in params) && ('showConfidenceInterval' in params);\n}\n\nexport function clearHighlightFilter(params: Card): Card {\n    if (isAbstractCardContainer(params)) {\n        params = {\n            ...params,\n            cards: params.cards.map(subParams => clearHighlightFilter(subParams))\n        };\n    }\n    if ('highlightFilter' in params) {\n        params = { ...params, highlightFilter: null };\n    }\n    return params;\n}\n\nexport function resolveSmartName(contextProjectKey: string, datasetSmartName: string): AnyLoc {\n    const chunks = datasetSmartName.split('.');\n    if (chunks.length === 1) {\n        return { projectKey: contextProjectKey, id: chunks[0] };\n    } else if (chunks.length === 2) {\n        return { projectKey: chunks[0], id: chunks[1] };\n    }\n\n    throw new Error('Invalid smart name: ' + datasetSmartName);\n}\n\nexport function toSmartName(contextProjectKey: string, datasetLoc: AnyLoc): string {\n    if (contextProjectKey === datasetLoc.projectKey) {\n        return datasetLoc.id;\n    } else {\n        return `${datasetLoc.projectKey}.${datasetLoc.id}`;\n    }\n}\n\n// A.B (A) -> B\n// A.B (C) -> A.B\n// B (A) -> A.B\nexport function normalizeSmartName(contextProjectKey: string, datasetSmartName: string): string {\n    const loc = resolveSmartName(contextProjectKey, datasetSmartName);\n    return toSmartName(contextProjectKey, loc);\n}\n","import { DatasetSelection, BinningMode } from 'src/generated-sources';\n\nexport const DEFAULT_TAGGABLE_OBJECT_FIELDS = {\n    checklists: { checklists: [] },\n    customFields: {},\n    tags: []\n};\n\nexport const DEFAULT_DATASET_SELECTION_FIELDS = {\n    filter: { enabled: false, distinct: false },\n    ordering: { enabled: false, rules: [] },\n    maxRecords: -1,\n    targetRatio: 0.02,\n    latestPartitionsN: 1,\n    partitionSelectionMethod: DatasetSelection.PartitionSelectionMethod.ALL,\n    maxReadUncompressedBytes: -1,\n    withinFirstN: -1\n};\n\n\nexport const DEFAULT_SPLIT_BY_SPEC = {\n    groupWithAll: true,\n    groupWithOthers: true,\n    maxValues: 5,\n    binningMode: BinningMode.AUTO,\n    customBinningBoundaries: []\n};\n","import { Injectable, Inject } from '@angular/core';\nimport { CurrentRouteService } from '@core/nav/current-route.service';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { DataSpec, SamplingParam, WorksheetRootCard, Worksheet, WorksheetsService, ContainerExecSelection } from 'src/generated-sources';\nimport { Observable, BehaviorSubject, Subject, EMPTY, ReplaySubject, of } from 'rxjs';\nimport { randomId } from '@utils/random';\nimport { catchAPIError, ErrorContext, APIError } from '@core/dataiku-api/api-error';\nimport { fairAny } from 'dku-frontend-core';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { first, switchMap, distinctUntilChanged, map, startWith, shareReplay, mapTo, filter } from 'rxjs/operators';\nimport { resetCardIds } from './card-utils';\nimport { getWorksheetObjectRef, normalizeSmartName, resolveSmartName } from './utils';\nimport { DEFAULT_DATASET_SELECTION_FIELDS, DEFAULT_TAGGABLE_OBJECT_FIELDS } from '@utils/dss-defaults';\n\n@UntilDestroy()\n@Injectable()\nexport class EdaService implements ErrorContext {\n    // Worksheet loc\n    private worksheetLoc$ = new ReplaySubject<{\n        projectKey: string,\n        datasetSmartName: string,\n        worksheetId?: string\n    }>(1);\n\n    // Force-refresh the list of worksheets\n    private refreshListTrigger$ = new Subject<void>();\n\n    // List of worksheets for the current dataset, or undefined if list not (yet) available\n    private worksheetsIfAvailable$: Observable<WorksheetsService.WorksheetHead[] | undefined> =\n        this.worksheetLoc$.pipe(\n            switchMap(worksheetLoc => this.refreshListTrigger$.pipe(mapTo(worksheetLoc), startWith(worksheetLoc))),\n            switchMap(worksheetLoc =>\n                this.DataikuAPI.statistics.list(worksheetLoc.projectKey, worksheetLoc.datasetSmartName)\n                    .pipe(catchAPIError(this), startWith(undefined))\n            ),\n            untilDestroyed(this),\n            shareReplay(1)\n        );\n\n    private error$ = new BehaviorSubject<APIError | undefined>(undefined);\n\n    constructor(\n        private currentRoute: CurrentRouteService,\n        private DataikuAPI: DataikuAPIService,\n        @Inject('$state') private $state: fairAny,\n        @Inject('StringUtils') private StringUtils: fairAny,\n        @Inject('localStorageService') private localStorageService: fairAny\n    ) {\n        this.worksheetLoc$.pipe(\n            filter(worksheetLoc => !worksheetLoc.worksheetId),\n            switchMap(worksheetLoc => {\n                return this.DataikuAPI.statistics\n                    .list(worksheetLoc.projectKey, worksheetLoc.datasetSmartName)\n                    .pipe(catchAPIError(this), map(worksheets => ({ worksheetLoc, worksheets })))\n            }),\n            untilDestroyed(this)\n        ).subscribe(({ worksheetLoc, worksheets }) => {\n            const projectKey = worksheetLoc.projectKey;\n            const datasetName = worksheetLoc.datasetSmartName;\n\n            // Pick lastest worksheet\n            let worksheetId = this.localStorageService.get(this.worksheetLocalStorageKey(projectKey, datasetName)) || undefined;\n\n            // Ignore it if it does not exist anymore\n            if (worksheetId && !worksheets.map(ws => ws.id).includes(worksheetId)) {\n                worksheetId = undefined;\n            }\n            // Pick first worksheet if there is one\n            if (!worksheetId && worksheets.length > 0) {\n                worksheetId = worksheets[0].id;\n            }\n\n            // Goto worksheet (empty placeholder page)\n            this.changeWorksheetId(worksheetId);\n        });\n    }\n\n    setWorksheetLoc(projectKey: string, datasetSmartName: string, worksheetId: string | undefined) {\n        this.worksheetLoc$.next({ projectKey, datasetSmartName, worksheetId });\n    }\n\n    listWorksheets(): Observable<WorksheetsService.WorksheetHead[] | undefined> {\n        return this.worksheetsIfAvailable$;\n    }\n\n    pushError(error?: APIError) {\n        this.error$.next(error);\n    }\n\n    getError(): Observable<APIError | undefined> {\n        return this.error$.pipe(distinctUntilChanged());\n    }\n\n    worksheetLocalStorageKey(projectKey: string, datasetName: string): string {\n        return `${projectKey}.${datasetName}.currentWorksheet`;\n    }\n\n    computeNewStateForId(id: string | null | undefined): string {\n        // four states are used:\n        // projects.project.{datasets|foreigndatasets}.dataset.statistics(.worksheet)?\n        // so, we always remove the final .worksheet and add it as needed\n        const baseStateName = this.$state.current.name.replace(/\\.worksheet$/, '');\n        return id ? baseStateName + '.worksheet' : baseStateName;\n    }\n\n    changeWorksheetId(worksheetId: string | undefined) {\n        const projectKey: string = this.currentRoute.projectKey;\n        const datasetName: string = this.currentRoute.datasetName;\n        const storageKey = this.worksheetLocalStorageKey(projectKey, datasetName);\n        if (worksheetId) {\n            this.localStorageService.set(storageKey, worksheetId);\n        } else {\n            this.localStorageService.remove(storageKey);\n        }\n\n        this.$state.go(this.computeNewStateForId(worksheetId),\n            { projectKey, datasetName, worksheetId }, { location: true });\n    }\n\n    private createWorksheet(\n        projectKey = this.currentRoute.projectKey,\n        datasetSmartName = this.currentRoute.datasetName,\n        rootCard?: WorksheetRootCard,\n        name?: string,\n    ) {\n        return this.worksheetsIfAvailable$.pipe(\n            first(),\n            switchMap(worksheets => {\n                if (!worksheets) {\n                    return EMPTY;\n                }\n                name = this.StringUtils.transmogrify(name || 'Worksheet', worksheets.map(\n                    ws => ws.name\n                ));\n\n                const dataSpec: DataSpec = {\n                    inputDatasetSmartName: normalizeSmartName(projectKey, datasetSmartName),\n                    // based on settings ?\n                    autoRefreshSample: true,\n                    refreshTrigger: 0,\n                    datasetSelection: {\n                        ...DEFAULT_DATASET_SELECTION_FIELDS,\n                        samplingMethod: SamplingParam.SamplingMethod.HEAD_SEQUENTIAL,\n                        maxRecords: 100000\n                    },\n                    containerSelection: {\n                        containerMode: ContainerExecSelection.ContainerExecMode.INHERIT\n                    }\n                };\n\n                if (!rootCard) {\n                    rootCard = {\n                        id: randomId(),\n                        type: 'worksheet_root',\n                        cards: [],\n                        confidenceLevel: 0.95,\n                        showConfidenceInterval: false\n                    };\n                }\n\n                const worksheet: Worksheet = {\n                    ...DEFAULT_TAGGABLE_OBJECT_FIELDS,\n                    projectKey,\n                    dataSpec,\n                    rootCard,\n                    name: name!\n                };\n\n                return this.DataikuAPI.statistics.save(worksheet)\n                    .pipe(catchAPIError(this));\n            })\n        );\n    }\n\n    getDatasetFullInfo() {\n        return this.worksheetLoc$.pipe(\n            switchMap(({ projectKey, datasetSmartName }) => {\n                const datasetLoc = resolveSmartName(projectKey, datasetSmartName);\n                return this.DataikuAPI.datasets.getFullInfo(projectKey, datasetLoc.projectKey, datasetLoc.id)\n            }));\n    }\n\n    newWorksheet() {\n        this.createWorksheet().pipe(untilDestroyed(this)).subscribe(worksheet => {\n            if (worksheet) {\n                const worksheetId = worksheet.id;\n\n                if (worksheetId) {\n                    this.changeWorksheetId(worksheetId);\n                }\n            }\n        });\n    }\n\n    // do we need to replace ids for each card?\n    duplicateWorksheet(\n        projectKey: string,\n        datasetSmartName: string,\n        rootCard: WorksheetRootCard,\n        name: string\n    ) {\n        this.createWorksheet(projectKey, datasetSmartName, resetCardIds(rootCard), name)\n            .pipe(untilDestroyed(this)).subscribe(worksheet => {\n                this.$state.go(this.computeNewStateForId(worksheet.id), {\n                    projectKey,\n                    datasetName: datasetSmartName,\n                    worksheetId: worksheet.id\n                });\n            });\n    }\n\n    deleteWorksheet(worksheet: Worksheet) {\n        this.DataikuAPI.taggableObjects.delete([getWorksheetObjectRef(worksheet)], worksheet.projectKey)\n            .pipe(catchAPIError(this), untilDestroyed(this))\n            .subscribe(() => this.changeWorksheetId(undefined));\n    }\n}\n","<p *ngIf=\"!$root.appConfig.admin && serializedError.fixability == 'THIRD_PARTY_SYSTEM_CONNECTION'\">\n    This error is typically <strong>caused by a connection issue between {{wl.productShortName}} and another system</strong>. Your {{wl.productShortName}} administrator needs to intervene to fix the issue. <a *ngIf=\"$root.appConfig.studioAdminContact\" (click)=\"$root.showAdminContactInfo()\">How to contact your administrator?</a>\n</p>\n\n <p *ngIf=\"$root.appConfig.admin && serializedError.fixability == 'THIRD_PARTY_SYSTEM_CONNECTION'\">\n    This error is typically <strong>caused by a connection issue between {{wl.productShortName}} and another system</strong>. You need to check the connection settings and the health of the third-party system\n</p>\n\n\n<p *ngIf=\"!$root.appConfig.admin  && serializedError.fixability == 'ADMIN_SETTINGS_CONNECTIONS'\">\n    This error is typically <strong>caused by a configuration issue in a connection</strong> (in the administration settings). Your {{wl.productShortName}} administrator needs to intervene to fix the issue. <a *ngIf=\"$root.appConfig.studioAdminContact\" (click)=\"$root.showAdminContactInfo()\">How to contact your administrator?</a>\n</p>\n<p *ngIf=\"$root.appConfig.admin && serializedError.fixability == 'ADMIN_SETTINGS_CONNECTIONS'\">\n    This error is typically <strong>caused by a configuration issue in a connection</strong> (in the administration settings). You need to check the connection settings\n</p>\n\n<p *ngIf=\"!$root.appConfig.admin  && serializedError.fixability == 'ADMIN_SETTINGS_SECURITY'\">\n    This error is typically <strong>caused by a configuration issue in global security settings</strong> (in the administration settings). Your {{wl.productShortName}} administrator needs to intervene to fix the issue. <a *ngIf=\"$root.appConfig.studioAdminContact\" (click)=\"$root.showAdminContactInfo()\">How to contact your administrator?</a>\n</p>\n<p *ngIf=\"$root.appConfig.admin && serializedError.fixability == 'ADMIN_SETTINGS_SECURITY'\">\n    This error is typically <strong>caused by a configuration issue in global security settings</strong> (in the administration settings). You need to check the connection settings\n</p>\n\n<p *ngIf=\"!$root.appConfig.admin  && serializedError.fixability == 'ADMIN_SETTINGS_CONTAINERS'\">\n    This error is typically <strong>caused by a configuration issue in a container configuration</strong> (in the administration settings). Your {{wl.productShortName}} administrator needs to intervene to fix the issue. <a *ngIf=\"$root.appConfig.studioAdminContact\" (click)=\"$root.showAdminContactInfo()\">How to contact your administrator?</a>\n</p>\n<p *ngIf=\"$root.appConfig.admin && serializedError.fixability == 'ADMIN_SETTINGS_CONTAINERS'\">\n    This error is typically <strong>caused by a configuration issue in a container configuration</strong> (in the administration settings). You need to check the container configurations\n</p>\n\n<p *ngIf=\"!$root.appConfig.admin  && serializedError.fixability == 'ADMIN_SETTINGS_CODEENVS'\">\n    This error is typically <strong>caused by a configuration issue in a code env</strong> (in the administration settings). Your {{wl.productShortName}} administrator or the owner of the code env needs to intervene to fix the issue. <a *ngIf=\"$root.appConfig.studioAdminContact\" (click)=\"$root.showAdminContactInfo()\">How to contact your administrator?</a>\n</p>\n\n<p *ngIf=\"$root.appConfig.admin && serializedError.fixability == 'ADMIN_SETTINGS_CODEENVS'\">\n    This error is typically <strong>caused by a configuration issue in a code env</strong> (in the administration settings). You need to check the code env settings\n</p>\n\n<p *ngIf=\"serializedError.fixability == 'ADMIN_SETTINGS_USER_PROFILE'\">\n    This error typically <strong>requires configuration from your {{wl.productShortName}} administrator</strong>. Your {{wl.productShortName}} administrator needs to change your user profile.\n</p>\n\n<p *ngIf=\"serializedError.fixability == 'USER_CONFIG_DATASET'\">\n    This error is typically <strong>caused by a configuration issue in the dataset settings</strong>. You need to modify the affected dataset settings to fix the issue\n</p>\n\n<p *ngIf=\"serializedError.fixability == 'USER_CONFIG'\">\n    This error is typically <strong>caused by a configuration issue</strong>. You need to modify the affected settings to fix the issue\n</p>\n\n<div *ngIf=\"serializedError.fixability == 'USER_CONFIG_OR_BUILD'\">\n    <p style=\"margin-bottom: 0\">This error is typically caused by either:</p>\n    <ul>\n        <li><strong>A dataset configuration issue</strong>. You need to modify the affected settings to fix the issue</li>\n        <li><strong>The dataset needs to be (re)built</strong> (if it is a target in the Flow).</li>\n        <li><strong>Concurrent resampling</strong>. Another user might have set different sampling settings while your worksheet was being computed.</li>\n    </ul>\n</div>\n\n<p *ngIf=\"serializedError.fixability == 'READ_FUTURE_LOG'\">\n    Please read the logs for more information on this error\n</p>\n\n<p *ngIf=\"serializedError.fixability == 'DATA'\">\n    This error is typically <strong>caused by a problem in your data</strong> (i.e. data is invalid). If this data was created by {{wl.productShortName}}, you may need to <strong>rebuild it</strong>.\n</p>\n\n<p *ngIf=\"serializedError.fixability == 'ADMIN_SETTINGS_MISSING_PLUGIN'\">\n    This error is caused by a missing plugin. Please install it or remove elements that use it.\n</p>\n\n<p *ngIf=\"serializedError.fixability == 'MISSING_APP'\">\n    This error is caused by a missing Dataiku App. Please install it or remove elements that use it.\n</p>\n\n<p *ngIf=\"!$root.appConfig.admin && serializedError.fixability == 'ADMIN_INSTALLATION'\">\n    This error is typically <strong>caused by a {{wl.productShortName}} installation issue</strong>. Your administrator needs to intervene to fix the issue.  <a *ngIf=\"$root.appConfig.studioAdminContact\" (click)=\"$root.showAdminContactInfo()\">How to contact your administrator?</a>\n</p>\n\n <p *ngIf=\"$root.appConfig.admin && serializedError.fixability == 'ADMIN_INSTALLATION'\">\n    This error is typically <strong>caused by a {{wl.productShortName}} installation issue</strong>.\n</p>\n\n\n<p *ngIf=\"!$root.appConfig.admin && serializedError.fixability == 'ADMIN_TROUBLESHOOTING'\">\n    This error typically <strong>requires troubleshooting from your {{wl.productShortName}} administrator</strong>. Your {{wl.productShortName}} administrator needs to intervene to fix the issue.  <a *ngIf=\"$root.appConfig.studioAdminContact\" (click)=\"$root.showAdminContactInfo()\">How to contact your administrator?</a>\n</p>\n\n <p *ngIf=\"$root.appConfig.admin && serializedError.fixability == 'ADMIN_TROUBLESHOOTING'\">\n    This error typically <strong>requires troubleshooting</strong>. Please refer to the below documentation for more information or contact Dataiku support.\n</p>\n","import { SerializedError } from 'dku-frontend-core';\nimport { Input, Component, Inject } from '@angular/core';\nimport { fairAny } from 'dku-frontend-core';\n\n@Component({\n    selector: 'error-fixability',\n    templateUrl: './error-fixability.component.html',\n    styleUrls: ['./error-fixability.component.less']\n})\nexport class ErrorFixability {\n    @Input() serializedError: SerializedError;\n\n    constructor(@Inject('$rootScope') public $root: fairAny) {\n\n    }\n\n    get wl(): fairAny {\n        return this.$root.wl;\n    }\n}\n","<pre class=\"smart-log-tail-content\">\n    <span *ngFor=\"let line of smartLogTail.lines; let i = index;\"\n        ng-class=\"{'text-error':  smartLogTail.status[i] == TAIL_STATUS.ERROR, 'text-warning': smartLogTail.status[i] == TAIL_STATUS.WARNING, 'text-success': smartLogTail.status[i] == TAIL_STATUS.SUCCESS}\">\n        {{line}}\n    </span>\n</pre>\n","import { Input, Component } from '@angular/core';\nimport { SmartLogTail } from 'dku-frontend-core';\n\n@Component({\n    selector: 'smart-log-tail',\n    templateUrl: './smart-log-tail.component.html',\n    styleUrls: ['./smart-log-tail.component.less']\n})\nexport class SmartLogTailComponent {\n    @Input() smartLogTail: SmartLogTail;\n\n}\n","<ng-container *ngIf=\"apiError | async as apiErrorAlert\">\n    <div *ngIf=\"apiErrorAlert.errorType\" class=\"alert alert-error api-error-alert qa_generic_api-error\">\n        <div *ngIf=\"closable\" class=\"actions pull-right\"><a (click)=\"reset()\" style=\"text-decoration: none\" class=\"qa_generic_api-reset-error\"><i><span style=\"font-size:1.3em; vertical-align: top\">&times;</span></i></a></div>\n        <div *ngIf=\"errorFoldable\" class=\"actions pull-right\">\n            <a (click)=\"open = !open\">\n                <i class=\"{{open ? 'icon-chevron-up' : 'icon-chevron-down'}}\"></i>\n            </a>\n        </div>\n\n        <div class=\"api-error-alert__contents\" *ngIf=\"!open && apiErrorAlert.code\">\n            <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;{{apiErrorAlert.title}}</h4>\n        </div>\n\n        <div class=\"api-error-alert__contents\" *ngIf=\"!open && !apiErrorAlert.code\">\n            <h4>Error occurred</h4>\n        </div>\n\n        <div class=\"api-error-alert__contents\" *ngIf=\"open\">\n            <div *ngIf=\"apiErrorAlert.code; else noncoded\">\n                <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;{{apiErrorAlert.title}}</h4>\n                <h5 class=\"api-error-alert__subtitle summary-of-error\">\n                    <span *ngIf=\"apiErrorAlert.detailedMessageHTML\" [innerHtml]=\"apiErrorAlert.detailedMessageHTML\"></span>\n                    <span *ngIf=\"!apiErrorAlert.detailedMessageHTML\">{{detailedMessageOrMessage}}</span>\n                </h5>\n\n                <div style=\"display: flex; flex-direction: row; align-items: center\">\n                    <div class=\"noflex\" style=\"flex-basis: 75%; padding-right: 25px\">\n                        <error-fixability [serializedError]=\"apiErrorAlert\"></error-fixability>\n                    </div>\n                    <div class=\"noflex\" style=\"flex-basis: 25%;\">\n                        <p style=\"font-weight: 500; text-align: center; margin: 0\">\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"{{$root.versionDocRoot}}troubleshooting/errors/{{apiErrorAlert.code}}.html\">\n                                More information on this error in {{$root.wl.productShortName || 'DSS'}} documentation\n                            </a>\n                        </p>\n                    </div>\n                </div>\n\n                <p style=\"margin-bottom: 0\"><span class=\"tech-details\">Additional technical details: \n                    <span *ngIf=\"apiErrorAlert.httpCode > 0\">HTTP code: {{apiErrorAlert.httpCode}},</span>\n                    <span>Code: {{apiErrorAlert.code}}, </span>\n                    <span>type: {{apiErrorAlert.errorType}}</span>\n                    </span>\n                </p>\n            </div>\n            <ng-template #noncoded>\n                <div *ngIf=\"apiErrorAlert.httpCode == 502\">\n                    <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Could not connect to {{$root.wl.productShortName || 'DSS'}} server</h4>\n                    <h5>Please ask your administrator to check if the {{$root.wl.productShortName || 'DSS'}} server backend is running.</h5>\n                    <p class=\"api-error-alert__description\">{{detailedMessageOrMessage}}<br />\n                    <span class=\"tech-details\">HTTP code: {{apiErrorAlert.httpCode}}, type: {{apiErrorAlert.errorType}}</span></p>\n                </div>\n\n                <div [ngSwitch]=\"apiErrorAlert.errorType\" *ngIf=\"apiErrorAlert.httpCode != 502\">\n                    <div *ngSwitchCase=\"'XHRNetworkError'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Network error</h4>\n                        <h5 class=\"api-error-alert__subtitle\">\n                            An attempt to communicate with {{$root.wl.productShortName || 'DSS'}} failed. Please check your network connectivity.\n                        </h5>\n                        <p>{{detailedMessageOrMessage}}</p>\n                    </div>\n                    <div *ngSwitchCase=\"'HTTPError413'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Request too large</h4>\n                        <h5 class=\"api-error-alert__subtitle\">\n                            The network request was rejected because it was too large. This is probably caused by a proxy between your browser and {{$root.wl.productShortName || 'DSS'}} that rejects too large uploads. Please contact your network administrator.\n                        </h5>\n                        <span class=\"tech-details\">HTTP code: {{apiErrorAlert.httpCode}} - Response body: {{detailedMessageOrMessage}}</span>\n                    </div>\n                    \n                    <div *ngSwitchCase=\"'com.dataiku.dip.exceptions.DSSIllegalArgumentException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;An internal error occurred</h4>\n                        <h5 *ngIf=\"$root.appConfig.admin\">\n                            Please report this issue to {{$root.wl.productLongName}} Support\n                        </h5>\n                        <h5 *ngIf=\"!$root.appConfig.admin\">\n                            Please ask your {{$root.wl.productShortName}} administrator to report this issue to {{$root.wl.productLongName}} Support\n                        </h5>\n                        <p style=\"margin-bottom: 0\">Technical details follow:</p>\n                        <ul style=\"margin-bottom: 0\">\n                            <li>{{detailedMessageOrMessage}}</li>\n                            <li>HTTP code: {{apiErrorAlert.httpCode}}, type: {{apiErrorAlert.errorType}}</li>\n                        </ul>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.exceptions.DSSInternalErrorException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;An internal error occurred</h4>\n                        <h5 *ngIf=\"$root.appConfig.admin\">\n                            Please report this issue to {{$root.wl.productLongName}} Support\n                        </h5>\n                        <h5 *ngIf=\"!$root.appConfig.admin\">\n                            Please ask your {{$root.wl.productShortName}} administrator to report this issue to {{$root.wl.productLongName}} Support\n                        </h5>\n                        <p style=\"margin-bottom: 0\">Technical details follow:</p>\n                        <ul style=\"margin-bottom: 0\">\n                            <li>{{detailedMessageOrMessage}}</li>\n                            <li>HTTP code: {{apiErrorAlert.httpCode}}, type: {{apiErrorAlert.errorType}}</li>\n                        </ul>\n                    </div>\n\n                    <div *ngSwitchCase=\"'java.lang.IllegalArgumentException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Invalid argument</h4>\n                        <h5 class=\"api-error-alert__subtitle\">An invalid argument has been encountered : {{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.exceptions.UnauthorizedException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Not authorized</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.exceptions.DataStoreIOException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>{{apiErrorAlert.message}}</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{apiErrorAlert.detailedMessage}}</h5>\n                        <span class=\"tech-details\">HTTP code: {{apiErrorAlert.httpCode}}, type: {{apiErrorAlert.errorType}}</span>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.exceptions.IllegalConfigurationException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Configuration issue</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{apiErrorAlert.detailedMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.server.services.licensing.LicenseEnforcementService$LicenseLimitException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Limit reached !</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.server.services.licensing.LicenseEnforcementService$LicenseFeatureException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Unavailable feature</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.pivot.UnsupportedOperation'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Unsupported operation</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'ApplicativeException'\">\n                        <h4 *ngIf=\"apiErrorAlert.title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;{{apiErrorAlert.title}}</h4>\n                        <h5 *ngIf=\"detailedMessageOrMessage\" style=\"margin-bottom: 0; word-break: break-word;\">{{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'ExpectedException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;An error occurred</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'java.lang.SecurityException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Access denied</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'SecurityException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Access denied</h4>\n                        <h5 class=\"api-error-alert__subtitle\">{{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'java.util.zip.ZipException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Zip error</h4>\n                        <h5 class=\"api-error-alert__subtitle\">There is a problem with the zip file : {{detailedMessageOrMessage}}</h5>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.shaker.SampleBuilder$SampleBuildException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Could not build data sample</h4>\n                        <p class=\"api-error-alert__description\">{{detailedMessageOrMessage}}<br />\n                        <span class=\"tech-details\">Type: {{apiErrorAlert.errorType}}</span></p>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.io.CustomPythonKernelException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Python plugin code failed</h4>\n                        <p class=\"api-error-alert__description\">{{apiErrorAlert.message}}<br />\n                        <smart-log-tail logTail=\"apiErrorAlert.logTail\"></smart-log-tail>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.exceptions.ExternalProcessFailedException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;External process failed</h4>\n                        <p class=\"api-error-alert__description\">{{apiErrorAlert.message}}<br />\n                            <smart-log-tail logTail=\"apiErrorAlert.logTail\"></smart-log-tail>\n                        </p>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.io.SocketBlockLinkIOException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>\n                            &nbsp;Communication to external code failed</h4>\n                        <p class=\"api-error-alert__description\">{{apiErrorAlert.message}}<br />\n                            <smart-log-tail logTail=\"apiErrorAlert.logTail\"></smart-log-tail>\n                        </p>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.io.SocketBlockLinkKernelException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;External code failed</h4>\n                        <p class=\"api-error-alert__description\">{{apiErrorAlert.message}}<br />\n                            <smart-log-tail logTail=\"apiErrorAlert.logTail\"></smart-log-tail>\n                        </p>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.server.controllers.NotFoundException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Not found</h4>\n                        <p class=\"api-error-alert__description\">{{apiErrorAlert.message}}<br />\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.scheduler.runnables.DSSRunnableKernelException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Macro code failed</h4>\n                        <p class=\"api-error-alert__description\">{{apiErrorAlert.message}}<br /></p>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.exceptions.SourceDatasetNotReadyException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;{{detailedMessageOrMessage}}</h4>\n                    </div>\n                    <div *ngSwitchCase=\"'com.dataiku.dip.datasets.fs.HTTPSourceException'\">\n                        <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Source responded with HTTP error</h4>\n                        <p class=\"api-error-alert__description\">{{apiErrorAlert.message}}<br /></p>\n                    </div>\n\n                    <div *ngSwitchDefault>\n                        <div *ngIf=\"canBeUnexpected\">\n                            <h4 class=\"api-error-alert__title\"><i class=\"icon-dku-error api-error-alert__icon\"></i>&nbsp;Oops: an unexpected error occurred</h4>\n                            <h5 class=\"api-error-alert__subtitle\">\n                                <span *ngIf=\"!apiErrorAlert.detailedMessageHTML\" [innerHtml]=\"apiErrorAlert.detailedMessageHTML\"></span>\n                                <span *ngIf=\"apiErrorAlert.detailedMessageHTML\">{{detailedMessageOrMessage}}</span>\n                            </h5>\n\n                            <p class=\"api-error-alert__description\">\n                                Please see our <a ng-click=\"$root.showHelpModal();\">options for getting help</a>\n                            </p>\n                            <span class=\"tech-details\">HTTP code: {{apiErrorAlert.httpCode}}, type: {{apiErrorAlert.errorType}}</span>\n                        </div>\n\n                        <!-- Default formatting -->\n                        <div *ngIf=\"!canBeUnexpected\">\n                            <h4>{{detailedMessageOrMessage}}</h4>\n                            <span class=\"tech-details\">\n                                <span *ngIf=\"apiErrorAlert.httpCode > 0\">HTTP code: {{apiErrorAlert.httpCode}},</span>\n                                Type: {{apiErrorAlert.errorType}}</span>\n                        </div>\n                    </div>\n                </div>\n            </ng-template>\n        </div>\n    </div>\n</ng-container>\n","import { Component, OnDestroy, Inject, Input, ChangeDetectionStrategy, NgZone, EventEmitter, Output } from '@angular/core';\nimport { APIError, isEnhancedSerializedError } from '@core/dataiku-api/api-error';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { Observable } from 'rxjs';\nimport { fairAny } from 'dku-frontend-core';\nimport { ObservableInput } from 'observable-input';\n\n@Component({\n    selector: 'api-error-alert',\n    templateUrl: './api-error-alert.component.html',\n    styleUrls: ['./api-error-alert.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class APIErrorAlertComponent implements OnDestroy {\n    @Input() canBeUnexpected: boolean = true;\n    @Input() closable: boolean = true;\n    @Input() errorFoldable: boolean = false;\n    @Input() @ObservableInput() apiError: Observable<APIError | null>;\n    @Output() resetError = new EventEmitter<any>();\n\n    open: boolean = true;\n    detailedMessageOrMessage: string | null = null; // we use a snapshot to avoid a lot of async subscriptions\n\n    constructor(@Inject('$rootScope') public $root: fairAny,\n        private ngZone: NgZone) {\n        this.apiError.subscribe(\n            error => {\n                this.ngZone.run(() =>{\n                if (!error) {\n                    this.detailedMessageOrMessage = null;\n                    return;\n                }\n                if ('detailedMessage' in error) {\n                    this.detailedMessageOrMessage = error.detailedMessage;\n                } else {\n                    this.detailedMessageOrMessage = error.message;\n                }\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n    }\n\n    reset(): void {\n        this.resetError.emit();\n    }\n\n}\n","import { Card, Filter } from 'src/generated-sources';\n\nexport enum CardActionType {\n    DELETE,\n    UPDATE,\n    ADD,\n    DEBUG,\n    PUBLISH,\n    HIGHLIGHT,\n    REORDER_HEADER_CARD\n}\n\nexport interface UpdateCardAction {\n    type: CardActionType.UPDATE;\n    newParams: Card;\n    updateSiblings?: boolean;\n    immediate?: boolean;\n}\n\nexport interface DeleteCardAction {\n    type: CardActionType.DELETE;\n}\n\nexport interface AddCardAction {\n    type: CardActionType.ADD;\n    card: Card;\n}\n\nexport interface HighlightAction {\n    type: CardActionType.HIGHLIGHT;\n    filter?: Filter | null;\n}\n\nexport interface DebugCardAction {\n    type: CardActionType.DEBUG;\n    card: Card;\n}\n\nexport interface PublishCardAction {\n    type: CardActionType.PUBLISH;\n    card: Card;\n}\n\nexport interface ReorderColumnsAction {\n    type: CardActionType.REORDER_HEADER_CARD;\n    cardId: string;\n    previousIndex: number;\n    currentIndex: number;\n}\n\nexport type CardAction = DeleteCardAction | UpdateCardAction | AddCardAction | DebugCardAction\n    | PublishCardAction | ReorderColumnsAction | HighlightAction;\n","import { Injectable, ViewContainerRef } from '@angular/core';\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\nimport { realAny, fairAny } from 'dku-frontend-core';\n\ndeclare let $: fairAny;\n\nexport enum ModalShape {\n    NARROW = 'dku-modal-panel-narrow',\n    WIDE = 'dku-modal-panel-wide',\n    NONE = 'dku-modal-panel-none'\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ModalsService {\n    /*\n    We use modals provided by material design,\n    it handle the creation of the DOM objects, close on escape or outside of modal\n    it keeps track of open modals to clear them so that they cannot persist after a transition\n    */\n    constructor(private dialogs: MatDialog) {\n    }\n\n    open(component: any, data?: object, modalShape = ModalShape.NARROW, parent?: ViewContainerRef, options?: MatDialogConfig) {\n        const config = this.getBaseConfig(modalShape, parent, options);\n        config.data = data;\n        const dialogRef = this.dialogs.open(component, config);\n        this.setupFocus(dialogRef);\n\n        return new Promise<any>((resolve, reject) => {\n            return dialogRef.afterClosed().subscribe((answer) => {\n                if (answer) {\n                    resolve(answer);\n                } else {\n                    reject();\n                }\n            });\n        });\n    }\n\n    private setupFocus(dialogRef: MatDialogRef<realAny>) {\n        dialogRef.afterOpened().subscribe(() => {\n            const container = $('.mat-dialog-container');\n            if (container.find('[autofocus]').length) {\n                setTimeout(() => container.find('[autofocus]').first().focus(), 0);\n            } else if (container.find('input').length) {\n                setTimeout(() => container.find('input').first().focus(), 0);\n            }\n            //TODO prevent enter key action on all btn-danger\n        });\n    }\n\n    private getBaseConfig(modalShape: ModalShape, parent?: ViewContainerRef, options: MatDialogConfig = {}) {\n        const baseConfig = new MatDialogConfig();\n        baseConfig.closeOnNavigation = true;\n        baseConfig.panelClass = modalShape;\n        baseConfig.viewContainerRef = parent;\n        Object.assign(baseConfig, options);\n\n        return baseConfig;\n    }\n\n}","export enum AnalysisType {\n    UNIVARIATE_HEADER = 'univariate_header',\n    BIVARIATE_HEADER = 'bivariate_header',\n    UNIVARIATE_CARD = 'univariate_card',\n    BIVARIATE_CARD = 'bivariate_card',\n    MULTIVARIATE_CARD = 'multivariate_card'\n}\n\nexport type Analysis = 'univariate_header' | 'bivariate_header' | 'univariate_card' | 'bivariate_card' | 'multivariate_card';","import { Observable, defer } from 'rxjs';\nimport { Variable, Sample, InteractiveQuery } from 'src/generated-sources';\nimport { Injectable } from '@angular/core';\nimport { switchMap, first } from 'rxjs/operators';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { FutureWatcherService, filterNonNull, Filter } from 'dku-frontend-core';\n\n@Injectable()\nexport abstract class SampleContextService {\n    constructor(protected DataikuAPI: DataikuAPIService, protected futureWatcherService: FutureWatcherService) {\n    }\n\n    abstract availableVariables(): Observable<Variable[]>;\n    abstract getSample(): Observable<Sample | undefined>;\n    abstract forceLoadSample(): void;\n\n    runInteractiveQuery<T extends InteractiveQuery>(query: T) {\n        return defer(() => {\n            this.forceLoadSample();\n            return this.getSample().pipe(\n                filterNonNull(),\n                first(),\n                switchMap(sample => this.DataikuAPI.statistics.runInteractiveQuery(query, sample.id).pipe(\n                    this.futureWatcherService.waitForResult()\n                ))\n            )\n        });\n    }\n}\n","/*\n    Service that manages the state of the new/edit analysis window\n*/\nimport { Injectable } from '@angular/core';\nimport { Card, Variable, CorrelationMatrixCard, PValueAdjustmentMethod } from 'src/generated-sources';\nimport { switchMap, map } from 'rxjs/operators';\nimport { AnalysisType } from './enums';\nimport { randomId } from '@utils/random';\nimport { of } from 'rxjs';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { SampleContextService } from '@features/eda/sample-context.service';\n\ninterface AvailableVariableOptions {\n    isTestVariable?: boolean;\n}\n\n@Injectable()\nexport class CardWizardService {\n    constructor(\n        private sampleContextService: SampleContextService\n    ) {}\n\n    private mapVariables(variables: Variable[], type: string, options?: AvailableVariableOptions): CardWizardVariable[] {\n        return variables.map((variable: Variable) => ({\n            ...variable,\n            disabled: this.isVariableDisabled(variable, type, options)\n        })).sort((a, b) => (+a.disabled - +b.disabled));\n    }\n\n    availableVariables(type: string, options?: AvailableVariableOptions) {\n        return this.sampleContextService.availableVariables().pipe(\n            map(variables => this.mapVariables(variables, type, options))\n        );\n    }\n\n    private isVariableDisabled(variable: Variable, type: string, options?: AvailableVariableOptions) {\n        const analysisType = this.getAnalysisType(type);\n\n        switch (analysisType) {\n            case AnalysisType.UNIVARIATE_CARD:\n            case AnalysisType.MULTIVARIATE_CARD:\n                return variable.type !== Variable.Type.CONTINUOUS;\n            case AnalysisType.BIVARIATE_CARD:\n                if (type === 'chi2_independence_test') {\n                    return variable.type !== Variable.Type.CATEGORICAL;\n                } else if (type === 'fit_2d_distribution' || type === 'fit_curve') {\n                    return variable.type !== Variable.Type.CONTINUOUS;\n                } else {\n                    if (options && options.isTestVariable) {\n                        return variable.type !== Variable.Type.CONTINUOUS;\n                    }\n                }\n        }\n\n        return false;\n    }\n\n    getAnalysisType(type: string) {\n        switch (type) {\n            case 'univariate_header':\n                return AnalysisType.UNIVARIATE_HEADER;\n            case 'bivariate_header':\n                return AnalysisType.BIVARIATE_HEADER;\n            case 'pca':\n            case 'correlation_matrix':\n                return AnalysisType.MULTIVARIATE_CARD;\n            case 'fit_2d_distribution':\n            case 'fit_curve':\n            case 'mood_test_2samp':\n            case 'mood_nsamp':\n            case 'ks_test_2samp':\n            case 'ttest_2samp':\n            case 'oneway_anova':\n            case 'chi2_independence_test':\n            case 'pairwise_mood':\n            case 'pairwise_ttest':\n                return AnalysisType.BIVARIATE_CARD;\n            case 'fit_distribution':\n            case 'shapiro':\n            case 'sign_test_1samp':\n            case 'ttest_ztest_1samp':\n                return AnalysisType.UNIVARIATE_CARD;\n            default:\n                return '';\n        }\n    }\n\n    getCardDefault(type: string) {\n        const analysisType = this.getAnalysisType(type);\n        const analysisDefault = this.getAnalysisDefault(analysisType);\n        let card = {\n            type,\n            ...analysisDefault,\n            id: randomId()\n        };\n        let defaultOptions = {};\n\n        switch (type) {\n            case 'univariate_header':\n                defaultOptions = {\n                    showBoxPlot: true,\n                    showFrequencyTable: true,\n                    showHistogram: true,\n                    showQuantile: true,\n                    showSummary: true\n                };\n                break;\n            case 'bivariate_header':\n                defaultOptions = {\n                    showBoxPlot: true,\n                    showFrequencyTable: true,\n                    showHistogram: true,\n                    showMosaicPlot: true,\n                    showScatterPlot: true,\n                    showSummary: true\n                };\n                break;\n            case 'correlation_matrix':\n                defaultOptions = {\n                    metric: CorrelationMatrixCard.CorrelationMetric.SPEARMAN,\n                    heatmapParams: {\n                        showValues: true,\n                        showColors: true,\n                        showAbsValues: false,\n                        threshold: 0\n                    }\n                };\n                break;\n            case 'fit_distribution':\n                defaultOptions = {\n                    distributions: [{\n                        distribution: {\n                            type: 'normal'\n                        }\n                    }]\n                };\n                break;\n            case 'fit_2d_distribution':\n                defaultOptions = {\n                    distribution: {\n                        type: 'kde_2d'\n                    },\n                    xResolution: 640,\n                    yResolution: 480\n                };\n                break;\n            case 'fit_curve':\n                // look for option with id named 'type'\n                defaultOptions = {\n                    curves: [{\n                        type: 'polynomial',\n                        degree: 2\n                    }]\n                };\n                break;\n            case 'pca':\n                defaultOptions = {\n                    heatmapParams: {\n                        showValues: true,\n                        showColors: true,\n                        showAbsValues: false,\n                        threshold: 0\n                    }\n                };\n                break;\n            case 'pairwise_mood':\n            case 'pairwise_ttest':\n                defaultOptions = {\n                    adjustmentMethod: PValueAdjustmentMethod.NONE,\n                    maxGroups: 10\n                };\n                break;\n            case 'mood_nsamp':\n            case 'oneway_anova':\n                defaultOptions = {\n                    maxGroups: 10\n                };\n                break;\n            case 'chi2_independence_test':\n                defaultOptions = {\n                    maxValuesX: 5,\n                    maxValuesY: 5\n                };\n                break;\n            case 'ks_test_2samp':\n            case 'mood_test_2samp':\n            case 'shapiro':\n            case 'sign_test_1samp':\n            case 'ttest_2samp':\n            case 'ttest_ztest_1samp':\n                break;\n        }\n\n        card = {\n            ...card,\n            ...defaultOptions\n        };\n\n        return card;\n    }\n\n    getAnalysisDefault(analysisType: string): { xColumns?: Variable[], columns?: Variable[], xColumn?: Variable | {}, yColumn?: Variable | {}, column?: Variable | {}, cards?: Card[] } {\n        switch (analysisType) {\n            case AnalysisType.UNIVARIATE_HEADER:\n                return {\n                    xColumns: []\n                };\n            case AnalysisType.BIVARIATE_HEADER:\n                return {\n                    xColumns: [],\n                    yColumn: {}\n                };\n            case AnalysisType.MULTIVARIATE_CARD:\n                return {\n                    columns: []\n                };\n            case AnalysisType.BIVARIATE_CARD:\n                return {\n                    xColumn: {},\n                    yColumn: {}\n                };\n            case AnalysisType.UNIVARIATE_CARD:\n                return {\n                    column: {}\n                };\n        }\n\n        return {};\n    }\n}\n","import { Injectable } from '@angular/core';\nimport d3 from 'd3';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nexport interface QaSelectorProperties {\n    [property: string]: string | null | undefined;\n}\n\nexport interface QaSelectors {\n    [key: string]: QaSelectorProperties;\n}\n\nexport function getAttributeName(key: string, property?: string) {\n    return 'data-qa-' + key + (property ? '--' + property : '');\n}\n\nexport function getCssSelector(key: string, property?: string, value?: string | null) {\n    let escapedValue = '';\n    if (value) {\n        escapedValue = '=\\'' + (value || '').replace('\\'', '\\\\') + '\\'';\n    }\n    return '[' + getAttributeName(key, property) + escapedValue + ']';\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class QaSelectorService {\n    private enabled$ = new BehaviorSubject(false);\n    private colorMap: { [key: string]: string } = {};\n    private colorGenerator = function* colorGenerator() {\n        while (true) {\n            for (const color of d3.scale.category20().range()) {\n                yield d3.hsl(color).darker().toString();\n            }\n        }\n    }();\n\n    constructor() {\n        // Make toggleQaSelectors() globally available\n        (window as any).toggleQaSelectors = (flag: boolean) => this.enabled$.next(flag);\n    }\n\n    public getColorForSelector(key: string) {\n        if (!(key in this.colorMap)) {\n            this.colorMap[key] = this.colorGenerator.next().value as string;\n        }\n        return this.colorMap[key];\n    }\n\n    public get isOverlayEnabled(): Observable<boolean> {\n        return this.enabled$.pipe(distinctUntilChanged());\n    }\n}\n","<ng-container *ngIf=\"displayedData\">\n    <div\n        [style.width.px]=\"overlayWidth\"\n        [style.height.px]=\"overlayHeight\"\n        [style.boxShadow]=\"boxShadow\"\n    >\n    </div>\n    <div class=\"selectors\">\n        <div\n            *ngFor=\"let item of displayedData\"\n            [style.color]=\"item.color\"\n        >\n            <b>{{ item.selector }}</b>\n            <br>\n            <span *ngFor=\"let child of item.derivedSelectors\">\n                {{ child }}\n                <br>\n            </span>\n        </div>\n    </div>\n</ng-container>\n","import { Component, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { QaSelectorService, QaSelectors, getCssSelector } from './qa-selector.service';\nimport { ReplaySubject, timer, combineLatest } from 'rxjs';\nimport { switchMapTo } from 'rxjs/operators';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { OverlayRef } from '@angular/cdk/overlay';\n\nexport interface InputData {\n    qa: QaSelectors;\n}\n\n@UntilDestroy()\n@Component({\n    selector: 'qa-selector-overlay',\n    templateUrl: './qa-selector.component.html',\n    styleUrls: ['./qa-selector.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class QaSelectorComponent implements OnDestroy {\n    displayedData?: {\n        selector: string,\n        color: string,\n        derivedSelectors: string[]\n    }[];\n    element?: HTMLElement;\n    boxShadow: string;\n    overlayWidth: number;\n    overlayHeight: number;\n    element$ = new ReplaySubject<HTMLElement>(1);\n    overlayRef$ = new ReplaySubject<OverlayRef>(1);\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private qaSelectorService: QaSelectorService) {\n        // Reposition & resize every second\n        // (this is slow but this is a dev-only tool)\n        timer(0, 1000).pipe(\n            switchMapTo(combineLatest([this.element$, this.overlayRef$])),\n            untilDestroyed(this)\n        ).subscribe(([element, overlayRef]) => {\n            // Update position (CDK)\n            overlayRef.updatePosition();\n\n            // Update size (manual)\n            const size = element.getBoundingClientRect();\n            this.overlayWidth = size.width;\n            this.overlayHeight = size.height;\n            changeDetectorRef.markForCheck();\n        });\n    }\n\n    setElementAndOverlayRef(element: HTMLElement, overlayRef: OverlayRef) {\n        this.element$.next(element);\n        this.overlayRef$.next(overlayRef);\n    }\n\n    ngOnDestroy() {\n    }\n\n    setData(qa: QaSelectors) {\n        this.displayedData = Object.keys(qa).map(key => ({\n            selector: getCssSelector(key),\n            color: this.qaSelectorService.getColorForSelector(key),\n            derivedSelectors: Object.keys(qa[key])\n                .map(attribute => getCssSelector(key, attribute, qa[key][attribute]))\n        }));\n\n        this.boxShadow = this.displayedData\n            .map(({ color }, index) => `0 0 0 ${5 * (1 + index)}px ${color}`)\n            .join(', ');\n\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { Directive, Input, ElementRef, OnChanges, OnDestroy, ComponentRef, OnInit } from '@angular/core';\nimport { QaSelectors, getAttributeName, QaSelectorService } from './qa-selector.service';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { QaSelectorComponent } from './qa-selector.component';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { fromLongPressEvent } from 'dku-frontend-core';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { fromEvent, EMPTY, merge, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * Two input formats are accepted:\n * - { elementName: { property1Name: property1Value, ... }, ...}\n * - \"elementName\" (equivalent to: {elementName:{}})\n */\nfunction expandInput(input: QaSelectors | string): QaSelectors {\n    if (typeof input === 'string') {\n        return { [input]: {} };\n    }\n    return input;\n}\n\n@UntilDestroy()\n@Directive({\n    selector: '[qa]'\n})\nexport class QaSelectorDirective implements OnChanges, OnDestroy, OnInit {\n    // User provided input (accept multiple formats, see expandInput())\n    @Input() qa: QaSelectors | string;\n\n    // Expanded input, canonical format\n    qaSelectors: QaSelectors = {};\n\n    overlayRef?: OverlayRef;\n    componentRef?: ComponentRef<QaSelectorComponent>;\n\n    constructor(\n        private el: ElementRef<HTMLElement>,\n        private overlay: Overlay,\n        private qaSelectorService: QaSelectorService) { }\n\n    ngOnInit() {\n        this.qaSelectorService.isOverlayEnabled.pipe(\n            switchMap(flag => {\n                if (!flag) { return of(null); }\n                return merge(\n                    fromLongPressEvent(this.el.nativeElement, 500, () => !this.isOverlayOpened),\n                    fromEvent(this.el.nativeElement, 'mouseleave')\n                );\n            }),\n            untilDestroyed(this)\n        ).subscribe(() => this.closeOverlay());\n\n        this.qaSelectorService.isOverlayEnabled.pipe(\n            switchMap((flag) => flag ? fromEvent(this.el.nativeElement, 'mouseenter') : EMPTY),\n            untilDestroyed(this),\n        ).subscribe(() => this.openOverlay());\n    }\n\n    ngOnDestroy() {\n        this.closeOverlay();\n    }\n\n    closeOverlay() {\n        if (this.isOverlayOpened) {\n            this.overlayRef!.dispose();\n            delete this.overlayRef;\n            delete this.componentRef;\n        }\n    }\n\n    get isOverlayOpened() {\n        return !!this.overlayRef;\n    }\n\n    openOverlay() {\n        if (this.isOverlayOpened) {\n            // Already opened\n            return;\n        }\n        const positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.el.nativeElement)\n            .withPositions([{\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top'\n            }]);\n\n        const config = new OverlayConfig();\n        config.positionStrategy = positionStrategy;\n        config.hasBackdrop = false;\n        config.scrollStrategy = this.overlay.scrollStrategies.reposition();\n        config.panelClass = 'overlay-no-pointer-events';\n        this.overlayRef = this.overlay.create(config);\n        const portal = new ComponentPortal(QaSelectorComponent);\n        this.componentRef = this.overlayRef!.attach(portal) as ComponentRef<QaSelectorComponent>;\n        this.componentRef.instance.setData(this.qaSelectors);\n        this.componentRef.instance.setElementAndOverlayRef(this.el.nativeElement, this.overlayRef);\n        this.componentRef.changeDetectorRef.detectChanges();\n    }\n\n    ngOnChanges() {\n        this.qaSelectors = expandInput(this.qa);\n        Object.keys(this.qaSelectors).forEach(key => {\n            const attributes = expandInput(this.qaSelectors)[key];\n            this.el.nativeElement.setAttribute(getAttributeName(key), '');\n            Object.keys(attributes).forEach(attribute => {\n                const htmlAttrValue = attributes[attribute] || '';\n                this.el.nativeElement.setAttribute(getAttributeName(key, attribute), htmlAttrValue);\n            });\n        });\n    }\n}\n","<div class=\"modal-header {{modalClass}}\" [ngClass]=\"{'has-border': hasBorder }\">\n    <div class=\"modal-totem\" *ngIf=\"icon?.length\" (click)=\"iconAction.emit()\" [ngClass]=\"{ 'modal-totem--action': iconHasAction }\">\n        <i class=\"{{icon}}\"></i>\n    </div>\n    <a class=\"modal-header-button\"\n        (click)=\"dialogRef.close()\"\n        aria-hidden=\"true\"\n        >\n        &times;\n    </a>\n    <a class=\"modal-header-button see-through-button\"\n        aria-hidden=\"true\"\n        (mouseenter)=\"setSeeThrough(true)\"\n        (mouseleave)=\"setSeeThrough(false)\"\n        >\n        &minus;\n    </a>\n    <h4 class=\"modal-title\" [ngClass]=\"{'has-icon': icon?.length}\">\n        {{title}}\n    </h4>\n</div>\n","import { Component, Input, EventEmitter, Output, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { fairAny } from 'dku-frontend-core';\n\ndeclare let $: fairAny;\n\n@Component({\n    selector: 'modal-header',\n    templateUrl: './modal-header.component.html',\n    styleUrls: ['./modal-header.component.less']\n})\nexport class ModalHeaderComponent implements OnInit {\n    @Input() title: string;\n    @Input() modalClass: string;\n    @Input() icon: string;\n    @Input() hasBorder = true;\n    @Output() iconAction = new EventEmitter<any>();\n\n    iconHasAction = false;\n\n    constructor(\n        public dialogRef: MatDialogRef<any>\n    ) {\n        this.dialogRef.backdropClick().subscribe(() => {\n            this.dialogRef.close();\n        });\n    }\n\n    ngOnInit() {\n        this.iconHasAction = this.iconAction.observers.length > 0;\n    }\n\n    setSeeThrough(seeThrough: boolean) {\n        const elts = $('.cdk-overlay-container, div.popover');\n        if (seeThrough) {\n            elts.addClass('see-through');\n        } else {\n            elts.removeClass('see-through');\n        }\n    }\n\n}\n","<form class=\"dkuform-modal-vertical\" id=\"config-form\" >\n    <div class=\"control-group\">\n        <label class=\"control-label\">Stats</label>\n        <div\n            class=\"controls\"\n            *ngFor=\"let stat of availableStatItems\"\n        >\n            <label>\n                <input\n                    [ngModel]=\"$any(localParams.compute)[stat.property]\"\n                    (ngModelChange)=\"toggleStat(stat.property, $event)\"\n                    type=\"checkbox\"\n                    [name]=\"stat.property\"\n                    class=\"form__checkbox\"\n                >\n                {{ stat.label }}\n            </label>\n        </div>\n    </div>\n</form>\n","import { Component, ChangeDetectionStrategy, Input, EventEmitter, Output, SimpleChanges, OnChanges } from '@angular/core';\nimport { UnivariateSummaryStatsCard, BivariateSummaryStatsCard, Variable } from 'src/generated-sources';\nimport produce from 'immer';\n\n\n// Create types derived from J2TS-generated models in order to get some type safety\n// - Prevent typos on property names\n// - Cannot detect missing items\ntype SupportedCards = UnivariateSummaryStatsCard | BivariateSummaryStatsCard;\n\ntype StatItem = (\n    {\n        cardType: UnivariateSummaryStatsCard['type'],\n        property: keyof UnivariateSummaryStatsCard.StatsToCompute,\n        variableType?: Variable.Type\n    }\n    | {\n        xVariableType?: Variable.Type,\n        yVariableType?: Variable.Type,\n        cardType: BivariateSummaryStatsCard['type'],\n        property: keyof BivariateSummaryStatsCard.StatsToCompute\n    }\n) & { label: string };\n\ntype StatKey = string & Partial<StatItem>['property'];\n\nconst allStatItems: StatItem[] = [\n    {\n        property: 'totalCount',\n        cardType: 'univariate_summary',\n        label: 'Total count'\n    },\n    {\n        property: 'mean',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Mean'\n    },\n    {\n        property: 'sum',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Sum'\n    },\n    {\n        property: 'median',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Median'\n    },\n    {\n        property: 'std',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Std Dev'\n    },\n    {\n        property: 'variance',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Variance'\n    },\n    {\n        property: 'skewness',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Skewness'\n    },\n    {\n        property: 'kurtosis',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Kurtosis'\n    },\n    {\n        property: 'sem',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Standard Error of the Mean'\n    },\n    {\n        property: 'completeCount',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'N finite'\n    },\n    {\n        property: 'nbEmpty',\n        variableType: Variable.Type.CATEGORICAL,\n        cardType: 'univariate_summary',\n        label: 'N empty'\n    },\n    {\n        property: 'zeroCount',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Zero count'\n    },\n    {\n        property: 'zeroRatio',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Zero ratio'\n    },\n    {\n        property: 'nonZeroRatio',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Non zero ratio'\n    },\n    {\n        property: 'iqr',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'IQR'\n    },\n    {\n        property: 'distinctCount',\n        cardType: 'univariate_summary',\n        label: 'N distinct'\n    },\n    {\n        property: 'nbNonEmpty',\n        cardType: 'univariate_summary',\n        variableType: Variable.Type.CATEGORICAL,\n        label: 'N non empty'\n    },\n    {\n        property: 'min',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Min'\n    },\n    {\n        property: 'max',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Max'\n    },\n    {\n        property: 'range',\n        variableType: Variable.Type.CONTINUOUS,\n        cardType: 'univariate_summary',\n        label: 'Range'\n    },\n    {\n        property: 'mode',\n        variableType: Variable.Type.CATEGORICAL,\n        cardType: 'univariate_summary',\n        label: 'Mode'\n    },\n    {\n        property: 'spearman',\n        cardType: 'bivariate_summary',\n        xVariableType: Variable.Type.CONTINUOUS,\n        yVariableType: Variable.Type.CONTINUOUS,\n        label: 'Spearman'\n    },\n    {\n        property: 'pearson',\n        cardType: 'bivariate_summary',\n        xVariableType: Variable.Type.CONTINUOUS,\n        yVariableType: Variable.Type.CONTINUOUS,\n        label: 'Pearson'\n    },\n    {\n        property: 'totalCount',\n        cardType: 'bivariate_summary',\n        label: 'Count'\n    },\n    {\n        property: 'covariance',\n        cardType: 'bivariate_summary',\n        xVariableType: Variable.Type.CONTINUOUS,\n        yVariableType: Variable.Type.CONTINUOUS,\n        label: 'Covariance'\n    },\n    {\n        property: 'kendallTau',\n        xVariableType: Variable.Type.CONTINUOUS,\n        yVariableType: Variable.Type.CONTINUOUS,\n        cardType: 'bivariate_summary',\n        label: 'Kendall Tau'\n    },\n    {\n        property: 'mutualInformation',\n        xVariableType: Variable.Type.CATEGORICAL,\n        yVariableType: Variable.Type.CATEGORICAL,\n        cardType: 'bivariate_summary',\n        label: 'Normalized mutual information'\n    },\n    {\n        property: 'completeCount',\n        cardType: 'bivariate_summary',\n        label: 'N finite'\n    }\n];\n\n// Determine if a stat is visible/configurable depending on card type & variable(s) type(s)\nfunction isItemDisplayed(params: SupportedCards, item: StatItem): boolean {\n    if (item.cardType !== params.type) {\n        return false;\n    }\n\n    if (item.cardType === 'bivariate_summary' && params.type === 'bivariate_summary') {\n        if (item.xVariableType && item.xVariableType !== params.xColumn.type) {\n            return false;\n        }\n        if (item.yVariableType && item.yVariableType !== params.yColumn.type) {\n            return false;\n        }\n    }\n\n    if (item.cardType === 'univariate_summary' && params.type === 'univariate_summary') {\n        if (item.variableType && item.variableType !== params.column.type) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n@Component({\n    selector: 'generic-summary-stats-card-config',\n    templateUrl: './generic-summary-stats-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/forms.less',\n        './generic-summary-stats-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GenericSummaryStatsCardConfigComponent implements OnChanges {\n    @Input() params: SupportedCards;\n    @Output() paramsChange = new EventEmitter<SupportedCards>();\n\n    availableStatItems: StatItem[];\n    localParams: SupportedCards;\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.localParams = this.params;\n            this.availableStatItems = allStatItems\n                .filter(statItem => isItemDisplayed(this.params, statItem));\n        }\n    }\n\n    toggleStat(key: StatKey, flag: boolean) {\n        this.localParams = produce(this.localParams, draft => {\n            (draft.compute as any)[key] = flag;\n        });\n        this.paramsChange.emit(this.localParams);\n    }\n}\n","import { ElementRef, Injector, Directive, Input} from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'angularjs-dku-bs-select'\n})\nexport class AngularjsDkuBsSelectDirective extends UpgradeComponent {\n    @Input() params: any;\n    @Input() list: any;\n    @Input() model: any;\n    @Input() ngOptions: any;\n    @Input() required: any;\n    @Input() modelChange: any;\n    @Input() optionsDescriptions: any;\n    @Input() optionsAnnotations: any;\n    @Input() layout: string;\n    @Input() dataActionsBox: any;\n    @Input() dataLiveSearch: any;\n    @Input() dkuMultiple: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('ng1DkuBsSelect', elementRef, injector);\n    }\n}\n","import { Component, EventEmitter, Input, Output, SimpleChanges, Inject, OnChanges } from '@angular/core';\nimport { realAny } from 'dku-frontend-core';\nimport { IScope } from 'angular';\n\n@Component({\n    selector: 'dku-bs-select',\n    template: `\n    <angularjs-dku-bs-select [params]=\"params\" [list]=\"list\" [model]=\"model\" [ngOptions]=\"ngOptions\" [required]=\"required\"\n                            [modelChange]=\"modelChange\" [optionsDescriptions]=\"optionsDescriptions\" [optionsAnnotations]=\"optionsAnnotations\"\n                            [dataActionsBox]=\"dataActionsBox\" [dataLiveSearch]=\"dataLiveSearch\"\n                            [layout]=\"layout\" [dkuMultiple]=\"dkuMultiple\">\n    </angularjs-dku-bs-select>`\n})\nexport class DkuBsSelectComponent implements OnChanges {\n    // This is a thin wrapper to allow angular-style \"two-way binding\"\n    // We transform an output (datasetChange) into an output and make it available to an AngularJS watch\n    // not sure if there is a better way with AngularUpgrade.\n\n    // ngOptions should always refer to the array as \"list\"\n    // and the array should be given as the \"list\" param\n    // Note than only ngOptions is supported, it's not possible to specify <option> tags\n    @Input() params?: object;\n    @Input() list: realAny[];\n    @Input() optionsDescriptions?: realAny[];\n    @Input() optionsAnnotations?: realAny[];\n    @Input() ngOptions: string;\n    @Input() required?: boolean;\n    @Input() model: realAny;\n    @Input() layout?: string;\n    @Input() dataActionsBox?: boolean;\n    @Input() dataLiveSearch?: boolean;\n    @Input() dkuMultiple?: boolean;\n\n    // Allow to have 2 way data-binding in templates using the `[(model)]` syntax\n    @Output() modelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    ngOnChanges() {\n        // Run AngularJS change detetion\n        this.$rootScope.$applyAsync();\n    }\n\n    constructor(@Inject('$rootScope') private $rootScope: IScope) {\n    }\n}\n","import { Component, OnInit, ChangeDetectionStrategy, Input, EventEmitter, Output, forwardRef } from '@angular/core';\nimport { realAny } from 'dku-frontend-core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'dku-bs-select-form-control',\n  templateUrl: './dku-bs-select-form-control.component.html',\n  styleUrls: ['./dku-bs-select-form-control.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => DkuBsSelectFormControlComponent),\n        multi: true\n        }\n    ]\n})\nexport class DkuBsSelectFormControlComponent implements OnInit, ControlValueAccessor {\n    @Input() params?: object;\n    @Input() list: realAny[];\n    @Input() optionsDescriptions?: realAny[];\n    @Input() ngOptions: string;\n    @Input() model: realAny;\n    @Input() required?: boolean;\n    @Input() layout?: string;\n    @Input() dataActionsBox?: boolean;\n    @Input() dataLiveSearch?: boolean;\n    @Input() dkuMultiple?: boolean;\n    // Allow to have 2 way data-binding in templates using the `[(model)]` syntax\n    @Output() modelChange: EventEmitter<any> = new EventEmitter<any>();\n\n\n    propagateChange = (_: any) => {};\n\n    ngOnInit() {\n    }\n\n    select(selected: any) {\n        this.propagateChange(selected);\n    }\n\n    writeValue(value: any) {\n        if (!this.model) {\n            this.model = value;\n        }\n    }\n\n    registerOnChange(fn: (_: any) => {}) {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched() {}\n}\n","<dku-bs-select\n    [params]=\"params\" \n    (modelChange)=\"select($event)\" \n    [model]=\"model\" \n    [list]=\"list\" \n    [layout]=\"layout\" \n    [ngOptions]=\"ngOptions\" \n    [required]=\"required\" \n    [optionsDescriptions]=\"optionsDescriptions\"\n    [dataActionsBox]=\"dataActionsBox\" \n    [dataLiveSearch]=\"dataLiveSearch\"\n    [dkuMultiple]=\"dkuMultiple\"\n></dku-bs-select>","import { ValidatorFn } from '@angular/forms';\n\nexport class DkuValidators {\n    static float(): ValidatorFn {\n        return control => {\n            const value = control.value;\n            if (value == null || value.length === 0) {\n                // don't validate empty values to allow optional controls\n                return null;\n            }\n            return isNaN(value) ? { isFloat: false } : null;\n        };\n    }\n}\n","<table *ngIf=\"editedItems && editedItems.length; else empty\">\n    <tbody>\n        <tr *ngFor=\"let item of editedItems; let i = index\" class=\"boundary__row\"><td class=\"boundary__value\">{{item}}</td><td class=\"boundary__separator\"></td><td (click)=\"remove(i)\" class=\"boundary__remove\"><i class=\"icon-trash\"></i></td></tr>\n    </tbody>\n</table>\n<ng-template #empty>\n    <p>(no value)</p>\n</ng-template>\n<div [formGroup]=\"addForm\">\n    <input type=\"number\" formControlName=\"value\" placeholder=\"Bin boundary to add\" (keydown.enter)=\"add($event)\">\n    <button type=\"button\" class=\"btn btn--primary\" (click)=\"add($event)\" [disabled]=\"addForm.invalid\">Add</button>\n</div>\n","import { Component, forwardRef } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport _ from 'lodash';\nimport { DkuValidators } from '@utils/dku-validators';\nimport produce from 'immer';\n\n\n@Component({\n    selector: 'simple-number-list',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SimpleNumberListComponent),\n            multi: true\n        }\n    ],\n    templateUrl: './simple-number-list.component.html',\n    styleUrls: ['./simple-number-list.component.less']\n})\nexport class SimpleNumberListComponent implements ControlValueAccessor {\n    editedItems: number[];\n\n    addForm: FormGroup;\n\n    onChange: Function;\n    onTouched: Function;\n\n    constructor(\n        private fb: FormBuilder\n    ) {\n        this.addForm = this.fb.group({\n            value: this.fb.control(null, [Validators.required, DkuValidators.float()])\n        });\n    }\n\n    add(event: Event) {\n        const newItem: number = parseFloat(this.addForm.controls.value.value);\n        if (!this.editedItems) { this.editedItems = []; }\n        this.editedItems = [...this.editedItems, newItem];\n        this.editedItems = _.uniq(this.editedItems.sort((x, y) => x - y));\n        if (this.onChange) { this.onChange(this.editedItems); }\n        this.addForm.reset({ value: null });\n        event.preventDefault();\n    }\n\n    remove(index: number) {\n        this.editedItems = produce(this.editedItems, editedItems => { editedItems.splice(index, 1); });\n        if (this.onChange) { this.onChange(this.editedItems); }\n    }\n\n    writeValue(obj: any): void {\n        this.editedItems = obj;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        isDisabled ? this.addForm.disable() : this.addForm.enable();\n    }\n}\n","<ng-container [formGroup]=\"configForm\">\n    <ng-container *ngIf=\"isCategorical; else NUMERICAL\">\n        <div class=\"control-group\">\n            <label class=\"control-label\">Max nb. of bins</label>\n            <div class=\"controls\">\n                <input\n                    type=\"number\"\n                    min=\"1\"\n                    formControlName=\"maxValues\"\n                >\n            </div>\n        </div>\n        <div\n            class=\"control-group\"\n        >\n            <label>\n                <input\n                    type=\"checkbox\"\n                    class=\"form__checkbox\"\n                    formControlName=\"groupWithOthers\"\n                >\n                Group extra values in an \"Others\" category\n            </label>\n        </div>\n    </ng-container>\n    <ng-template #NUMERICAL>\n        <div class=\"control-group\">\n            <label class=\"control-label\">Binning mode</label>\n            <div class=\"controls binning-selector\">\n                <dku-bs-select-form-control\n                    formControlName=\"binningMode\"\n                    ngOptions=\"v.key as v.label for v in list\"\n                    [list]=\"supportedBinningModes\"\n                    [layout]=\"'list'\"\n                >\n                </dku-bs-select-form-control>\n            </div>\n            <label class=\"control-label\">\n                <ng-container [ngSwitch]=\"configForm.value.binningMode\">\n                    <ng-container *ngSwitchCase=\"'AUTO'\">Max nb. of bins</ng-container>\n                    <ng-container *ngSwitchCase=\"'FIXED_NB'\">Nb. of bins</ng-container>\n                    <ng-container *ngSwitchCase=\"'CUSTOM'\">Custom bin boundaries</ng-container>\n                </ng-container>\n            </label>\n                    <div class=\"controls\" *ngIf=\"(configForm.value.binningMode == BinningMode.AUTO) || (configForm.value.binningMode == BinningMode.FIXED_NB)\">\n                <input\n                    type=\"number\"\n                    min=\"1\"\n                    formControlName=\"maxValues\"\n                >\n            </div>\n            <div class=\"controls\" *ngIf=\"configForm.value.binningMode == BinningMode.CUSTOM\">\n                <simple-number-list formControlName=\"customBinningBoundaries\"></simple-number-list>\n            </div>\n        </div>\n    </ng-template>\n</ng-container>\n","import { Component, ChangeDetectionStrategy, Input, OnChanges, SimpleChanges, OnDestroy, forwardRef } from '@angular/core';\nimport { BinningMode } from 'src/generated-sources';\nimport { ControlValueAccessor, FormBuilder, Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n\n\nfunction validateBinningBoundaries(control: AbstractControl): ValidationErrors | null {\n    if (!control.value || control.value.length < 1) {\n        return { badBinningBoundary: 'Should have a least one value' };\n    }\n    return null;\n}\n\nfunction adjustCustomBinningValidators(\n    binningMode: BinningMode,\n    customBinningBoundariesControl: AbstractControl, maxValuesControl: AbstractControl,\n    groupWithOthersControl?: AbstractControl): void {\n    switch (binningMode) {\n        case BinningMode.AUTO:\n        case BinningMode.FIXED_NB:\n            customBinningBoundariesControl.clearValidators();\n            maxValuesControl.setValidators([\n                Validators.required,\n                Validators.min(1),\n                Validators.max(100000) // Prevent stupidity\n            ]);\n            if (groupWithOthersControl) {\n                groupWithOthersControl.setValidators([Validators.required]);\n            }\n            break;\n        case BinningMode.CUSTOM:\n            maxValuesControl.clearValidators();\n            if (groupWithOthersControl) {\n                groupWithOthersControl.clearValidators();\n            }\n            customBinningBoundariesControl.setValidators([validateBinningBoundaries]);\n            break;\n        default:\n            throw new Error('Unhandled binning mode');\n    }\n    customBinningBoundariesControl.updateValueAndValidity();\n    maxValuesControl.updateValueAndValidity();\n    if (groupWithOthersControl) {\n        groupWithOthersControl.updateValueAndValidity();\n    }\n}\n\nexport class BinningConfig {\n    binningMode: BinningMode;\n    groupWithOthers: boolean;\n    maxValues: number | null;\n    customBinningBoundaries: number[];\n\n}\n\nclass BinningModeConfig {\n    key: BinningMode;\n    label: string;\n}\n\nexport const BINNING_MODES: BinningModeConfig[] = [{\n    key: BinningMode.AUTO,\n    label: 'Max nb. of bins'\n}, {\n    key: BinningMode.FIXED_NB,\n    label: 'Fixed nb. of bins'\n}, {\n    key: BinningMode.CUSTOM,\n    label: 'Custom bins'\n}\n];\n\n@UntilDestroy()\n@Component({\n    selector: 'binning-config',\n    templateUrl: './binning-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/forms.less',\n        './binning-config.component.less'\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => BinningConfigComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => BinningConfigComponent),\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class BinningConfigComponent implements ControlValueAccessor, OnChanges, OnDestroy {\n    @Input() isCategorical: boolean;\n    @Input() binningModes: BinningMode[];\n\n    BinningMode = BinningMode;\n\n    supportedBinningModes: BinningModeConfig[] = BINNING_MODES;\n\n    configForm = this.fb.group({\n        binningMode: this.fb.control(null, [Validators.required]),\n        maxValues: this.fb.control(null),\n        groupWithOthers: this.fb.control(null),\n        customBinningBoundaries: this.fb.control(null)\n    });\n\n\n    onChange: Function;\n    onTouched: Function;\n\n    constructor(\n        private fb: FormBuilder\n    ) {\n        this.configForm.valueChanges.pipe(untilDestroyed(this))\n        .subscribe(formValue => {\n            if (this.onChange) {\n                this.onChange({\n                    binningMode: formValue.binningMode,\n                    maxValues: formValue.maxValues,\n                    groupWithOthers: formValue.groupWithOthers,\n                    customBinningBoundaries: formValue.customBinningBoundaries\n                });\n            }\n        });\n\n        const maxValuesControl = this.configForm.controls.maxValues;\n        const groupWithOthersControl = this.configForm.controls.groupWithOthers;\n        const binningModeControl = this.configForm.controls.binningMode;\n        const customBinningBoundariesControl = this.configForm.controls.customBinningBoundaries;\n\n        binningModeControl.valueChanges.subscribe(\n            binningMode => { adjustCustomBinningValidators(binningMode, customBinningBoundariesControl,\n                maxValuesControl, this.isCategorical ? groupWithOthersControl : undefined); }\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.binningModes) {\n            this.supportedBinningModes = BINNING_MODES.filter(bm => this.binningModes.includes(bm.key));\n        }\n    }\n\n    writeValue(param: BinningConfig): void {\n        this.configForm.patchValue({\n            maxValues: param.maxValues,\n            groupWithOthers: param.groupWithOthers,\n            binningMode: param.binningMode,\n            customBinningBoundaries: param.customBinningBoundaries\n        });\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        isDisabled ? this.configForm.disable() : this.configForm.enable();\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null{\n        return this.configForm.valid ? null : { invalidForm: {valid: false, message: \"Binning config is invalid\"}};\n    }\n\n    ngOnDestroy() {\n    }\n}\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport { CategoricalHistogramCard, Variable, BinningMode } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n    selector: 'categorical-histogram-card-config',\n    templateUrl: './categorical-histogram-card-config.component.html',\n    styleUrls: ['./categorical-histogram-card-config.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CategoricalHistogramCardConfigComponent implements OnChanges, OnDestroy {\n    @Input() params: CategoricalHistogramCard;\n    @Output() paramsChange = new EventEmitter<CategoricalHistogramCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    configForm = this.fb.group({\n        binningConfig: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(private fb: FormBuilder) {\n        this.configForm.valueChanges.pipe(untilDestroyed(this))\n            .subscribe(formValue => this.paramsChange.emit({\n                ...this.params,\n                maxValues: formValue.binningConfig.maxValues,\n                groupOthers: formValue.binningConfig.groupWithOthers\n            }));\n\n        this.configForm.statusChanges.pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                binningConfig: {\n                    maxValues: this.params.maxValues,\n                    groupWithOthers: this.params.groupOthers,\n                    binningMode: BinningMode.AUTO,\n                    customBinningBoundaries: null\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<form\n    [formGroup]=\"configForm\"\n    id=\"config-form\"\n    class=\"dkuform-modal-vertical\"\n>\n    <h4>{{ params.column.name }}</h4>\n    <binning-config formControlName=\"binningConfig\"\n        [isCategorical]=\"true\">\n    </binning-config>\n</form>\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { BivariateBoxPlotCard, Variable } from 'src/generated-sources';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n\n@UntilDestroy()\n@Component({\n    selector: 'bivariate-box-plot-card-config',\n    templateUrl: './bivariate-box-plot-card-config.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BivariateBoxPlotCardConfigComponent implements OnChanges, OnDestroy {\n    @Input() params: BivariateBoxPlotCard;\n    @Output() paramsChange = new EventEmitter<BivariateBoxPlotCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    configForm = this.fb.group({\n        xBinningConfig: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(private fb: FormBuilder) {\n        this.configForm.statusChanges.pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n        this.configForm.valueChanges.pipe(untilDestroyed(this))\n            .subscribe(formValue => {\n                this.paramsChange.emit({\n                    ...this.params,\n                    maxValues: formValue.xBinningConfig.maxValues,\n                    groupOthers: formValue.xBinningConfig.groupWithOthers,\n                    binningMode: formValue.xBinningConfig.binningMode,\n                    customBinningBoundaries: formValue.xBinningConfig.customBinningBoundaries\n                });\n            });\n    }\n\n    get atLeastOneCategoricalVariable() {\n        return this.params.xColumn.type === Variable.Type.CATEGORICAL\n            || this.params.yColumn.type === Variable.Type.CATEGORICAL;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xBinningConfig: {\n                    maxValues: this.params.maxValues,\n                    groupWithOthers: this.params.groupOthers,\n                    customBinningBoundaries: this.params.customBinningBoundaries,\n                    binningMode: this.params.binningMode\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<form\n    [formGroup]=\"configForm\"\n    id=\"config-form\"\n    class=\"dkuform-modal-vertical\"\n>\n    <h4>{{ params.xColumn.name }}</h4>\n    <binning-config\n        formControlName=\"xBinningConfig\"\n        [isCategorical]=\"atLeastOneCategoricalVariable\">\n    </binning-config>\n</form>\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport { UnivariateFrequencyTableCard } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n    selector: 'univariate-frequency-table-card-config',\n    templateUrl: './univariate-frequency-table-card-config.component.html',\n    styleUrls: ['./univariate-frequency-table-card-config.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UnivariateFrequencyTableCardConfigComponent implements OnChanges, OnDestroy {\n    @Input() params: UnivariateFrequencyTableCard;\n    @Output() paramsChange = new EventEmitter<UnivariateFrequencyTableCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    configForm = this.fb.group({\n        maxValues: this.fb.control(null, [\n            Validators.required,\n            Validators.min(1),\n            Validators.max(100000) // Prevent stupidity\n        ])\n    });\n\n    constructor(private fb: FormBuilder) {\n        this.configForm.valueChanges.pipe(untilDestroyed(this))\n            .subscribe(formValue => this.paramsChange.emit({\n                ...this.params,\n                maxValues: formValue.maxValues\n            }));\n\n        this.configForm.statusChanges.pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                maxValues: this.params.maxValues\n            });\n        }\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<form\n    [formGroup]=\"configForm\"\n    id=\"config-form\"\n    class=\"dkuform-modal-vertical\"\n>\n    <div class=\"control-group\">\n        <label class=\"control-label\">Max values</label>\n        <div class=\"controls\">\n            <input\n                type=\"number\"\n                min=\"1\"\n                formControlName=\"maxValues\"\n            >\n        </div>\n    </div>\n</form>\n","<form\n    class=\"dkuform-modal-vertical\"\n    id=\"config-form\"\n    [formGroup]=\"configForm\"\n>\n    <div class=\"control-group\">\n        <div class=\"controls\">\n            <label>\n                <input\n                    type=\"checkbox\"\n                    class=\"form__checkbox\"\n                    formControlName=\"customFreqsEnabled\"\n                >\n                Define custom quantiles\n            </label>\n        </div>\n    </div>\n    <div\n        class=\"control-group\"\n        formArrayName=\"customFreqs\"\n        *ngIf=\"customFreqsEnabled.value\"\n    >\n        <label class=\"control-label\">Custom quantiles</label>\n        <div\n            class=\"controls\"\n            *ngFor=\"let city of customFreqs.controls; index as quantileIndex\"\n        >\n            <input\n                type=\"number\"\n                min=\"0\"\n                step=\"0.001\"\n                max=\"1\"\n                formControlName=\"{{quantileIndex}}\"\n            >\n            &nbsp;\n            <a\n                (click)=\"dropQuantile(quantileIndex)\"\n                class=\"card-options__delete\"\n            >\n                <i class=\"icon-trash\"></i>\n            </a>\n        </div>\n        <button\n            (click)=\"addQuantile()\"\n            class=\"btn btn--secondary\"\n        >\n            + Add a quantile\n        </button>\n    </div>\n</form>\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport { QuantilesTableCard } from 'src/generated-sources';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { FormArrayRepeat } from '@utils/form-array-repeat';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport _ from 'lodash';\n\nconst defaultCustomFreqs = [0, 0.25, 0.5, 0.75, 1];\n\n@UntilDestroy()\n@Component({\n    selector: 'quantiles-table-card-config',\n    templateUrl: './quantiles-table-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/forms.less',\n        './quantiles-table-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class QuantilesTableCardConfigComponent implements OnChanges, OnDestroy {\n    @Input() params: QuantilesTableCard;\n    @Output() paramsChange = new EventEmitter<QuantilesTableCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    customFreqs = new FormArrayRepeat(() => new FormControl(0.5, [\n        Validators.min(0),\n        Validators.max(1),\n        Validators.required\n    ]));\n\n    customFreqsEnabled = new FormControl(false);\n\n    configForm = new FormGroup({\n        customFreqs: this.customFreqs,\n        customFreqsEnabled: this.customFreqsEnabled\n    });\n\n    constructor() {\n        this.configForm.valueChanges.pipe(untilDestroyed(this))\n            .subscribe(formValue => this.paramsChange.emit({\n                ...this.params,\n                customFreqs: formValue.customFreqsEnabled ? _.sortBy(formValue.customFreqs) : null\n            }));\n\n        this.configForm.statusChanges.pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.setValue({\n                customFreqsEnabled: !!this.params.customFreqs,\n                customFreqs: this.params.customFreqs || defaultCustomFreqs\n            });\n        }\n    }\n\n    ngOnDestroy() {\n    }\n\n    addQuantile() {\n        this.customFreqs.add();\n    }\n\n    dropQuantile(index: number) {\n        this.customFreqs.removeAt(index);\n        if (this.customFreqs.controls.length === 0) {\n            this.customFreqsEnabled.setValue(false);\n        }\n    }\n}\n","\nimport { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport { NumericalHistogramCard, Variable } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n\n@UntilDestroy()\n@Component({\n    selector: 'numerical-histogram-card-config',\n    templateUrl: './numerical-histogram-card-config.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumericalHistogramCardConfigComponent implements OnChanges, OnDestroy {\n    @Input() params: NumericalHistogramCard;\n    @Output() paramsChange = new EventEmitter<NumericalHistogramCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    binningMode = this.fb.control(null, [Validators.required]);\n    nbBins = this.fb.control(null);\n    customBinningBoundaries = this.fb.control(null);\n\n    configForm = this.fb.group({\n        binningConfig: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(private fb: FormBuilder) {\n        this.configForm.statusChanges.pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n        this.configForm.valueChanges.pipe(untilDestroyed(this))\n            .subscribe(formValue => {\n                this.paramsChange.emit({\n                    ...this.params,\n                    nbBins: formValue.binningConfig.maxValues,\n                    binningMode: formValue.binningConfig.binningMode,\n                    customBinningBoundaries: formValue.binningConfig.customBinningBoundaries\n                });\n            });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                binningConfig: {\n                    maxValues: this.params.nbBins,\n                    customBinningBoundaries: this.params.customBinningBoundaries,\n                    binningMode: this.params.binningMode\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<form\n    [formGroup]=\"configForm\"\n    id=\"config-form\"\n    class=\"dkuform-modal-vertical\"\n>\n    <h4>{{ params.column.name }}</h4>\n    <binning-config formControlName=\"binningConfig\"\n        [isCategorical]=\"false\">\n    </binning-config>\n</form>\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport { Variable, BinningMode } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { Abstract2DPivotCard } from '@model-main/eda/worksheets/cards/bivariate_header/abstract2-dpivot-card';\n\n\n@UntilDestroy()\n@Component({\n    selector: 'abstract-2d-pivot-card-config',\n    templateUrl: './abstract-2d-pivot-card-config.component.html',\n    styleUrls: ['./abstract-2d-pivot-card-config.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Abstract2DPivotCardConfigComponent implements OnDestroy, OnChanges {\n    @Input() params: Abstract2DPivotCard;\n    @Output() paramsChange = new EventEmitter<Abstract2DPivotCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    configForm = this.fb.group({\n        xBinningConfig: this.fb.control(null, [Validators.required]),\n        yBinningConfig: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(private fb: FormBuilder) {\n        this.configForm.statusChanges.pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n        this.configForm.valueChanges.pipe(untilDestroyed(this))\n            .subscribe(formValue => {\n                this.paramsChange.emit({\n                    ...this.params,\n                    maxValuesX: formValue.xBinningConfig.maxValues,\n                    maxValuesY: formValue.yBinningConfig.maxValues,\n                    groupWithOthersX: formValue.xBinningConfig.groupWithOthers,\n                    groupWithOthersY: formValue.yBinningConfig.groupWithOthers,\n                    xBinningMode: formValue.xBinningConfig.binningMode,\n                    yBinningMode: formValue.yBinningConfig.binningMode,\n                    xCustomBinningBoundaries: formValue.xBinningConfig.customBinningBoundaries,\n                    yCustomBinningBoundaries: formValue.yBinningConfig.customBinningBoundaries,\n                });\n            });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            const xBinningMode = (this.params.xColumn.type === Variable.Type.CATEGORICAL) ? BinningMode.AUTO : (this.params.xBinningMode ? this.params.xBinningMode : BinningMode.AUTO);\n            const yBinningMode = (this.params.yColumn.type === Variable.Type.CATEGORICAL) ? BinningMode.AUTO : (this.params.yBinningMode ? this.params.yBinningMode : BinningMode.AUTO);\n\n            this.configForm.patchValue({\n                xBinningConfig:  {\n                    maxValues: this.params.maxValuesX,\n                    groupWithOthers: this.params.groupWithOthersX,\n                    binningMode: xBinningMode,\n                    customBinningBoundaries: this.params.xCustomBinningBoundaries,\n                },\n                yBinningConfig: {\n                    maxValues: this.params.maxValuesY,\n                    groupWithOthers: this.params.groupWithOthersY,\n                    binningMode: yBinningMode,\n                    customBinningBoundaries: this.params.yCustomBinningBoundaries,\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n    }\n\n    get isXCategorical(): boolean {\n        return this.params.xColumn.type === Variable.Type.CATEGORICAL;\n    }\n\n\n    get isYCategorical(): boolean {\n        return this.params.yColumn.type === Variable.Type.CATEGORICAL;\n    }\n}\n\n\n\n","<form\n    [formGroup]=\"configForm\"\n    id=\"config-form\"\n    class=\"dkuform-modal-vertical\"\n>\n    <fieldset>\n        <h4>{{ params.xColumn.name }}</h4>\n        <binning-config formControlName=\"xBinningConfig\"\n            [isCategorical]=\"isXCategorical\">\n        </binning-config>\n    </fieldset>\n    <fieldset>\n        <h4>{{ params.yColumn.name }}</h4>\n        <binning-config formControlName=\"yBinningConfig\"\n            [isCategorical]=\"isYCategorical\">\n        </binning-config>\n    </fieldset>\n</form>\n","import { Component, ChangeDetectionStrategy, Input, EventEmitter, Output, OnDestroy, OnChanges } from '@angular/core';\nimport { ScatterPlotCard } from 'src/generated-sources';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n    selector: 'scatter-plot-card-config',\n    templateUrl: './scatter-plot-card-config.component.html',\n    styleUrls: ['./scatter-plot-card-config.component.less']\n})\nexport class ScatterPlotCardConfigComponent implements OnDestroy, OnChanges {\n    @Input() params: ScatterPlotCard;\n    @Output() paramsChange = new EventEmitter<ScatterPlotCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    configForm = new FormGroup({\n        symbolSize: new FormControl(null, [\n            Validators.min(1),\n            Validators.max(50),\n            Validators.required\n        ])\n    });\n\n    constructor() {\n        this.configForm.valueChanges.pipe(untilDestroyed(this))\n            .subscribe(formValue => this.configForm.valid && this.paramsChange.emit({\n                ...this.params,\n                symbolSize: formValue.symbolSize\n            }));\n\n        this.configForm.statusChanges.pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnChanges() {\n        this.configForm.patchValue({\n            symbolSize: this.params.symbolSize\n        });\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<form\n    [formGroup]=\"configForm\"\n    id=\"config-form\"\n    class=\"dkuform-modal-vertical\"\n>\n    <div class=\"control-group\">\n        <label class=\"control-label\">Symbol size</label>\n        <div class=\"controls\">\n            <label>\n                <input\n                    type=\"number\"\n                    formControlName=\"symbolSize\"\n                >\n            </label>\n        </div>\n    </div>\n</form>\n","import { FormGroup, ValidatorFn, AbstractControl } from '@angular/forms';\n\n/*\n    Validate that at least { min } checkboxes are checked given a set of checkbox types (ids)\n*/\nexport function minCheckedValidator(checkboxTypes: string[], min = 1): ValidatorFn {\n    return function validate(formGroup: AbstractControl) {\n        let checked = 0;\n\n        checkboxTypes.forEach(checkbox => {\n            const control = (formGroup as FormGroup).controls[checkbox];\n            if (control.value && control.enabled) {\n                checked++;\n            }\n        });\n\n        return checked < min ? {\n            minNotChecked: true\n        } : null;\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { formatDate } from '@angular/common';\n\nexport abstract class WT1Service {\n    abstract event(type: string, params: { [index: string]: any }): void;\n    abstract configure(args: {\n        dipInstanceId?: string;\n        licenseKind?: string;\n        distrib?: string;\n        distribVersion?: string;\n        registrationChannel?: string;\n        isAutomation?: string;\n        version?: string;\n        login?: string;\n        udr?: boolean;\n    }): void;\n}\n\n@Injectable()\nexport class StandaloneWT1Service extends WT1Service {\n    private configured = false;\n    private enabled = true;\n    private dlid: string;\n    private unconfiguredEvents: any[] = [];\n    private wt1Queue: any[];\n\n    private dkuHashCode(value: string): number {\n        let hash = 0;\n        let char: number;\n        if (value.length === 0) {\n            return hash;\n        }\n        for (let i = 0; i < value.length; i++) {\n            char = value.charCodeAt(i);\n            // tslint:disable-next-line: no-bitwise\n            hash = ((hash << 5) - hash) + char;\n            // tslint:disable-next-line: no-bitwise\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    }\n\n    configure(args: {\n        dipInstanceId?: string;\n        licenseKind?: string;\n        distrib?: string;\n        distribVersion?: string;\n        registrationChannel?: string;\n        isAutomation?: string;\n        version?: string;\n        login?: string;\n        udr?: boolean;\n    }): void {\n        this.dlid = (Math.random().toString(36) + '00000000000000000').slice(2, 12);\n        this.wt1Queue = (window as any)._wt1Q = [];\n        if (args.dipInstanceId) {\n            this.wt1Queue.push(['setVisitorParam', 'dipInstanceId', args.dipInstanceId]);\n        }\n        if (args.licenseKind) {\n            this.wt1Queue.push(['setVisitorParam', 'dssLicenseKind', args.licenseKind]);\n        }\n        if (args.distrib) {\n            this.wt1Queue.push(['setVisitorParam', 'bkdDistrib', args.distrib]);\n        }\n        if (args.distribVersion) {\n            this.wt1Queue.push(['setVisitorParam', 'bkdDistribVersion', args.distribVersion]);\n        }\n        if (args.registrationChannel) {\n            this.wt1Queue.push(['setVisitorParam', 'regChannel', args.registrationChannel]);\n        }\n        this.wt1Queue.push(['setVisitorParam', 'isAutomation', args.isAutomation]);\n        this.wt1Queue.push(['setVisitorParam', 'dssVersion', args.version || 'unknown']);\n        if (args.login) {\n            this.wt1Queue.push(['setSessionParam', 'dssUser', this.dkuHashCode(args.login)]);\n            this.wt1Queue.push(['setVisitorParam', 'vdssUser', this.dkuHashCode(args.login)]);\n        }\n        if (!args.udr || (window as any).devInstance) {\n            this.enabled = false;\n        }\n        this.configured = true;\n        if (this.enabled) {\n            this.unconfiguredEvents.forEach(event => this.wt1Queue.push(event));\n            // Load the JS library that will read _wt1Q array\n            (() => {\n                const script = document.createElement('script');\n                script.src = '//tracker.dataiku.com/js/track.js';\n                script.type = 'text/javascript';\n                script.async = true;\n                document.head.appendChild(script);\n            })();\n        }\n    }\n\n    event(type: string, params: { [index: string]: any } = {}): void {\n        if ((window as any).devInstance) {\n            const formattedDate = formatDate(new Date(), 'HH:mm:ss.SSS', 'en-US', 'UTC');\n            // tslint:disable-next-line: no-console\n            console.debug('[' + formattedDate + '] WT1: ' + type, params);\n        }\n        if (!this.enabled) {\n            return;\n        }\n        params.type = type;\n        params.dlid = this.dlid;\n        if (!this.configured) {\n            // store the event while the service is not configured\n            this.unconfiguredEvents.push(['trackEvent', params]);\n        } else {\n            // otherwise push the event in the queue, the JS lib will handle it\n            this.wt1Queue.push(['trackEvent', params]);\n        }\n    }\n}\n\n@Injectable()\nexport class LegacyWT1Service extends WT1Service {\n    configure(args: {\n        dipInstanceId?: string;\n        licenseKind?: string;\n        distrib?: string;\n        distribVersion?: string;\n        registrationChannel?: string;\n        isAutomation?: string;\n        version?: string;\n        login?: string;\n        udr?: boolean;\n    }): void {\n        console.warn('Cannot configure WT1 service when configured to use the AngularJS service');\n    }\n\n    event(type: string, params: { [index: string]: any } = {}): void {\n        // Retrive the WT1 AngularJS service referenced in window (no configuration needed)\n        const wt1Svc = (window as any).WT1SVC;\n        if (!wt1Svc) {\n            console.warn('WT1 AngularJS service is not found');\n        } else {\n            wt1Svc.event(type, params);\n        }\n    }\n}\n","import { PipeTransform, Pipe } from '@angular/core';\n\n@Pipe({\n    name: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\n    transform(items: any[], query: string, key?: string) {\n        let results = items ? items : [];\n        query = query.toLowerCase();\n\n        if (query) {\n            results = items.filter(item => {\n                const i = key ? item[key].toLowerCase() : item.toLowerCase();\n                return i.indexOf(query) >= 0;\n            });\n        }\n\n        return results;\n    }\n}","<div class=\"list-box__search flex std-list-search-box with-icon\" style=\"flex: 0;\">\n    <div class=\"std-list-search-box list-control-widget\" style=\"margin: 0\">\n        <span class=\"add-on\">\n            <i class=\"icon-dku-search\"></i>\n        </span>\n        <input type=\"search\" class=\"list__search-input\" placeholder=\"Search\" [(ngModel)]=\"query\" >\n    </div>\n</div>\n<cdk-virtual-scroll-viewport [itemSize]=\"38\" class=\"list-box__main\" [qa]=\"'eda-available-variables'\">\n    <ul class=\"list-box__items\" cdkDropList [cdkDropListDisabled]=\"!dragDropable\"\n        [cdkDropListSortingDisabled]=\"!sortDraggable\" (cdkDropListDropped)=\"drop($event)\"\n    >\n        <li class=\"drag-drop-placeholder--invisible\" *ngIf=\"currentList.length === 0\"><i class=\"list-box__icon\"></i></li>\n        <ng-container *cdkVirtualFor=\"let item of currentList | filter: query:'name'; trackBy: trackByVariableName\">\n            <li class=\"list-box__item\" [ngClass]=\"{ 'list-box__item--selected': item.selected, 'list-box__item--disabled': item.disabled }\"\n                cdkDrag\n                [cdkDragDisabled]=\"item.disabled\"\n                (cdkDragStarted)=\"dragStarted($event)\"\n                [cdkDragData]=\"item\"\n                [matTooltip]=\"item.disabled ? disabledMessage : ''\"\n            >\n                <a class=\"list-box__link\" (click)=\"selectItem($event, item)\"\n                    [qa]=\"{'eda-variable': {name: item.name, type: item.type}}\">\n                    <i class=\"list-box__icon\" [ngClass]=\"{ 'icon-font': item.type === Variable.Type.CATEGORICAL, 'icon-number': item.type === Variable.Type.CONTINUOUS }\" ></i>\n                    {{ item.name }}\n                </a>\n                <div class=\"drag-drop-placeholder\" *cdkDragPlaceholder><i class=\"list-box__icon\" [ngClass]=\"{ 'icon-font': item.type === Variable.Type.CATEGORICAL, 'icon-number': item.type === Variable.Type.CONTINUOUS }\" ></i>Variable(s)</div>\n                <div class=\"drag-drop-preview\" *cdkDragPreview><i class=\"list-box__icon\" [ngClass]=\"{ 'icon-font': item.type === Variable.Type.CATEGORICAL, 'icon-number': item.type === Variable.Type.CONTINUOUS }\"></i>\n                        Variable(s)\n                </div>\n            </li>\n        </ng-container>\n    </ul>\n</cdk-virtual-scroll-viewport>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport produce from 'immer';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { Variable } from 'src/generated-sources';\nimport { ObservableInput } from 'observable-input';\nimport { Observable } from 'rxjs';\nimport { CdkDragDrop, CdkDragStart } from '@angular/cdk/drag-drop';\n\n@Component({\n    selector: 'list-box',\n    templateUrl: './list-box.component.html',\n    styleUrls: [\n        '../../../shared-styles/list-box.less',\n        './list-box.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListBoxComponent implements OnInit {\n    @Input() @ObservableInput() list: Observable<CardWizardVariable[]>;\n    @Input() countTitle = '';\n    @Input() height?: number;\n    @Input() disabledMessage = '';\n    @Input() dragDropable = false;\n    @Input() sortDraggable = false;\n    @Output() select = new EventEmitter<CardWizardVariable[]>();\n    @Output() dropped = new EventEmitter<CdkDragDrop<CardWizardVariable[]>>();\n\n    query = '';\n    Variable = Variable;\n    lastSelectedItem: CardWizardVariable | null;\n    currentList: CardWizardVariable[] = [];\n\n    constructor() { }\n\n    ngOnInit() {\n        this.list.\n            subscribe(\n                list => {\n                    if (list && list.length) {\n                        this.lastSelectedItem = list[0];\n                    } else {\n                        this.lastSelectedItem = null;\n                    }\n                    this.currentList = list;\n                }\n            );\n    }\n\n    // whether variable is selected or not\n    selectItem(event: MouseEvent, item: CardWizardVariable) {\n        if (!item.disabled) {\n            const previousItem = this.lastSelectedItem;\n\n            item.selected = !item.selected;\n\n            this.lastSelectedItem = item;\n\n            // if shift was pressed, select all items in between previous item\n            // and the item we just clicked on\n            if (event.shiftKey) {\n                let prevIndex = this.currentList.indexOf(previousItem!);\n                prevIndex = prevIndex >= 0 ? prevIndex : 0;\n                const currIndex = this.currentList.indexOf(item);\n                const startIndex = prevIndex < currIndex ? prevIndex : currIndex;\n                const endIndex = currIndex >= prevIndex ? currIndex : prevIndex;\n\n                for (let i = startIndex; i <= endIndex; i++) {\n                    this.currentList[i].selected = item.selected; // based on select state of clicked item\n                }\n            }\n\n            // emit all selected items\n            this.select.emit(this.currentList.filter(v => v.selected));\n        }\n    }\n\n    drop(event: CdkDragDrop<CardWizardVariable[]>): void {\n        this.dropped.emit(event);\n    }\n\n    dragStarted(ev: CdkDragStart): void {\n        const selectedItems = this.currentList.filter(v => v.selected);\n        const items = (selectedItems && selectedItems.length) ? selectedItems : [ev.source.data];\n        ev.source.data = items;\n    }\n\n    trackByVariableName(index: number, variable: CardWizardVariable) {\n        return variable.name;\n    }\n}\n","<div class=\"list-box__main vertical-flex\">\n    <ul class=\"list-box__items flex\" cdkDropList [cdkDropListDisabled]=\"!dragDropable\"\n        [cdkDropListSortingDisabled]=\"!sortDraggable\" (cdkDropListDropped)=\"drop($event)\"\n        [class.drag-drop-container-empty]=\"!list || !list.length\"\n    >\n        <ng-container *ngFor=\"let item of list\">\n            <li class=\"list-box__item\" *ngIf=\"item.name !== undefined\" [qa]=\"{'list-box-item': {variable: item.name}}\"\n                [ngClass]=\"{ 'list-box__item--selected': item.selected, 'list-box__item--disabled': item.disabled, 'list-box__item--hide-on-drop': hideItemsOnDrop}\"\n                cdkDrag [cdkDragData]=\"item\" [cdkDragDisabled]=\"item.disabled\" (cdkDragStarted)=\"dragStarted($event)\"\n            >\n                <a class=\"list-box__link\" (click)=\"selectItem($event, item)\">\n                    <i class=\"list-box__icon\" [ngClass]=\"{'icon-font': item.type === Variable.Type.CATEGORICAL, 'icon-number': item.type === Variable.Type.CONTINUOUS }\"\n                    ></i>\n                    {{ item.name }}\n                </a>\n                <a class=\"list-box__delete\" (click)=\"removeItem(item);\" [qa]=\"{'list-box-item': {variable: item.name, action: 'delete'}}\">\n                    <i class=\"icon-trash\"></i>\n                </a>\n                <div class=\"drag-drop-placeholder\" *cdkDragPlaceholder><i class=\"list-box__icon\" [ngClass]=\"{ 'icon-font': item.type === Variable.Type.CATEGORICAL, 'icon-number': item.type === Variable.Type.CONTINUOUS }\" ></i>Variable(s)</div>\n                <div class=\"drag-drop-preview\" *cdkDragPreview><i class=\"list-box__icon\" [ngClass]=\"{ 'icon-font': item.type === Variable.Type.CATEGORICAL, 'icon-number': item.type === Variable.Type.CONTINUOUS }\"></i>\n                        Variable(s)\n                </div>\n            </li>\n        </ng-container>\n        <div class=\"drag-drop-placeholder-text\" *ngIf=\"placeHolderText && (!list || !list.length)\">\n            {{placeHolderText}}\n        </div>\n    </ul>\n</div>\n","import { Component, OnInit, ChangeDetectionStrategy, Output, Input, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport _ from 'lodash';\nimport { Variable } from 'src/generated-sources';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { CdkDragDrop, CdkDragStart } from '@angular/cdk/drag-drop';\n\n@Component({\n    selector: 'list-box-form-control',\n    templateUrl: './list-box-form-control.component.html',\n    styleUrls: [\n        '../../../shared-styles/card-wizard.less',\n        '../../../shared-styles/list-box.less',\n        './list-box-form-control.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ListBoxFormControlComponent),\n            multi: true\n        }\n    ]\n})\nexport class ListBoxFormControlComponent implements OnInit, ControlValueAccessor {\n    @Input() height?: number;\n    @Input() dragDropable = false;\n    @Input() sortDraggable = false;\n    @Input() multiselectable = false;\n    @Input() hideItemsOnDrop = false;\n    @Input() placeHolderText: string;\n    @Output() remove = new EventEmitter<Variable>();\n    @Output() select = new EventEmitter<CardWizardVariable[]>();\n    @Output() dropped = new EventEmitter<CdkDragDrop<CardWizardVariable[]>>();\n    list: CardWizardVariable[] = [];\n    // whether we pass array or a single object\n    isArray = true;\n    Variable = Variable;\n    lastSelectedItem: CardWizardVariable | null;\n\n    propagateChange = (_: any) => {};\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n    removeItem(item: Variable) {\n        this.list = this.list.filter(i => i.name !== item.name);\n        this.propagateChange(this.isArray ? this.list : (this.list[0]) || {});\n    }\n\n    writeValue(value: any) {\n        this.list = _.cloneDeep(Array.isArray(value) ? value : Object.keys(value).length ? [value] : []);\n    }\n\n    registerOnChange(fn: (_: any) => {}) {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched() {\n    }\n\n    // whether variable is selected or not\n    selectItem(event: MouseEvent, item: CardWizardVariable) {\n        if (!this.multiselectable) {\n            return;\n        }\n        if (!item.disabled) {\n            const previousItem = this.lastSelectedItem;\n\n            item.selected = !item.selected;\n\n            this.lastSelectedItem = item;\n\n            // if shift was pressed, select all items in between previous item\n            // and the item we just clicked on\n            if (event.shiftKey) {\n                let prevIndex = this.list.indexOf(previousItem!);\n                prevIndex = prevIndex >= 0 ? prevIndex : 0;\n                const currIndex = this.list.indexOf(item);\n                const startIndex = prevIndex < currIndex ? prevIndex : currIndex;\n                const endIndex = currIndex >= prevIndex ? currIndex : prevIndex;\n\n                for (let i = startIndex; i <= endIndex; i++) {\n                    this.list[i].selected = item.selected; // based on select state of clicked item\n                }\n            }\n\n            // emit all selected items\n            this.select.emit(this.list.filter(v => v.selected));\n        }\n    }\n\n    drop(event: CdkDragDrop<CardWizardVariable[]>): void {\n        this.dropped.emit(event);\n    }\n\n    dragStarted(ev: CdkDragStart): void {\n        const selectedItems = this.list.filter(v => v.selected);\n        const items = (selectedItems && selectedItems.length) ? selectedItems : [ev.source.data];\n        ev.source.data = items;\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\">\n    <div cdkDropListGroup class=\"card-header-editor horizontal-flex\">\n        <div class=\"card-header-editor__column\">\n            <span class=\"card-header-editor__description\">1. Select variables</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\">\n                    {{ count }} available variables\n                </h4>\n            </div>\n            <list-box [list]=\"currentVariables$ | async\" [countTitle]=\"'available variables'\"\n                class=\"vertical-flex card-header-editor__list\"\n                (select)=\"selectedAvailableVariables = $event\"\n                (dropped)=\"onDropVariables($event)\"\n                dragDropable=\"true\"\n                sortDraggable=\"true\"\n                multiselectable=\"true\"\n                dragDropable=\"true\">\n            </list-box>\n            <div class=\"card-header-editor__footnote\">\n                <i class=\"icon-lightbulb\"></i> Use <strong>Shift + Click</strong> to select a range of variables.\n            </div>\n        </div>\n        <div class=\"card-header-editor__column\">\n            <span class=\"card-header-editor__description\">2. Add variables</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\"\n                    [matTooltip]=\"tooManySelectedVariablesWarning\">\n                    {{ configForm.value.xColumns.length }} variables to describe <i *ngIf=\"tooManySelectedVariablesWarning\" class=\"icon-warning-sign text-error\"></i>\n                </h4>\n                <div>\n                    <button class=\"btn btn--text btn--primary btn--icon\" (click)=\"add()\"\n                        [disabled]=\"!canAdd\"\n                        [qa]=\"{'eda-add-variables-button': {as: 'variable'}}\">\n                        <i class=\"icon-plus\"></i>\n                    </button>\n                    <button class=\"btn btn--text btn--primary btn--icon\" (click)=\"del()\"\n                        [disabled]=\"selectedSelectedVariables.length < 1\"\n                        [qa]=\"{'eda-del-variables-button': {as: 'variable'}}\">\n                        <i class=\"icon-trash\"></i>\n                    </button>\n                </div>\n            </div>\n            <list-box-form-control formControlName=\"xColumns\"\n                class=\"vertical-flex card-header-editor__list\"\n                dragDropable=\"true\"\n                sortDraggable=\"true\"\n                multiselectable=\"true\"\n                placeHolderText=\"(Drag variable(s) here)\"\n                (dropped)=\"onDropAdd($event)\"\n                (select)=\"selectedSelectedVariables = $event\">\n            </list-box-form-control>\n        </div>\n        <div class=\"card-header-editor__column\">\n            <span class=\"card-header-editor__description\">3. Select options</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\">Options</h4>\n            </div>\n            <div class=\"card-header-editor__options\">\n                <div class=\"control-group\" *ngFor=\"let option of options\" [ngClass]=\"{'card-option--disabled': !option.enabled}\">\n                    <label class=\"control-label control-label--flex\">\n                        <!-- show fake checkbox when disabled so that it's immediately checked when activated for the first time -->\n                        <input type=\"checkbox\" class=\"control\" *ngIf=\"!option.enabled\" disabled>\n                        <input type=\"checkbox\" class=\"control\" formControlName=\"{{ option.id }}\" *ngIf=\"option.enabled\">\n                        {{ option.name }}\n                    </label>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport _ from 'lodash';\nimport { UnivariateHeaderCard, Variable } from 'src/generated-sources';\nimport { Observable, combineLatest } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { minCheckedValidator } from '@utils/min-checked-validator';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { MAX_HEADER_COLUMNS, CANNOT_ADD_REASON, identicalVariableNames, unselectVariables } from '@features/eda/card-utils';\nimport { CdkDragDrop, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { WT1Service } from '@core/dataiku-wt1/wt1.service';\n\n@UntilDestroy()\n@Component({\n    selector: 'univariate-header-card-config',\n    templateUrl: './univariate-header-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './univariate-header-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UnivariateHeaderCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: UnivariateHeaderCard ;\n    @Output() paramsChange = new EventEmitter<UnivariateHeaderCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n    @Output() validityTooltipChange = new EventEmitter<string>(true);\n\n    allVariables$: Observable<CardWizardVariable[]>;\n    xColumns$: Observable<Variable[]>;\n    currentVariables$: Observable<CardWizardVariable[]>;\n    selectedAvailableVariables = [];\n    selectedSelectedVariables = [];\n    count = 0;\n    tooManySelectedVariablesWarning = '';\n\n    options = [{\n        name: 'Histogram',\n        id: 'showHistogram',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CATEGORICAL\n        }]\n    }, {\n        name: 'Quantile table',\n        id: 'showQuantile',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS\n        }]\n    }, {\n        name: 'Frequency table',\n        id: 'showFrequencyTable',\n        variableTypes: [{\n            x: Variable.Type.CATEGORICAL\n        }]\n    }, {\n        name: 'Summary Stats',\n        id: 'showSummary',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CATEGORICAL\n        }]\n    }, {\n        name: 'Box Plot',\n        id: 'showBoxPlot',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS\n        }]\n    }];\n\n    configForm = this.fb.group({\n        xColumns: this.fb.control([], [Validators.required]),\n        showBoxPlot: this.fb.control(true, [Validators.required]),\n        showFrequencyTable: this.fb.control(true, [Validators.required]),\n        showHistogram: this.fb.control(true, [Validators.required]),\n        showQuantile: this.fb.control(true, [Validators.required]),\n        showSummary: this.fb.control(true, [Validators.required]),\n    }, { validator: minCheckedValidator(this.options.map(o => o.id)) });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService,\n        private wt1Service: WT1Service\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                xColumns: formValue.xColumns,\n                showBoxPlot: formValue.showBoxPlot,\n                showFrequencyTable: formValue.showFrequencyTable,\n                showHistogram: formValue.showHistogram,\n                showQuantile: formValue.showQuantile,\n                showSummary: formValue.showSummary\n            }));\n    }\n\n    ngOnInit() {\n        const xColumns = this.configForm.controls.xColumns.value as Variable[]; // need starting value for combineLatest\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n        this.xColumns$ = this.configForm.controls.xColumns.valueChanges;\n\n        this.currentVariables$ = combineLatest([this.allVariables$, this.xColumns$.pipe(startWith(xColumns))])\n            .pipe(\n                map(([all, x]) => {\n                    // remove x variables from current variable list\n                    return all.filter(variable => x.findIndex(xVariable => xVariable.name === variable.name) < 0).map(({selected, ...attrs}) => attrs);\n                }),\n                tap(() => {\n                    this.selectedSelectedVariables = [];\n                    this.selectedSelectedVariables = [];\n                })\n            );\n\n        this.currentVariables$\n            .pipe(untilDestroyed(this))\n            .subscribe(variables => {\n                this.count = variables.length;\n            });\n\n        this.xColumns$\n            .pipe(untilDestroyed(this))\n            .subscribe((columns) => this.toggleOptions(columns));\n\n            combineLatest([this.configForm.statusChanges.pipe(startWith('')), this.xColumns$.pipe(startWith(xColumns))])\n            .pipe(untilDestroyed(this))\n            .subscribe(([sc, curColumns]) => {\n                const overLimit = curColumns.length > MAX_HEADER_COLUMNS;\n                this.validityChange.emit(this.configForm.valid && !overLimit);\n                if (overLimit) {\n                    this.tooManySelectedVariablesWarning = `${curColumns.length} variables selected. Max is ${MAX_HEADER_COLUMNS}.`;\n                } else {\n                    this.tooManySelectedVariablesWarning = '';\n                }\n                this.validityTooltipChange.emit(this.tooManySelectedVariablesWarning);\n            });\n    }\n\n    toggleOptions(columns: Variable[]) {\n        // get what variable types have already been added: either continuous or categorical.\n        const addedTypes = columns.map((v: Variable) => v.type).filter((v: Variable.Type, i: number, arr: Variable.Type[]) => arr.indexOf(v) === i);\n\n        this.options.forEach((option: any) => {\n            option.enabled = !!option.variableTypes.filter((type: any) => addedTypes.includes(type.x)).length;\n\n            if (option.enabled) {\n                this.configForm.get(option.id)!.enable();\n            } else {\n                this.configForm.get(option.id)!.disable();\n            }\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xColumns: this.params.xColumns,\n                showBoxPlot: this.params.showBoxPlot,\n                showFrequencyTable: this.params.showFrequencyTable,\n                showHistogram: this.params.showHistogram,\n                showQuantile: this.params.showQuantile,\n                showSummary: this.params.showSummary\n            });\n\n            this.toggleOptions(this.params.xColumns);\n        }\n    }\n\n    add() {\n        this.configForm.patchValue({\n            xColumns: unselectVariables(this.configForm.controls.xColumns.value.concat(this.selectedAvailableVariables))\n        });\n\n        this.selectedAvailableVariables = [];\n        this.selectedSelectedVariables = [];\n    }\n\n    del() {\n        const value = this.configForm.controls.xColumns.value;\n\n        this.configForm.patchValue({\n            xColumns: Array.isArray(value) ? _.differenceWith(value, this.selectedSelectedVariables, identicalVariableNames) : []\n        });\n\n        this.selectedAvailableVariables = [];\n        this.selectedSelectedVariables = [];\n    }\n\n    get canAdd() {\n        return this.selectedAvailableVariables.length > 0;\n    }\n\n    get tooManySelectedVariables() {\n        return this.selectedAvailableVariables.length > MAX_HEADER_COLUMNS;\n    }\n\n    get disabledReason() {\n        if (this.configForm.controls.xColumns.value.length + this.selectedAvailableVariables.length > MAX_HEADER_COLUMNS) {\n            return CANNOT_ADD_REASON.MAX_VARIABLES_EXCEEDED;\n        } else if (this.selectedAvailableVariables.length <= 0) {\n            return CANNOT_ADD_REASON.NO_VARIABLE_SELECTED;\n        }\n\n        return '';\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    onDropAdd(dropped: CdkDragDrop<CardWizardVariable[]>): void {\n        const droppedItems: CardWizardVariable[] = dropped.item.data;\n        droppedItems.forEach(v => v.selected = false);\n        const currentValue = this.configForm.controls.xColumns.value;\n        let newValue: CardWizardVariable[];\n        if (currentValue) {\n            let spliceIndex = dropped.currentIndex;\n            newValue = _.cloneDeep(currentValue);\n            if (dropped.container === dropped.previousContainer) {\n                const indexes = droppedItems.map(d => newValue.findIndex(e => e.name === d.name ));\n                indexes.splice(0, 1);\n                const offset = _.sumBy(indexes, curIndex => curIndex <= spliceIndex ? 1 : 0);\n                spliceIndex -= offset;\n                newValue = _.differenceWith(newValue, droppedItems, identicalVariableNames);\n            }\n            newValue.splice(spliceIndex, 0, ...droppedItems);\n        } else {\n            newValue = droppedItems;\n        }\n        this.configForm.patchValue({\n            xColumns: unselectVariables(newValue)\n        });\n        this.selectedAvailableVariables = [];\n        this.selectedSelectedVariables = [];\n        this.wt1Service.event('statistics-drag-drop-variables', { droppedCount: dropped.item.data.length });\n    }\n\n    onDropVariables(dropped: CdkDragDrop<CardWizardVariable[]>): void {\n        const droppedItems: CardWizardVariable[] = dropped.item.data;\n        droppedItems.forEach(v => v.selected = false);\n\n        const currentXValue = this.configForm.controls.xColumns.value;\n        const newXValue = currentXValue ? _.differenceWith(currentXValue, droppedItems, identicalVariableNames) : currentXValue;\n\n        this.configForm.patchValue({\n            xColumns: unselectVariables(newXValue)\n        });\n        this.selectedAvailableVariables = [];\n        this.selectedSelectedVariables = [];\n        this.wt1Service.event('statistics-drag-drop-variables', { droppedCount: dropped.item.data.length });\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\">\n    <div cdkDropListGroup class=\"card-header-editor horizontal-flex\">\n        <div class=\"card-header-editor__column\">\n            <span class=\"card-header-editor__description\">1. Select variables</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\">\n                    {{ count }} available variables\n                </h4>\n            </div>\n            <list-box [list]=\"currentVariables$ | async\" [countTitle]=\"'available variables'\"\n                (select)=\"selectedVariables = $event\" class=\"vertical-flex card-header-editor__list\"\n                (dropped)=\"onDropVariables($event)\"\n                dragDropable=\"true\"\n                sortDraggable=\"true\"\n                multiselectable=\"true\"\n                dragDropable=\"true\"\n            ></list-box>\n            <div class=\"card-header-editor__footnote\">\n                <i class=\"icon-lightbulb\"></i> Use <strong>Shift + Click</strong> to select a range of variables.\n            </div>\n        </div>\n        <div class=\"card-header-editor__column\">\n            <span class=\"card-header-editor__description\">2. Select their use</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\"\n                    [matTooltip]=\"tooManySelectedVariablesWarning\">\n                    {{ configForm.value.xColumns.length }} selected factor(s) <i *ngIf=\"tooManySelectedVariablesWarning\" class=\"icon-warning-sign text-error\"></i>\n                </h4>\n                <div>\n                    <button class=\"btn btn--text btn--primary btn--icon\" (click)=\"add('xColumns')\" [disabled]=\"!canAddX\"\n                        [qa]=\"{'eda-add-variables-button': {as: 'factor'}}\"\n                        [matTooltip]=\"disabledReasonX\">\n                        <i class=\"icon-plus\"></i>\n                    </button>\n                    <button class=\"btn btn--text btn--primary btn--icon\" (click)=\"del('xColumns')\"\n                        [disabled]=\"selectedFactors.length < 1\"\n                        [qa]=\"{'eda-del-factors-button': {as: 'factor'}}\">\n                        <i class=\"icon-trash\"></i>\n                    </button>\n                </div>\n            </div>\n            <list-box-form-control formControlName=\"xColumns\"\n                class=\"vertical-flex card-header-editor__list card-header-editor__list--multi\"\n                dragDropable=\"true\"\n                sortDraggable=\"true\"\n                multiselectable=\"true\"\n                placeHolderText=\"(Drag factor(s) here)\"\n                (dropped)=\"onDropFactors($event)\"\n                (select)=\"selectedFactors = $event\"\n            ></list-box-form-control>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\">\n                    Response\n                </h4>\n                <div [matTooltip]=\"disabledReasonY\">\n                    <button class=\"btn btn--text btn--primary btn--icon\" (click)=\"add('yColumn')\" [disabled]=\"!canAddY\"\n                        [qa]=\"{'eda-add-variables-button': {as: 'response'}}\">\n                        <i class=\"icon-plus\"></i>\n                    </button>\n                </div>\n            </div>\n            <list-box-form-control formControlName=\"yColumn\"\n                class=\"vertical-flex card-header-editor__list card-header-editor__list--single\"\n                dragDropable=\"true\"\n                hideItemsOnDrop=\"true\"\n                placeHolderText=\"(Drag response here)\"\n                (dropped)=\"onDropResponse($event)\"\n            ></list-box-form-control>\n        </div>\n        <div class=\"card-header-editor__column\">\n            <span class=\"card-header-editor__description\">3. Select options</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\">Options</h4>\n            </div>\n            <div class=\"card-header-editor__options\">\n                <div class=\"control-group\" *ngFor=\"let option of options\" [ngClass]=\"{'card-option--disabled': !option.enabled}\">\n                    <label class=\"control-label control-label--flex\">\n                        <!-- show fake checkbox when disabled so that it's immediately checked when activated for the first time -->\n                        <input type=\"checkbox\" class=\"control\" *ngIf=\"!option.enabled\" disabled>\n                        <input type=\"checkbox\" class=\"control\" formControlName=\"{{ option.id }}\" *ngIf=\"option.enabled\">\n                        {{ option.name }}\n                    </label>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy, ViewChild } from '@angular/core';\nimport _ from 'lodash';\nimport { BivariateHeaderCard, Variable } from 'src/generated-sources';\nimport { Observable, combineLatest } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { minCheckedValidator } from '@utils/min-checked-validator';\nimport { objectNotEmptyValidator } from '@utils/object-not-empty-validator';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { MAX_HEADER_COLUMNS, CANNOT_ADD_REASON, identicalVariableNames, unselectVariables, unselectVariable } from '@features/eda/card-utils';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { WT1Service } from '@core/dataiku-wt1/wt1.service';\n\n@UntilDestroy()\n@Component({\n    selector: 'bivariate-header-card-config',\n    templateUrl: './bivariate-header-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './bivariate-header-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BivariateHeaderCardConfigComponent implements  OnInit, OnChanges, OnDestroy {\n    @Input() params: BivariateHeaderCard;\n    @Output() paramsChange = new EventEmitter<BivariateHeaderCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n    @Output() validityTooltipChange = new EventEmitter<string>(true);\n\n    allVariables$: Observable<CardWizardVariable[]>;\n    xColumns$: Observable<Variable[]>;\n    yColumn$: Observable<Variable>;\n    currentVariables$: Observable<CardWizardVariable[]>;\n    selectedVariables = [];\n    selectedFactors = [];\n    count = 0;\n    tooManySelectedVariablesWarning = '';\n    options = [{\n        name: 'Mosaic Plot',\n        id: 'showMosaicPlot',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CATEGORICAL,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CATEGORICAL\n        }, {\n            x: Variable.Type.CATEGORICAL,\n            y: Variable.Type.CATEGORICAL\n        }]\n    }, {\n        name: 'Scatter Plot',\n        id: 'showScatterPlot',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CONTINUOUS\n        }]\n    }, {\n        name: 'Histogram',\n        id: 'showHistogram',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CATEGORICAL,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CATEGORICAL\n        }, {\n            x: Variable.Type.CATEGORICAL,\n            y: Variable.Type.CATEGORICAL\n        }]\n    }, {\n        name: 'Frequency Table',\n        id: 'showFrequencyTable',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CATEGORICAL,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CATEGORICAL\n        }, {\n            x: Variable.Type.CATEGORICAL,\n            y: Variable.Type.CATEGORICAL\n        }]\n    }, {\n        name: 'Box Plot',\n        id: 'showBoxPlot',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CATEGORICAL,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CATEGORICAL\n        }]\n    }, {\n        name: 'Summary Stats',\n        id: 'showSummary',\n        variableTypes: [{\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CONTINUOUS\n        }, {\n            x: Variable.Type.CONTINUOUS,\n            y: Variable.Type.CATEGORICAL\n        }, {\n            x: Variable.Type.CATEGORICAL,\n            y: Variable.Type.CONTINUOUS\n        }]\n    }];\n\n    configForm = this.fb.group({\n        xColumns: this.fb.control([], [Validators.required]),\n        yColumn: this.fb.control({} as Variable, [objectNotEmptyValidator()]),\n        showBoxPlot: this.fb.control(true, [Validators.required]),\n        showFrequencyTable: this.fb.control(true, [Validators.required]),\n        showHistogram: this.fb.control(true, [Validators.required]),\n        showScatterPlot: this.fb.control(true, [Validators.required]),\n        showMosaicPlot: this.fb.control(true, [Validators.required]),\n        showSummary: this.fb.control(true, [Validators.required]),\n    }, { validator: minCheckedValidator(this.options.map(o => o.id)) });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService,\n        private wt1Service: WT1Service\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                xColumns: formValue.xColumns,\n                yColumn: formValue.yColumn,\n                showBoxPlot: formValue.showBoxPlot,\n                showFrequencyTable: formValue.showFrequencyTable,\n                showHistogram: formValue.showHistogram,\n                showScatterPlot: formValue.showScatterPlot,\n                showMosaicPlot: formValue.showMosaicPlot,\n                showSummary: formValue.showSummary\n            }));\n\n    }\n\n    ngOnInit() {\n        const xColumns = this.configForm.controls.xColumns.value as Variable[]; // need starting value for combineLatest\n        const yColumn = this.configForm.controls.yColumn.value as Variable; // need starting value for combineLatest\n\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n        this.xColumns$ = this.configForm.controls.xColumns.valueChanges;\n        this.yColumn$ = this.configForm.controls.yColumn.valueChanges;\n\n        this.currentVariables$ = combineLatest([this.allVariables$, this.xColumns$.pipe(startWith(xColumns)), this.yColumn$.pipe(startWith(yColumn))])\n            .pipe(\n                map(([all, x, y]) => {\n                    // remove x and y variables from current variable list\n                    return all.filter(variable => x.findIndex(xVariable => xVariable.name === variable.name) < 0).filter(variable => !y || (y.name !== variable.name)).map(({selected, ...attrs}) => attrs);\n                }),\n                tap(() => {\n                    this.selectedFactors = [];\n                    this.selectedVariables = [];\n                })\n            );\n\n        this.currentVariables$\n            .pipe(untilDestroyed(this))\n            .subscribe(variables => {\n                this.count = variables.length;\n            });\n\n        combineLatest([this.xColumns$, this.yColumn$])\n            .pipe(untilDestroyed(this))\n            .subscribe(([x, y]) => this.toggleOptions(x, y));\n\n        combineLatest([this.configForm.statusChanges.pipe(startWith('')), this.xColumns$.pipe(startWith(xColumns))])\n        .pipe(untilDestroyed(this))\n        .subscribe(([sc, curColumns]) => {\n            const overLimit = curColumns.length > MAX_HEADER_COLUMNS;\n            this.validityChange.emit(this.configForm.valid && !overLimit);\n            if (overLimit) {\n                this.tooManySelectedVariablesWarning = `${curColumns.length} variables selected. Max is ${MAX_HEADER_COLUMNS}.`;\n            } else {\n                this.tooManySelectedVariablesWarning = '';\n            }\n            this.validityTooltipChange.emit(this.tooManySelectedVariablesWarning);\n    });\n    }\n\n    toggleOptions(xColumns: Variable[], yColumn: Variable) {\n        const xColumnTypes = xColumns\n            .map((v: Variable) => v.type)\n            .filter((v: Variable.Type, i: number, arr: Variable.Type[]) => arr.indexOf(v) === i);\n        const yColumnType = yColumn ? yColumn.type : '';\n\n        this.options.forEach((option: any) => {\n            option.enabled = !!option.variableTypes\n                .filter((type: any) => xColumnTypes.includes(type.x) && yColumnType === type.y).length;\n\n            if (option.enabled) {\n                this.configForm.get(option.id)!.enable();\n            } else {\n                this.configForm.get(option.id)!.disable();\n            }\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xColumns: this.params.xColumns,\n                yColumn: this.params.yColumn,\n                showBoxPlot: this.params.showBoxPlot,\n                showFrequencyTable: this.params.showFrequencyTable,\n                showHistogram: this.params.showHistogram,\n                showScatterPlot: this.params.showScatterPlot,\n                showMosaicPlot: this.params.showMosaicPlot,\n                showSummary: this.params.showSummary\n            });\n\n            this.toggleOptions(this.params.xColumns, this.params.yColumn);\n        }\n    }\n\n    add(controlName: string) {\n        const value = this.configForm.get(controlName)!.value;\n\n        this.configForm.patchValue({\n            [controlName]: Array.isArray(value) ? unselectVariables(_.unionWith(value, this.selectedVariables, identicalVariableNames)) : unselectVariable(this.selectedVariables[0])\n        });\n\n        this.selectedVariables = [];\n    }\n\n    del(controlName: string) {\n        const value = this.configForm.get(controlName)!.value;\n\n        this.configForm.patchValue({\n            [controlName]: Array.isArray(value) ? _.differenceWith(value, this.selectedFactors, identicalVariableNames) : []\n        });\n\n        this.selectedFactors = [];\n    }\n\n    get canAddX() {\n        return this.selectedVariables.length > 0;\n    }\n\n    get canAddY() {\n        const yValue = this.configForm.get('yColumn')!.value;\n\n        return this.selectedVariables.length === 1 && (typeof yValue === 'undefined' || typeof yValue.name === 'undefined');\n    }\n\n    get disabledReasonX() {\n        if (this.configForm.controls.xColumns.value.length + this.selectedVariables.length > MAX_HEADER_COLUMNS) {\n            return CANNOT_ADD_REASON.MAX_VARIABLES_EXCEEDED;\n        } else if (this.selectedVariables.length <= 0) {\n            return CANNOT_ADD_REASON.NO_VARIABLE_SELECTED;\n        }\n\n        return '';\n    }\n\n    get disabledReasonY() {\n        if (this.selectedVariables.length !== 1) {\n            return CANNOT_ADD_REASON.NOT_EXACTLY_ONE;\n        }\n\n        return '';\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    onDropFactors(dropped: CdkDragDrop<CardWizardVariable[]>): void {\n        const droppedItems: CardWizardVariable[] = dropped.item.data;\n        droppedItems.forEach(v => v.selected = false);\n        const currentXValue = this.configForm.controls.xColumns.value;\n        let newXValue: CardWizardVariable[];\n        if (currentXValue) {\n            let spliceIndex = dropped.currentIndex;\n            newXValue = _.cloneDeep(currentXValue);\n            if (dropped.container === dropped.previousContainer) {\n                const indexes = droppedItems.map(d => newXValue.findIndex(e => e.name === d.name ));\n                indexes.splice(0, 1);\n                const offset = _.sumBy(indexes, curIndex => curIndex <= spliceIndex ? 1 : 0);\n                spliceIndex -= offset;\n                newXValue = _.differenceWith(newXValue, droppedItems, identicalVariableNames);\n            }\n            newXValue.splice(dropped.currentIndex, 0, ...droppedItems);\n        } else {\n            newXValue = droppedItems;\n        }\n        const currentYValue = this.configForm.controls.yColumn.value;\n        const newYValue = currentYValue && _.differenceWith([currentYValue], droppedItems, identicalVariableNames).length ? unselectVariable(currentYValue) : {};\n        this.configForm.patchValue({\n            xColumns: unselectVariables(newXValue),\n            yColumn: newYValue\n        });\n        this.selectedVariables = [];\n        this.selectedFactors = [];\n        this.wt1Service.event('statistics-drag-drop-variables', { droppedCount: dropped.item.data.length });\n    }\n\n    onDropResponse(dropped: CdkDragDrop<CardWizardVariable[]>): void {\n        const droppedItems: CardWizardVariable[] = dropped.item.data;\n        droppedItems.forEach(v => v.selected = false);\n        const currentYValue = this.configForm.controls.yColumn.value;\n        const newYValue = unselectVariable(droppedItems[0]);\n        if (currentYValue === newYValue) {\n            return;\n        }\n        const currentXValue = this.configForm.controls.xColumns.value;\n        const newXValue = currentXValue ? _.differenceWith(currentXValue, [newYValue], identicalVariableNames) : currentXValue;\n        this.configForm.patchValue({\n            xColumns: unselectVariables(newXValue),\n            yColumn: newYValue\n        });\n        this.selectedVariables = [];\n        this.selectedFactors = [];\n        this.wt1Service.event('statistics-drag-drop-variables', { droppedCount: dropped.item.data.length });\n    }\n\n    onDropVariables(dropped: CdkDragDrop<CardWizardVariable[]>): void {\n        const droppedItems: CardWizardVariable[] = dropped.item.data;\n        droppedItems.forEach(v => v.selected = false);\n\n        const currentXValue = this.configForm.controls.xColumns.value;\n        const newXValue = currentXValue ? _.differenceWith(currentXValue, droppedItems, identicalVariableNames) : currentXValue;\n\n        const currentYValue = this.configForm.controls.yColumn.value;\n        const newYValue = currentYValue && _.differenceWith([currentYValue], droppedItems, identicalVariableNames).length ? unselectVariable(currentYValue) : {};\n\n        this.configForm.patchValue({\n            xColumns: unselectVariables(newXValue),\n            yColumn: newYValue\n        });\n        this.selectedVariables = [];\n        this.selectedFactors = [];\n        this.wt1Service.event('statistics-drag-drop-variables', { droppedCount: dropped.item.data.length });\n    }\n}\n","import { FormGroup, ValidatorFn, AbstractControl } from '@angular/forms';\n\n/*\n    Validate that an object is not empty\n*/\nexport function objectNotEmptyValidator(): ValidatorFn {\n    return function validate(control: AbstractControl) {\n        const value = control.value;\n\n        return Object.keys(value).length > 0 && value.constructor === Object ? null : {\n            objectEmpty: true\n        };\n    };\n}\n","import { Component, OnInit, Input, OnChanges, forwardRef, OnDestroy, ChangeDetectorRef, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { Variable } from 'src/generated-sources';\nimport deepEqual from 'fast-deep-equal';\n\ninterface SelectableItem {\n    displayName: string;\n    variable?: CardWizardVariable;\n    disabled: boolean;\n}\n\n\n@Component({\n    selector: 'single-variable-selector',\n    templateUrl: './single-variable-selector.component.html',\n    styleUrls: ['./single-variable-selector.component.less'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SingleVariableSelectorComponent),\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SingleVariableSelectorComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\n    @Input() noVariableLabel?: string;\n    @Input() noneSelectedText = 'Select variable...';\n    @Input() variables: CardWizardVariable[];\n\n    selectParams: any;\n    selectableItems: SelectableItem[];\n    selectedVariableName?: string;\n    variableTypes: string[];\n\n    propagateChange = (_: any) => { };\n\n    constructor(private changeDetectorRef: ChangeDetectorRef) { }\n\n    ngOnInit() {\n        this.selectParams = {\n            noneSelectedText: this.noneSelectedText\n        };\n    }\n\n    get selectedItem(): SelectableItem | undefined {\n        return this.selectableItems.find(selectableItem => {\n            if (this.selectedVariableName) {\n                return selectableItem.variable && selectableItem.variable.name === this.selectedVariableName;\n            } else {\n                return !selectableItem.variable;\n            }\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let newSelectableItems: SelectableItem[] = this.variables.map(variable => ({\n            displayName: variable.name,\n            variable,\n            disabled: !!variable.disabled\n        }));\n\n        this.variableTypes = this.variables.map(variable => variable.type === Variable.Type.CONTINUOUS ? 'numerical' : 'categorical');\n\n        if (this.noVariableLabel) {\n            newSelectableItems = [{\n                displayName: this.noVariableLabel,\n                disabled: false\n            }, ...newSelectableItems];\n\n            this.variableTypes = ['', ...this.variableTypes];\n        }\n\n        if(changes.variables && !deepEqual(changes.variables.currentValue, changes.variables.previousValue)) {\n            // Work around a dku-bs-select bug which clears itself when the list changes\n            // => do not not update the list if new one is identical (most of the cases)\n            this.selectableItems = newSelectableItems;\n        }\n    }\n\n    selectItem(selectableItem?: SelectableItem) {\n        this.propagateChange(selectableItem && selectableItem.variable);\n    }\n\n    writeValue(value?: CardWizardVariable) {\n        this.selectedVariableName = value ? value.name : undefined;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    registerOnChange(fn: (_: any) => {}) {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched() { }\n\n    ngOnDestroy() {\n\n    }\n}\n","<dku-bs-select\n    [params]=\"selectParams\"\n    (modelChange)=\"selectItem($event)\"\n    [model]=\"selectedItem\"\n    [list]=\"selectableItems\"\n    [optionsAnnotations]=\"variableTypes\"\n    ngOptions=\"v as v.displayName disable when v.disabled for v in list\"\n    dataLiveSearch=\"true\"\n></dku-bs-select>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnDestroy, SimpleChanges, OnChanges } from '@angular/core';\nimport { TZTest1SampCard, Variable } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { Observable } from 'rxjs';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'tztest1-samp-card-config',\n  templateUrl: './tztest1-samp-card-config.component.html',\n  styleUrls: ['./tztest1-samp-card-config.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TZTest1SampCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: TZTest1SampCard;\n    @Output() paramsChange = new EventEmitter<TZTest1SampCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    allVariables$: Observable<CardWizardVariable[]>;\n\n    configForm = this.fb.group({\n        hypothesizedMean: this.fb.control(null, [Validators.required]),\n        column: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                column: formValue.column,\n                hypothesizedMean: formValue.hypothesizedMean\n            }));\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                hypothesizedMean: this.params.hypothesizedMean,\n                column: this.params.column\n            });\n        }\n    }\n\n    ngOnInit() {\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\" class=\"dkuform-modal-horizontal\">\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Variable\n        </label>\n        <single-variable-selector [variables]=\"allVariables$ | async\" formControlName=\"column\"></single-variable-selector>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">Hypothesized mean</label>\n        <input type=\"number\" formControlName=\"hypothesizedMean\">\n    </div>    \n</form>","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnDestroy, SimpleChanges, OnChanges } from '@angular/core';\nimport { SignTest1SampCard, Variable } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { Observable } from 'rxjs';\n\n@UntilDestroy()\n@Component({\n  selector: 'sign-test1-samp-card-config',\n  templateUrl: './sign-test1-samp-card-config.component.html',\n  styleUrls: ['./sign-test1-samp-card-config.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SignTest1SampCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: SignTest1SampCard;\n    @Output() paramsChange = new EventEmitter<SignTest1SampCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    allVariables$: Observable<Variable[]>;\n\n    configForm = this.fb.group({\n        hypothesizedMedian: this.fb.control(null, [Validators.required]),\n        column: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                column: formValue.column,\n                hypothesizedMedian: formValue.hypothesizedMedian\n            }));\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnInit() {\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                hypothesizedMedian: this.params.hypothesizedMedian,\n                column: this.params.column\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\" class=\"dkuform-modal-horizontal\">\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Variable\n        </label>\n        <single-variable-selector [variables]=\"allVariables$ | async\" formControlName=\"column\"></single-variable-selector>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">Hypothesized median</label>\n        <input type=\"number\" formControlName=\"hypothesizedMedian\">\n    </div>    \n</form>","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { ShapiroNormalityTestCard, Variable } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { Subject, Observable } from 'rxjs';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'shapiro-normality-test-card-config',\n  templateUrl: './shapiro-normality-test-card-config.component.html',\n  styleUrls: ['./shapiro-normality-test-card-config.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShapiroNormalityTestCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: ShapiroNormalityTestCard;\n    @Output() paramsChange = new EventEmitter<ShapiroNormalityTestCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    allVariables$: Observable<CardWizardVariable[]>;\n\n    configForm = this.fb.group({\n        column: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                column: formValue.column\n            }));\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnInit() {\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                column: this.params.column\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\" class=\"dkuform-modal-horizontal\">\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Variable\n        </label>\n        <div class=\"controls\">\n            <single-variable-selector [variables]=\"allVariables$ | async\" formControlName=\"column\"></single-variable-selector>\n        </div>\n    </div>  \n</form>","import { AbstractControl } from '@angular/forms';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\n// Observe a form control and make sure the current value is emitted\nexport function observeFormControl<T = any>(formControl: AbstractControl): Observable<T> {\n    return concat(\n        defer(() => of(formControl.value)),\n        formControl.valueChanges\n    );\n}\n","<form [formGroup]=\"configForm\" class=\"dkuform-modal-horizontal\">\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Test Variable\n        </label>\n        <single-variable-selector [variables]=\"testVariables$ | async\" formControlName=\"xColumn\" [qa]=\"'two-sample-test-variable'\"></single-variable-selector>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">    \n            Grouping Variable\n        </label>\n        <single-variable-selector [variables]=\"groupVariables$ | async\" formControlName=\"yColumn\" [qa]=\"'two-sample-test-grouping'\"></single-variable-selector>\n    </div>\n    <ng-container *ngIf=\"configForm.get('yColumn')!.value && configForm.get('yColumn')!.value.name\">\n        <p class=\"card-editor__description\">Enter values of <span class=\"card-editor__strong\">{{ configForm.get('yColumn')!.value.name }}</span> to form the two populations below:</p>\n        <div class=\"horizontal-flex\">\n            <div class=\"card-editor__column card-editor__column--group\" [qa]=\"'two-sample-test-population-1'\">\n                <div class=\"control-group\">\n                    <label class=\"control-label\">\n                        Population 1\n                    </label>\n                    <values-list formControlName=\"value1\" [suggestions]=\"suggestedYValues$ | async\"></values-list>\n                </div>\n            </div>\n            <div class=\"card-editor__column card-editor__column--group\" [qa]=\"'two-sample-test-population-2'\">\n                <div class=\"control-group\">\n                    <label class=\"control-label\">\n                        Population 2\n                    </label>\n                    <values-list formControlName=\"value2\" [suggestions]=\"suggestedYValues$ | async\"></values-list>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n    <api-error-alert\n        [apiError]=\"error\"\n        (resetError)=\"pushError(null)\"\n        [closable]=\"true\"\n    ></api-error-alert>\n</form>","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { Abstract2SampTestCard, Variable } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { Observable, EMPTY } from 'rxjs';\nimport { SampleContextService } from '@features/eda/sample-context.service';\nimport { switchMap, map, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport { observeFormControl } from '@utils/form-control-observer';\nimport { ErrorContext, APIError, catchAPIError } from '@core/dataiku-api/api-error';\n\n@UntilDestroy()\n@Component({\n    selector: 'abstract-2-samp-card-config',\n    templateUrl: './abstract-2-samp-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './abstract-2-samp-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Abstract2SampCardConfigComponent implements OnInit, OnChanges, OnDestroy, ErrorContext {\n    @Input() params: Abstract2SampTestCard;\n    @Output() paramsChange = new EventEmitter<Abstract2SampTestCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    testVariables$: Observable<CardWizardVariable[]>;\n    groupVariables$: Observable<CardWizardVariable[]>;\n    suggestedYValues$: Observable<string[]>;\n    error?: APIError | null;\n\n    configForm = this.fb.group({\n        xColumn: this.fb.control(null, [Validators.required]),\n        yColumn: this.fb.control(null, [Validators.required]),\n        value1: this.fb.control(null, [Validators.required]),\n        value2: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService,\n        private sampleContextService: SampleContextService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        this.suggestedYValues$ = observeFormControl<Variable | null>(this.configForm.controls.yColumn).pipe(\n            map(yColumn => yColumn?.name),\n            distinctUntilChanged(),\n            switchMap(yColumnName => {\n                if (yColumnName) {\n                    return this.sampleContextService.runInteractiveQuery({\n                        type: 'list_most_frequent_values',\n                        column: yColumnName,\n                        maxValues: 100\n                    }).pipe(\n                        catchAPIError(this),\n                        map(queryResult => queryResult.values || [])\n                    )\n                }\n                return EMPTY;\n            }),\n            shareReplay(1)\n        );\n\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                xColumn: formValue.xColumn,\n                yColumn: formValue.yColumn,\n                value1: formValue.value1,\n                value2: formValue.value2\n            }));\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    pushError(error: APIError | null) {\n        this.error = error;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    ngOnInit() {\n        this.testVariables$ = this.cardWizardService.availableVariables(this.params.type, { isTestVariable: true });\n        this.groupVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xColumn: this.params.xColumn,\n                yColumn: this.params.yColumn,\n                value1: this.params.value1,\n                value2: this.params.value2\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","import { FormControl } from '@angular/forms';\n\n/*\n    Allows for a FormControl element (control) to be disabled/enabled based on the specified value\n    of another FormControl (conditionControl).\n\n    The enableValue callback is called if defined when the control is enabled. Angular remove the\n    value of the control when it is disabled.\n*/\nexport function toggleFormControl(control: FormControl, conditionControl: FormControl, conditionValue: any, enableValue?: Function) {\n    conditionControl.valueChanges\n        .subscribe((controlValue) => {\n            // if conditionValue is a function, call it with the controlValue as the parameter\n            const condition = typeof conditionValue === 'function' ? conditionValue(controlValue) : controlValue === conditionValue;\n\n            if (condition) {\n                control.enable();\n                if (enableValue) {\n                    enableValue(controlValue);\n                }\n            } else {\n                control.disable();\n            }\n        });\n\n    return control;\n}","<form [formGroup]=\"configForm\" class=\"dkuform-modal-horizontal\">\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Test Variable\n        </label>\n        <single-variable-selector [variables]=\"testVariables$ | async\"\n            formControlName=\"xColumn\" [qa]=\"'n-sample-test-variable'\"></single-variable-selector>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">    \n            Grouping Variable\n        </label>\n        <single-variable-selector [variables]=\"groupVariables$ | async\"\n            formControlName=\"yColumn\" [qa]=\"'n-sample-test-grouping'\"></single-variable-selector>\n    </div>\n    <div class=\"card-editor__group\" *ngIf=\"configForm.get('yColumn')!.value && configForm.get('yColumn')!.value.name\"> \n        <div class=\"control-group\">\n            <label class=\"control-label--flex\">\n                <input type=\"radio\" class=\"control--horizontal\" formControlName=\"groupingMethod\" value=\"auto\">\n                Build groups from most frequent values\n            </label>\n        </div>\n        <div class=\"control-group control-group--child\" *ngIf=\"configForm.controls.maxGroups.enabled\">\n            <label class=\"control-label\">\n                Maximum number of groups\n            </label>\n            <input type=\"number\" class=\"card-option__input\" formControlName=\"maxGroups\">\n        </div>\n        <div class=\"control-group\">\n            <label class=\"control-label--flex\">\n                <input type=\"radio\" class=\"control--horizontal\" formControlName=\"groupingMethod\"\n                    value=\"manual\" [qa]=\"'n-sample-test-manual-groups'\">\n                Define groups manually\n            </label>\n        </div>\n        <ng-container *ngIf=\"configForm.controls.yValues.enabled\">\n            <p class=\"card-editor__description card-editor__description--single\">Enter values of <span class=\"card-editor__strong\">{{ configForm.get('yColumn')!.value.name }}</span> to form the populations.</p>\n            <div class=\"control-group control-group--child\">\n                <values-list formControlName=\"yValues\" [suggestions]=\"suggestedYValues$ | async\" [qa]=\"'n-sample-test-group'\"></values-list>\n            </div>\n        </ng-container>\n    </div>\n    <api-error-alert\n        [apiError]=\"error\"\n        (resetError)=\"pushError(null)\"\n        [closable]=\"true\"\n    ></api-error-alert>\n</form>","import { Component, OnInit, ChangeDetectionStrategy, Input, EventEmitter, Output, SimpleChanges, OnChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { AbstractNSampTestCard, Variable } from 'src/generated-sources';\nimport { Observable, EMPTY } from 'rxjs';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { toggleFormControl } from '@utils/toggle-form-control';\nimport { switchMap, map, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport { SampleContextService } from '@features/eda/sample-context.service';\nimport { observeFormControl } from '@utils/form-control-observer';\nimport { ErrorContext, APIError, catchAPIError } from '@core/dataiku-api/api-error';\n\n@UntilDestroy()\n@Component({\n    selector: 'abstract-n-samp-card-config',\n    templateUrl: './abstract-n-samp-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './abstract-n-samp-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AbstractNSampCardConfigComponent implements OnInit, OnChanges, OnDestroy, ErrorContext {\n    @Input() params: AbstractNSampTestCard;\n    @Output() paramsChange = new EventEmitter<AbstractNSampTestCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    testVariables$: Observable<CardWizardVariable[]>;\n    groupVariables$: Observable<CardWizardVariable[]>;\n    suggestedYValues$: Observable<string[]>;\n    error?: APIError | null;\n\n    private groupingMethod = this.fb.control(null, [Validators.required]);\n\n    configForm = this.fb.group({\n        xColumn: this.fb.control(null, [Validators.required]),\n        yColumn: this.fb.control(null, [Validators.required]),\n        groupingMethod: this.groupingMethod,\n        yValues: toggleFormControl(this.fb.control({ value: null, disabled: true }, [Validators.required, Validators.minLength(1)]), this.groupingMethod, 'manual'),\n        maxGroups: toggleFormControl(this.fb.control({ value: null, disabled: true }, [Validators.required, Validators.min(2)]), this.groupingMethod, 'auto')\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private sampleContextService: SampleContextService,\n        private cardWizardService: CardWizardService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        this.suggestedYValues$ = observeFormControl<Variable | null>(this.configForm.controls.yColumn).pipe(\n            map(yColumn => yColumn?.name),\n            distinctUntilChanged(),\n            switchMap(yColumnName => {\n                if (yColumnName) {\n                    return this.sampleContextService.runInteractiveQuery({\n                        type: 'list_most_frequent_values',\n                        column: yColumnName,\n                        maxValues: 100\n                    }).pipe(\n                        catchAPIError(this),\n                        map(queryResult => queryResult.values || [])\n                    )\n                }\n                return EMPTY;\n            }),\n            shareReplay(1)\n        );\n\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => {\n                const params = {\n                    ...this.params,\n                    xColumn: formValue.xColumn,\n                    yColumn: formValue.yColumn\n                };\n\n                if (formValue.groupingMethod === 'auto') {\n                    params.maxGroups = formValue.maxGroups;\n                    delete params.yValues;\n                } else {\n                    params.yValues = formValue.yValues;\n                    delete params.maxGroups;\n                }\n\n                this.paramsChange.emit(params);\n            });\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    pushError(error: APIError | null) {\n        this.error = error;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    ngOnInit() {\n        this.testVariables$ = this.cardWizardService.availableVariables(this.params.type, { isTestVariable: true });\n        this.groupVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xColumn: this.params.xColumn,\n                yColumn: this.params.yColumn,\n                groupingMethod: this.params.yValues ? 'manual' : 'auto',\n                yValues: this.params.yValues,\n                maxGroups: this.params.maxGroups\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","<form [formGroup]=\"configForm\" class=\"dkuform-modal-horizontal\">\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Test Variable\n        </label>\n        <single-variable-selector [variables]=\"testVariables$ | async\"\n            formControlName=\"xColumn\" [qa]=\"'pairwise-test-variable'\"></single-variable-selector>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Adjustment Method\n        </label>\n        <dku-bs-select-form-control [list]=\"adjustmentMethods\" formControlName=\"adjustmentMethod\"\n            ngOptions=\"v.value as v.name for v in list\" [qa]=\"'pairwise-adjustment-method'\"></dku-bs-select-form-control>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Grouping Variable\n        </label>\n        <single-variable-selector [variables]=\"groupVariables$ | async\"\n            formControlName=\"yColumn\"[qa]=\"'pairwise-grouping-variable'\"></single-variable-selector>\n    </div>\n    <div class=\"card-editor__group\" *ngIf=\"configForm.get('yColumn')!.value && configForm.get('yColumn')!.value.name\"> \n        <div class=\"control-group\">\n            <label class=\"control-label--flex\">\n                <input type=\"radio\" class=\"control--horizontal\" formControlName=\"groupingMethod\" value=\"auto\">\n                Build groups from most frequent values\n            </label>\n        </div>\n        <div class=\"control-group control-group--child\" *ngIf=\"configForm.controls.maxGroups.enabled\">\n            <label class=\"control-label\">\n                Maximum number of groups\n            </label>\n            <input type=\"number\" class=\"card-option__input\" formControlName=\"maxGroups\">\n        </div>\n        <div class=\"control-group\">\n            <label class=\"control-label--flex\">\n                <input type=\"radio\" class=\"control--horizontal\" formControlName=\"groupingMethod\" value=\"manual\"\n                    [qa]=\"'pairwise-test-manual-groups'\">\n                Define groups manually\n            </label>\n        </div>\n        <ng-container *ngIf=\"configForm.controls.yValues.enabled\">\n            <p class=\"card-editor__description card-editor__description--single\">Enter values of <span class=\"card-editor__strong\">{{ configForm.get('yColumn')!.value.name }}</span> to form the populations.</p>\n            <div class=\"control-group control-group--child\">\n                <values-list formControlName=\"yValues\" [suggestions]=\"suggestedYValues$ | async\" [qa]=\"'pairwise-test-group'\"></values-list>\n            </div>\n        </ng-container>\n    </div>\n</form>","import { Component, OnInit, ChangeDetectionStrategy, Input, EventEmitter, Output, SimpleChanges, OnChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { AbstractPairwiseTestCard, PValueAdjustmentMethod, Variable } from 'src/generated-sources';\nimport { Observable, EMPTY } from 'rxjs';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { toggleFormControl } from '@utils/toggle-form-control';\nimport { observeFormControl } from '@utils/form-control-observer';\nimport { map, distinctUntilChanged, switchMap, shareReplay } from 'rxjs/operators';\nimport { SampleContextService } from '@features/eda/sample-context.service';\nimport { catchAPIError, APIError } from '@core/dataiku-api/api-error';\n\n@UntilDestroy()\n@Component({\n    selector: 'abstract-pairwise-test-card-config',\n    templateUrl: './abstract-pairwise-test-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './abstract-pairwise-test-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AbstractPairwiseTestCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: AbstractPairwiseTestCard;\n    @Input() variables: Variable[];\n    @Output() paramsChange = new EventEmitter<AbstractPairwiseTestCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    adjustmentMethods = [{\n        name: 'None',\n        value: PValueAdjustmentMethod.NONE\n    }, {\n        name: 'Bonferroni',\n        value: PValueAdjustmentMethod.BONFERRONI\n    }, {\n        name: 'Holm-Bonferroni',\n        value: PValueAdjustmentMethod.HOLM_BONFERRONI\n    }];\n\n    testVariables$: Observable<CardWizardVariable[]>;\n    groupVariables$: Observable<CardWizardVariable[]>;\n    suggestedYValues$: Observable<string[]>;\n    error?: APIError | null;\n\n    private groupingMethod = this.fb.control(null, [Validators.required]);\n\n    configForm = this.fb.group({\n        xColumn: this.fb.control(null, [Validators.required]),\n        yColumn: this.fb.control(null, [Validators.required]),\n        groupingMethod: this.groupingMethod,\n        yValues: toggleFormControl(this.fb.control({ value: null, disabled: true }, [Validators.required, Validators.minLength(1)]), this.groupingMethod, 'manual'),\n        maxGroups: toggleFormControl(this.fb.control({ value: null, disabled: true }, [Validators.required, Validators.min(2)]), this.groupingMethod, 'auto'),\n        adjustmentMethod: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService,\n        private sampleContextService: SampleContextService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        this.suggestedYValues$ = observeFormControl<Variable | null>(this.configForm.controls.yColumn).pipe(\n            map(yColumn => yColumn?.name),\n            distinctUntilChanged(),\n            switchMap(yColumnName => {\n                if (yColumnName) {\n                    return this.sampleContextService.runInteractiveQuery({\n                        type: 'list_most_frequent_values',\n                        column: yColumnName,\n                        maxValues: 100\n                    }).pipe(\n                        catchAPIError(this),\n                        map(queryResult => queryResult.values || [])\n                    )\n                }\n                return EMPTY;\n            }),\n            shareReplay(1)\n        );\n\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => {\n                const params = {\n                    ...this.params,\n                    xColumn: formValue.xColumn,\n                    yColumn: formValue.yColumn,\n                    adjustmentMethod: formValue.adjustmentMethod\n                };\n\n                if (formValue.groupingMethod === 'auto') {\n                    params.maxGroups = formValue.maxGroups;\n                    delete params.yValues;\n                } else {\n                    params.yValues = formValue.yValues;\n                    delete params.maxGroups;\n                }\n\n                this.paramsChange.emit(params);\n            });\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    pushError(error: APIError | null) {\n        this.error = error;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    ngOnInit() {\n        this.testVariables$ = this.cardWizardService.availableVariables(this.params.type, { isTestVariable: true });\n        this.groupVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xColumn: this.params.xColumn,\n                yColumn: this.params.yColumn,\n                groupingMethod: this.params.yValues ? 'manual' : 'auto',\n                yValues: this.params.yValues,\n                maxGroups: this.params.maxGroups,\n                adjustmentMethod: this.params.adjustmentMethod\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { Abstract2SampTestCard, Variable, Chi2IndTestCard } from 'src/generated-sources';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { Observable } from 'rxjs';\n\n\n@UntilDestroy()\n@Component({\n    selector: 'chi2-ind-test-card-config',\n    templateUrl: './chi2-ind-test-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './chi2-ind-test-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Chi2IndTestCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: Chi2IndTestCard;\n    @Output() paramsChange = new EventEmitter<Chi2IndTestCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    allVariables$: Observable<CardWizardVariable[]>;\n\n    configForm = this.fb.group({\n        xColumn: this.fb.control(null, [Validators.required]),\n        yColumn: this.fb.control(null, [Validators.required]),\n        maxValuesX: this.fb.control(null),\n        maxValuesY: this.fb.control(null)\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                xColumn: formValue.xColumn,\n                yColumn: formValue.yColumn,\n                maxValuesX: formValue.maxValuesX,\n                maxValuesY: formValue.maxValuesY\n            }));\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnInit() {\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xColumn: this.params.xColumn,\n                yColumn: this.params.yColumn,\n                maxValuesX: this.params.maxValuesX,\n                maxValuesY: this.params.maxValuesY\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\" class=\"horizontal-flex\">\n    <div class=\"card-editor__column\">\n        <div class=\"control-group\">\n            <label class=\"control-label\">\n                Variable 1\n            </label>\n            <single-variable-selector [variables]=\"allVariables$ | async\"\n                formControlName=\"xColumn\" [qa]=\"'categorical-test-variable1'\"></single-variable-selector>\n        </div>\n        <div class=\"control-group\">\n            <label class=\"control-label\">\n                Variable 2\n            </label>\n            <single-variable-selector [variables]=\"allVariables$ | async\"\n                formControlName=\"yColumn\" [qa]=\"'categorical-test-variable2'\"></single-variable-selector>\n        </div>\n    </div>\n    <div class=\"card-options card-editor__column\">\n        <div class=\"control-group\">\n            <label class=\"control-label\">\n                Maximum X Values to Display\n            </label>\n            <input type=\"number\" class=\"card-option__input\" formControlName=\"maxValuesX\"\n                [qa]=\"'categorical-test-variable1-max-values'\">\n        </div>\n        <div class=\"control-group\">\n            <label class=\"control-label\">\n                Maximum Y Values to Display\n            </label>\n            <input type=\"number\" class=\"card-option__input\" formControlName=\"maxValuesY\"\n            [qa]=\"'categorical-test-variable2-max-values'\">\n        </div>\n    </div>\n</form>","import { FormGroup, ValidatorFn, AbstractControl } from '@angular/forms';\n\n/*\n    Validate that an object is not empty\n*/\nexport function isIntegerValidator(): ValidatorFn {\n    return function validate(control: AbstractControl) {\n        const value = control.value;\n\n        return Number.isInteger(value) ? null : {\n            isNotInteger: true\n        };\n    };\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\" class=\"dkuform-modal-horizontal dkuform-modal-horizontal--wizard\">\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Variable\n        </label>\n        <div class=\"controls\">\n            <single-variable-selector [variables]=\"allVariables$ | async\" formControlName=\"column\"></single-variable-selector>\n        </div>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Distributions\n        </label>\n        <div class=\"controls\">\n            <div class=\"card-editor__rows\">\n                <editable-list \n                    [itemsFormArray]=\"configForm.get('distributions')\"\n                    [hasDivider]=\"false\"\n                    [focusOnEnter]=\"false\"\n                    addLabel=\"Add a distribution\"   \n                >\n                    <ng-template let-item=\"item\" let-index=\"index\" let-goToNext=\"goToNext\">\n                        <editable-list-template (onInputEnter)=\"goToNext($event)\">\n                            <div class=\"card-editor__row\">\n                                <div class=\"card-editor__control\">\n                                    <div class=\"controls controls--no-label editable-list__input--child-underline\">\n                                        <dku-bs-select-form-control [list]=\"fitDistributions\" [formControl]=\"item.get('distribution.type')\" ngOptions=\"v.value as v.name for v in list\"></dku-bs-select-form-control>\n                                    </div>\n                                </div>\n                                <div class=\"card-editor__control mleft8\" *ngIf=\"item.get('distribution.nbComponents')?.enabled\">\n                                    <div class=\"controls controls--no-label\">\n                                        with <input type=\"number\" class=\"editable-list__input editable-list__input--underline card-editor__control-param\" [formControl]=\"item.get('distribution.nbComponents')\"> components\n                                    </div>\n                                </div>\n                            </div>\n                        </editable-list-template>\n                    </ng-template>\n                </editable-list>\n            </div>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, EventEmitter, Output, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport { FormBuilder, Validators, FormArray } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { FitDistributionCard, Variable } from 'src/generated-sources';\nimport { FormArrayRepeat } from '@utils/form-array-repeat';\nimport { toggleFormControl } from '@utils/toggle-form-control';\nimport { Observable } from 'rxjs';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { isIntegerValidator } from '@utils/is-integer-validator';\n\n@UntilDestroy()\n@Component({\n    selector: 'fit-distribution-card-config',\n    templateUrl: './fit-distribution-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './fit-distribution-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FitDistributionCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: FitDistributionCard;\n    @Input() variables: Variable[];\n    @Output() paramsChange = new EventEmitter<FitDistributionCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    allVariables$: Observable<CardWizardVariable[]>;\n\n    fitDistributions = [{\n        name: 'Beta',\n        value: 'beta'\n    }, {\n        name: 'Exponential',\n        value: 'exponential'\n    }, {\n        name: 'Laplace',\n        value: 'laplace'\n    }, {\n        name: 'LogNormal',\n        value: 'lognormal'\n    }, {\n        name: 'Normal',\n        value: 'normal'\n    }, {\n        name: 'Normal mixture',\n        value: 'normal_mixture'\n    }, {\n        name: 'Pareto',\n        value: 'pareto'\n    }, {\n        name: 'Triangular',\n        value: 'triangular'\n    }, {\n        name: 'Weibull',\n        value: 'weibull'\n    }];\n\n    distributions = new FormArrayRepeat(() => {\n        const type = this.fb.control('beta', [Validators.required]);\n\n        const group = this.fb.group({\n            distribution: this.fb.group({\n                type,\n                nbComponents: toggleFormControl(this.fb.control({ value: 2, disabled: true }, [Validators.required, Validators.min(1), isIntegerValidator()]), type, 'normal_mixture')\n            })\n        });\n\n        return group;\n    });\n\n    configForm = this.fb.group({\n        column: this.fb.control(null, [Validators.required]),\n        distributions: this.distributions\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                column: formValue.column,\n                distributions: formValue.distributions\n            }));\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnInit() {\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                column: this.params.column,\n                distributions: this.params.distributions\n            });\n        }\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\" class=\"horizontal-flex\">\n    <div class=\"card-editor__column\">\n        <div class=\"control-group\">\n            <label class=\"control-label\">\n                X Variable\n            </label>\n            <single-variable-selector [variables]=\"allVariables$ | async\" formControlName=\"xColumn\"></single-variable-selector>\n        </div>\n        <div class=\"control-group\">\n            <label class=\"control-label\">\n                Y Variable\n            </label>\n            <single-variable-selector [variables]=\"allVariables$ | async\" formControlName=\"yColumn\"></single-variable-selector>\n        </div>\n    </div>\n    <div class=\"card-editor__column\">\n        <div class=\"controls\" formGroupName=\"distribution\">\n            <div class=\"control-group\">\n                <label class=\"control-label control-label--flex\">\n                    <input type=\"radio\" class=\"control\" formControlName=\"type\" value=\"kde_2d\">\n                    2D KDE\n                </label>\n            </div>\n            <div class=\"control-group\">\n                <label class=\"control-label control-label--flex\">\n                    <input type=\"radio\" class=\"control\" formControlName=\"type\" value=\"joint_normal\">\n                    Joint Normal\n                </label>\n            </div>\n            <div class=\"control-group\" *ngIf=\"distributionGroup.controls.x_relative_bandwidth.enabled\">\n                <label class=\"control-label\">\n                    X relative bandwidth (%)\n                </label>\n                <div class=\"controls\">\n                    <input type=\"number\" formControlName=\"x_relative_bandwidth\"  matTooltip=\"Factor for scaling the horizontal KDE bandwidth, as a percentage of the standard deviation of X\">\n                </div>\n                <label class=\"control-label\">\n                    Y relative bandwidth (%)\n                </label>\n                <div class=\"controls\">\n                    <input type=\"number\" formControlName=\"y_relative_bandwidth\"  matTooltip=\"Factor for scaling the vertical KDE bandwidth, as a percentage of the standard deviation of Y\">\n                </div>\n            </div>\n\n        </div>\n    </div>\n</form>","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { Abstract2SampTestCard, Variable, Fit2DDistributionCard } from 'src/generated-sources';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { Observable } from 'rxjs';\nimport { toggleFormControl } from '@utils/toggle-form-control';\n\n@UntilDestroy()\n@Component({\n    selector: 'fit-2d-distribution-card-config',\n    templateUrl: './fit-2d-distribution-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/forms.less',\n        '../../../../shared-styles/card-wizard.less',\n        './fit-2d-distribution-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Fit2DDistributionCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: Fit2DDistributionCard;\n    @Input() variables: Variable[];\n    @Output() paramsChange = new EventEmitter<Fit2DDistributionCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    allVariables$: Observable<CardWizardVariable[]>;\n\n    configForm: FormGroup;\n\n    distributionGroup: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService\n    ) {\n        const type = this.fb.control('kde_2d', [Validators.required]);\n        this.distributionGroup = this.fb.group({\n            type,\n            x_relative_bandwidth: toggleFormControl(this.fb.control({ value: 15, disabled: true }, [Validators.required, Validators.min(1), Validators.max(100)]), type, 'kde_2d'),\n            y_relative_bandwidth: toggleFormControl(this.fb.control({ value: 15, disabled: true }, [Validators.required, Validators.min(1), Validators.max(100)]), type, 'kde_2d')\n        });\n\n        this.configForm = this.fb.group({\n            xColumn: this.fb.control(null, [Validators.required]),\n            yColumn: this.fb.control(null, [Validators.required]),\n            distribution: this.distributionGroup\n        });\n\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                xColumn: formValue.xColumn,\n                yColumn: formValue.yColumn,\n                distribution: formValue.distribution\n            }));\n\n\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnInit() {\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xColumn: this.params.xColumn,\n                yColumn: this.params.yColumn,\n                distribution: this.params.distribution\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\" class=\"dkuform-modal-horizontal dkuform-modal-horizontal--wizard\">\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            X Variable\n        </label>\n        <div class=\"controls\">\n            <single-variable-selector [variables]=\"allVariables$ | async\" formControlName=\"xColumn\"></single-variable-selector>\n        </div>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Y Variable\n        </label>\n        <div class=\"controls\">\n            <single-variable-selector [variables]=\"allVariables$ | async\" formControlName=\"yColumn\"></single-variable-selector>\n        </div>\n    </div>\n    <div class=\"control-group\">\n        <label class=\"control-label\">\n            Curves\n        </label>\n        <div class=\"controls\">\n            <div class=\"card-editor__rows\">\n                <editable-list \n                    [itemsFormArray]=\"configForm.get('curves')\"\n                    [hasDivider]=\"false\"\n                    [focusOnEnter]=\"false\"\n                    addLabel=\"Add a curve\"   \n                >\n                    <ng-template let-item=\"item\" let-index=\"index\" let-goToNext=\"goToNext\">\n                        <editable-list-template (onInputEnter)=\"goToNext($event)\">\n                            <div class=\"card-editor__row\" >\n                                <div class=\"card-editor__control\">\n                                    <div class=\"controls controls--no-label editable-list__input--child-underline\">\n                                        <dku-bs-select-form-control [list]=\"fitCurves\" [formControl]=\"item.get('type')\"  ngOptions=\"v.value as v.name for v in list\"></dku-bs-select-form-control>\n                                    </div>\n                                </div>\n                                <div class=\"card-editor__control mleft8\" *ngIf=\"item.get('degree')?.enabled\">\n                                    <div class=\"controls controls--no-label\">\n                                        with degree \n                                        <input type=\"number\" class=\"editable-list__input editable-list__input--underline card-editor__control-param\" [formControl]=\"item.get('degree')\">\n                                    </div>\n                                </div>\n                            </div>\n                        </editable-list-template>\n                    </ng-template>\n                </editable-list>\n            </div>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, EventEmitter, Output, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport { FormBuilder, Validators, FormArray, FormGroup, FormControl } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { FitCurveCard, Variable, Curve, isPolynomialCurve } from 'src/generated-sources';\nimport { FormArrayRepeat } from '@utils/form-array-repeat';\nimport { toggleFormControl } from '@utils/toggle-form-control';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { Observable } from 'rxjs';\nimport { isIntegerValidator } from '@utils/is-integer-validator';\n\n@UntilDestroy()\n@Component({\n    selector: 'fit-curve-card-config',\n    templateUrl: './fit-curve-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './fit-curve-card-config.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FitCurveCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: FitCurveCard;\n    @Input() variables: Variable[];\n    @Output() paramsChange = new EventEmitter<FitCurveCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n\n    allVariables$: Observable<CardWizardVariable[]>;\n\n    fitCurves = [{\n        name: 'Polynomial',\n        value: 'polynomial'\n    }, {\n        name: 'Isotonic',\n        value: 'isotonic'\n    }];\n\n    curves = new FormArrayRepeat(() => {\n        const type = this.fb.control('polynomial', [Validators.required]);\n\n        const group = this.fb.group({\n            type,\n            degree: toggleFormControl(this.fb.control(2, [Validators.required, Validators.min(0), isIntegerValidator()]), type, 'polynomial')\n        });\n\n        return group;\n    });\n\n    configForm = this.fb.group({\n        xColumn: this.fb.control(null, [Validators.required]),\n        yColumn: this.fb.control(null, [Validators.required]),\n        curves: this.curves\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => this.paramsChange.emit({\n                ...this.params,\n                xColumn: formValue.xColumn,\n                yColumn: formValue.yColumn,\n                curves: formValue.curves\n            }));\n\n        this.configForm.statusChanges\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.validityChange.emit(this.configForm.valid));\n    }\n\n    ngOnInit() {\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.configForm.patchValue({\n                xColumn: this.params.xColumn,\n                yColumn: this.params.yColumn,\n                curves: this.params.curves\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n}\n","<form [formGroup]=\"configForm\" id=\"config-form\">\n    <div cdkDropListGroup class=\"card-header-editor horizontal-flex\">\n        <div class=\"card-header-editor__column\">\n            <span class=\"card-header-editor__description\">1. Select variables</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\">\n                    {{ count }} available variables\n                </h4>\n            </div>\n            <list-box [list]=\"currentVariables$ | async\" [countTitle]=\"'available variables'\"\n                [disabledMessage]=\"'Variable must be numerical.'\"\n                class=\"vertical-flex card-header-editor__list\"\n                (select)=\"selectedAvailableVariables = $event\"\n                (dropped)=\"onDropVariables($event)\"\n                dragDropable=\"true\"\n                sortDraggable=\"true\"\n                multiselectable=\"true\"\n                dragDropable=\"true\">\n            </list-box>\n            <div class=\"card-header-editor__footnote\">\n                <i class=\"icon-lightbulb\"></i> Use <strong>Shift + Click</strong> to select a range of variables.\n            </div>\n        </div>\n        <div class=\"card-header-editor__column\">\n            <span class=\"card-header-editor__description\">2. Add variables</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\"\n                    [matTooltip]=\"tooManySelectedVariablesWarning\">\n                    {{ configForm.value.columns.length }} selected variables <i *ngIf=\"tooManySelectedVariablesWarning\" class=\"icon-warning-sign text-error\"></i>\n                </h4>\n                <div>\n                    <button class=\"btn btn--text btn--primary btn--icon\" (click)=\"add()\"\n                        [disabled]=\"!canAdd\"\n                        [qa]=\"{'eda-add-variables-button': {as: 'variable'}}\">\n                        <i class=\"icon-plus\"></i>\n                    </button>\n                    <button class=\"btn btn--text btn--primary btn--icon\" (click)=\"del()\"\n                        [disabled]=\"selectedSelectedVariables.length < 1\"\n                        [qa]=\"{'eda-del-variables-button': {as: 'variable'}}\">\n                        <i class=\"icon-trash\"></i>\n                    </button>\n                </div>\n            </div>\n            <list-box-form-control formControlName=\"columns\"\n                class=\"vertical-flex card-header-editor__list\"\n                dragDropable=\"true\"\n                sortDraggable=\"true\"\n                multiselectable=\"true\"\n                placeHolderText=\"(Drag variable(s) here)\"\n                (dropped)=\"onDropAdd($event)\"\n                (select)=\"selectedSelectedVariables = $event\"></list-box-form-control>\n        </div>\n        <div class=\"card-header-editor__column\" *ngIf=\"isCorrelationMatrixCard(params)\">\n            <span class=\"card-header-editor__description\">3. Select options</span>\n            <div class=\"card-header-editor__header\">\n                <h4 class=\"card-header-editor__title\">Options</h4>\n            </div>\n            <div class=\"card-header-editor__options\">\n                <div class=\"control-group\">\n                    <label class=\"control-label control-label--flex\">\n                        <input type=\"radio\" class=\"control\" formControlName=\"metric\" [value]=\"CorrelationMetric.SPEARMAN\"\n                            [qa]=\"{'eda-select-correlation-metric-radio': {metric: 'SPEARMAN'}}\">\n                        Spearman\n                    </label>\n                </div>\n                <div class=\"control-group\">\n                    <label class=\"control-label control-label--flex\">\n                        <input type=\"radio\" class=\"control\" formControlName=\"metric\" [value]=\"CorrelationMetric.PEARSON\"\n                        [qa]=\"{'eda-select-correlation-metric-radio': {metric: 'PEARSON'}}\">\n                        Pearson\n                    </label>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport _ from 'lodash';\nimport { MultivariateCard, Variable, CorrelationMatrixCard, isCorrelationMatrixCard } from 'src/generated-sources';\nimport { Observable, combineLatest, empty } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { CardWizardService } from '../../../card-wizard/card-wizard.service';\nimport { MAX_HEADER_COLUMNS, CANNOT_ADD_REASON, identicalVariableNames, unselectVariables } from '@features/eda/card-utils';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { WT1Service } from '@core/dataiku-wt1/wt1.service';\n\n@UntilDestroy()\n@Component({\n    selector: 'multivariate-card-config',\n    templateUrl: './multivariate-card-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-wizard.less',\n        './multivariate-card-config.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MultivariateCardConfigComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() params: MultivariateCard;\n    @Input() variables: CardWizardVariable[];\n    @Output() paramsChange = new EventEmitter<MultivariateCard>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n    @Output() validityTooltipChange = new EventEmitter<string>(true);\n    CorrelationMetric = CorrelationMatrixCard.CorrelationMetric;\n    isCorrelationMatrixCard = isCorrelationMatrixCard;\n\n    allVariables$: Observable<CardWizardVariable[]>;\n    columns$: Observable<Variable[]>;\n    currentVariables$: Observable<CardWizardVariable[]>;\n    selectedAvailableVariables = [];\n    selectedSelectedVariables = [];\n    count = 0;\n    tooManySelectedVariablesWarning = '';\n\n    configForm =  this.fb.group({\n        columns: this.fb.control([], [Validators.required, Validators.minLength(1)])\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private cardWizardService: CardWizardService,\n        private wt1Service: WT1Service\n    ) {\n        this.configForm.valueChanges\n            .pipe(untilDestroyed(this))\n            .subscribe((formValue) => {\n                const changedParams: MultivariateCard = {\n                    ...this.params,\n                    columns: formValue.columns,\n                };\n\n                if (isCorrelationMatrixCard(this.params)) {\n                    (changedParams as CorrelationMatrixCard).metric = formValue.metric;\n                }\n\n                this.paramsChange.emit(changedParams);\n            });\n    }\n\n    ngOnInit() {\n        const columns = this.configForm.controls.columns.value as Variable[]; // need starting value for combineLatest\n        this.allVariables$ = this.cardWizardService.availableVariables(this.params.type);\n        this.columns$ = this.configForm.controls.columns.valueChanges;\n\n        this.currentVariables$ = combineLatest([this.allVariables$, this.columns$.pipe(startWith(columns))])\n            .pipe(\n                map(([all, column]) => {\n                    // remove x variables from current variable list\n                    return all.filter(variable => column.findIndex(columnVariable => columnVariable.name === variable.name) < 0).map(({selected, ...attrs}) => attrs);\n                }),\n                tap(() => {\n                    this.selectedSelectedVariables = [];\n                    this.selectedSelectedVariables = [];\n                })\n            );\n\n        this.currentVariables$\n            .pipe(untilDestroyed(this))\n            .subscribe(variables => {\n                this.count = variables.filter(v => !v.disabled).length;\n            });\n\n        combineLatest([this.configForm.statusChanges.pipe(startWith('')), this.columns$.pipe(startWith(columns))])\n            .pipe(untilDestroyed(this))\n            .subscribe(([sc, curColumns]) => {\n                const overLimit = curColumns.length > MAX_HEADER_COLUMNS;\n                this.validityChange.emit(this.configForm.valid && !overLimit);\n                if (overLimit) {\n                    this.tooManySelectedVariablesWarning = `${curColumns.length} variables selected. Max is ${MAX_HEADER_COLUMNS}.`;\n                } else {\n                    this.tooManySelectedVariablesWarning = '';\n                }\n                this.validityTooltipChange.emit(this.tooManySelectedVariablesWarning);\n            });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            const patch = {\n                columns: this.params.columns\n            };\n\n            if (isCorrelationMatrixCard(this.params)) {\n                if (!this.configForm.controls.metric) {\n                    this.configForm.addControl('metric', this.fb.control(CorrelationMatrixCard.CorrelationMetric.SPEARMAN, [Validators.required]));\n                }\n                (patch as CorrelationMatrixCard).metric = this.params.metric;\n            }\n\n            this.configForm.patchValue(patch);\n        }\n    }\n\n    add() {\n        this.configForm.patchValue({\n            columns: unselectVariables(this.configForm.controls.columns.value.concat(this.selectedAvailableVariables))\n        });\n\n        this.selectedAvailableVariables = [];\n    }\n\n    del() {\n        const value = this.configForm.controls.columns.value;\n\n        this.configForm.patchValue({\n            columns: Array.isArray(value) ? _.differenceWith(value, this.selectedSelectedVariables, identicalVariableNames) : []\n        });\n\n        this.selectedSelectedVariables = [];\n    }\n\n    get canAdd() {\n        return this.selectedAvailableVariables.length > 0;\n    }\n\n    get disabledReason() {\n        if (this.configForm.controls.columns.value.length + this.selectedAvailableVariables.length > MAX_HEADER_COLUMNS) {\n            return CANNOT_ADD_REASON.MAX_VARIABLES_EXCEEDED;\n        } else if (this.selectedAvailableVariables.length <= 0) {\n            return CANNOT_ADD_REASON.NO_VARIABLE_SELECTED;\n        }\n\n        return '';\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    onDropAdd(dropped: CdkDragDrop<CardWizardVariable[]>): void {\n        const droppedItems: CardWizardVariable[] = dropped.item.data;\n        droppedItems.forEach(v => v.selected = false);\n        const currentValue = this.configForm.controls.columns.value;\n        let newValue: CardWizardVariable[];\n        if (currentValue) {\n            let spliceIndex = dropped.currentIndex;\n            newValue = _.cloneDeep(currentValue);\n            if (dropped.container === dropped.previousContainer) {\n                const indexes = droppedItems.map(d => newValue.findIndex(e => e.name === d.name ));\n                indexes.splice(0, 1);\n                const offset = _.sumBy(indexes, curIndex => curIndex <= spliceIndex ? 1 : 0);\n                spliceIndex -= offset;\n                newValue = _.differenceWith(newValue, droppedItems, identicalVariableNames);\n            }\n            newValue.splice(spliceIndex, 0, ...droppedItems);\n        } else {\n            newValue = droppedItems;\n        }\n        this.configForm.patchValue({\n            columns: unselectVariables(newValue)\n        });\n        this.selectedAvailableVariables = [];\n        this.selectedSelectedVariables = [];\n        this.wt1Service.event('statistics-drag-drop-variables', { droppedCount: dropped.item.data.length });\n    }\n\n    onDropVariables(dropped: CdkDragDrop<CardWizardVariable[]>): void {\n        const droppedItems: CardWizardVariable[] = dropped.item.data;\n        droppedItems.forEach(v => v.selected = false);\n\n        const currentValue = this.configForm.controls.columns.value;\n        const newValue = currentValue ? _.differenceWith(currentValue, droppedItems, identicalVariableNames) : currentValue;\n\n        this.configForm.patchValue({\n            columns: unselectVariables(newValue)\n        });\n        this.selectedAvailableVariables = [];\n        this.selectedSelectedVariables = [];\n        this.wt1Service.event('statistics-drag-drop-variables', { droppedCount: dropped.item.data.length });\n    }\n}\n","<div\n    class=\"config-area\"\n    [ngSwitch]=\"params.type\"\n    [ngClass]=\"className\"\n    cdkScrollable\n>\n    <generic-summary-stats-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        *ngSwitchCase=\"'univariate_summary'\"\n    >\n    </generic-summary-stats-card-config>\n\n    <generic-summary-stats-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        *ngSwitchCase=\"'bivariate_summary'\"\n    >\n    </generic-summary-stats-card-config>\n\n    <categorical-histogram-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'categorical_histogram'\"\n    >\n    </categorical-histogram-card-config>\n\n    <bivariate-box-plot-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'bivariate_box_plot'\"\n    >\n    </bivariate-box-plot-card-config>\n\n    <univariate-frequency-table-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'univariate_frequency_table'\"\n    >\n    </univariate-frequency-table-card-config>\n\n    <quantiles-table-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'quantile_table'\"\n    >\n    </quantiles-table-card-config>\n\n    <numerical-histogram-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'numerical_histogram'\"\n    >\n    </numerical-histogram-card-config>\n\n    <abstract-2d-pivot-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'bivariate_frequency_table'\"\n    >\n    </abstract-2d-pivot-card-config>\n\n    <abstract-2d-pivot-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'bivariate_histogram'\"\n    >\n    </abstract-2d-pivot-card-config>\n\n    <abstract-2d-pivot-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'mosaic_plot'\"\n    >\n    </abstract-2d-pivot-card-config>\n\n    <scatter-plot-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'scatter_plot'\"\n    >\n    </scatter-plot-card-config>\n\n    <univariate-header-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        (validityTooltipChange)=\"validityTooltipChange.emit($event)\"\n        *ngSwitchCase=\"'univariate_header'\"\n    ></univariate-header-card-config>\n\n    <bivariate-header-card-config\n        [params]=\"params\"\n        (validityChange)=\"validityChange.emit($event)\"\n        (validityTooltipChange)=\"validityTooltipChange.emit($event)\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        *ngSwitchCase=\"'bivariate_header'\"\n    ></bivariate-header-card-config>\n\n    <tztest1-samp-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'ttest_ztest_1samp'\"\n    ></tztest1-samp-card-config>\n\n    <sign-test1-samp-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'sign_test_1samp'\"\n    ></sign-test1-samp-card-config>\n\n    <shapiro-normality-test-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'shapiro'\"\n    ></shapiro-normality-test-card-config>\n\n    <abstract-2-samp-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'ttest_2samp'\"\n    ></abstract-2-samp-card-config>\n\n    <abstract-2-samp-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'mood_test_2samp'\"\n    ></abstract-2-samp-card-config>\n\n    <abstract-2-samp-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'ks_test_2samp'\"\n    ></abstract-2-samp-card-config>\n\n    <abstract-n-samp-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'oneway_anova'\"\n    ></abstract-n-samp-card-config>\n\n    <abstract-n-samp-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'mood_nsamp'\"\n    ></abstract-n-samp-card-config>\n\n    <abstract-pairwise-test-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'pairwise_ttest'\"\n    ></abstract-pairwise-test-card-config>\n\n    <abstract-pairwise-test-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n    *ngSwitchCase=\"'pairwise_mood'\"\n    ></abstract-pairwise-test-card-config>\n\n    <chi2-ind-test-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'chi2_independence_test'\"\n    ></chi2-ind-test-card-config>\n\n    <fit-distribution-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'fit_distribution'\"\n    ></fit-distribution-card-config>\n\n    <fit-2d-distribution-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'fit_2d_distribution'\"\n    ></fit-2d-distribution-card-config>\n\n    <fit-curve-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        *ngSwitchCase=\"'fit_curve'\"\n    ></fit-curve-card-config>\n\n    <multivariate-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        (validityTooltipChange)=\"validityTooltipChange.emit($event)\"\n        *ngSwitchCase=\"'correlation_matrix'\"\n    ></multivariate-card-config>\n\n    <multivariate-card-config\n        [params]=\"params\"\n        (paramsChange)=\"paramsChange.emit($event)\"\n        (validityChange)=\"validityChange.emit($event)\"\n        (validityTooltipChange)=\"validityTooltipChange.emit($event)\"\n        *ngSwitchCase=\"'pca'\"\n    ></multivariate-card-config>\n\n    <ng-container *ngSwitchDefault>NOT IMPLEMENTED</ng-container>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { Card } from 'src/generated-sources';\n\n@Component({\n    selector: 'card-editor',\n    templateUrl: './card-editor.component.html',\n    styleUrls: [\n        '../../../shared-styles/card-wizard.less',\n        './card-editor.component.less'\n    ]\n})\nexport class CardEditorComponent implements OnInit, OnDestroy {\n    @Input() params: Card;\n    @Output() paramsChange = new EventEmitter<Card>(true);\n    @Output() validityChange = new EventEmitter<boolean>(true);\n    @Output() validityTooltipChange = new EventEmitter<string>(true);\n\n    className = '';\n\n    constructor() {\n\n    }\n\n    ngOnInit() {\n        const typeClass = 'card-wizard__body--' + this.params.type;\n        this.className = typeClass + ' card-wizard__body--' + this.getEditorWidth();\n    }\n\n    ngOnDestroy() {\n    }\n\n    getEditorWidth() {\n        if (this.params.type !== 'univariate_header' &&\n            this.params.type !== 'bivariate_header' &&\n            this.params.type !== 'correlation_matrix') {\n            return 'narrow';\n        }\n\n        return 'wide';\n    }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { WT1Service } from './wt1.service';\n\n@Directive({\n    selector: '[wt1Click]'\n})\nexport class Wt1ClickDirective {\n    @Input() wt1Click: string;\n\n    constructor(private wt1Service: WT1Service) { }\n\n    @HostListener('click') onClick(): void {\n        this.wt1Service.event('clicked-item', { 'item-id': this.wt1Click });\n    }\n}\n","\n<div class=\"modal modal--analysis\" [qa]=\"'eda-wizard-modal'\">\n    <modal-header [title]=\"title\" [icon]=\"state === WizardState.ANALYSIS ? '' : 'icon-arrow-left'\" (iconAction)=\"goToPreviousState(state)\" [hasBorder]=\"false\"></modal-header>\n    <div class=\"modal-body flex modal-body--analysis no-padding\" [ngClass]=\"{'modal-body--test': state === WizardState.TEST }\">\n        <ng-container [ngSwitch]=\"state\">\n            <ng-container *ngSwitchCase=\"WizardState.VARIABLES\">\n                <card-editor\n                    [params]=\"params\"\n                    (paramsChange)=\"changeParams($event)\"\n                    (validityChange)=\"changeValidity($event)\"\n                    (validityTooltipChange)=\"changeValidityTooltip($event)\"\n                ></card-editor>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"WizardState.ANALYSIS\">\n                <div class=\"new-card card-wizard__body--wide\">\n                    <a class=\"new-card-type\" (click)=\"setCardType('univariate_header')\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'univariate'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">Univariate analysis</h5>\n                            <p class=\"new-card-type__description\">\n                                Discover your variables and see their distributions side-by-side.\n                            </p>\n                        </div>\n                    </a>\n                    <a class=\"new-card-type\" (click)=\"setCardType('bivariate_header')\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'bivariate'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">Bivariate analysis</h5>\n                            <p class=\"new-card-type__description\">\n                                Look into the relationship between pairs of variables simultaneously.\n                            </p>\n                        </div>\n                    </a>\n                    <a class=\"new-card-type\" (click)=\"goToState(WizardState.TEST)\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'test'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">Statistical tests</h5>\n                            <p class=\"new-card-type__description\">\n                                Make quantitative decisions by testing hypotheses.\n                            </p>\n                        </div>\n                    </a>\n                    <a class=\"new-card-type\" (click)=\"goToState(WizardState.FIT)\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'fit'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">Fit curves & distributions</h5>\n                            <p class=\"new-card-type__description\">\n                                Model variable distributions or relationships.\n                            </p>\n                        </div>\n                    </a>\n                    <a class=\"new-card-type\" (click)=\"setCardType('correlation_matrix')\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'correlation'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">Correlation matrix</h5>\n                            <p class=\"new-card-type__description\">\n                                Examine the relationship of multiple variables at the same time.\n                            </p>\n                        </div>\n                    </a>\n                    <a class=\"new-card-type\" (click)=\"setCardType('pca')\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'pca'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">Principal Component Analysis</h5>\n                            <p class=\"new-card-type__description\">\n                                Reduce a large set of variables into a smaller set of components.\n                            </p>\n                        </div>\n                    </a>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"WizardState.FIT\">\n                <div class=\"card-wizard__body--wide\">\n                    <a class=\"new-card-type\" (click)=\"setCardType('fit_distribution')\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'fit-distribution'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">Fit Distribution</h5>\n                            <p class=\"new-card-type__description\">\n                                Estimate the parameters of the most common distributions (normal, exponential, ...)\n                            </p>\n                        </div>\n                    </a>\n                    <a class=\"new-card-type\" (click)=\"setCardType('fit_2d_distribution')\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'fit-2d-distribution'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">2D Fit Distribution</h5>\n                            <p class=\"new-card-type__description\">\n                                Visualize the density of bivariate distributions (KDE and bivariate gaussian).\n                            </p>\n                        </div>\n                    </a>\n                    <a class=\"new-card-type\" (click)=\"setCardType('fit_curve')\"\n                        [qa]=\"{'eda-wizard-navigate': {'category': 'fit-curve'}}\">\n                        <div class=\"new-card-type__body\">\n                            <h5 class=\"new-card-type__title\">Fit Curve</h5>\n                            <p class=\"new-card-type__description\">\n                                Model the relationship between two variables.\n                            </p>\n                        </div>\n                    </a>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"WizardState.TEST\">\n                <div class=\"new-card new-card--test horizontal-flex card-wizard__body--wide\">\n                    <div class=\"new-card-menu\">\n                        <ul class=\"new-card__list\">\n                            <li (click)=\"setTestType(TestState.ONE_SAMPLE)\" class=\"new-card-menu__item\"\n                                [ngClass]=\"{ 'new-card-menu__item--selected': selectedTest === TestState.ONE_SAMPLE }\"\n                                [qa]=\"{'eda-wizard-navigate': {'category': 'one-sample-test'}}\">\n                                <h5 class=\"new-card-menu__header\">One-sample test</h5>\n                                <span class=\"new-card-menu__subtext\">1 <i class=\"icon-number\"></i> variable</span>\n                            </li>\n                            <li (click)=\"setTestType(TestState.TWO_SAMPLE)\" class=\"new-card-menu__item\"\n                                [ngClass]=\"{ 'new-card-menu__item--selected': selectedTest === TestState.TWO_SAMPLE }\"\n                                [qa]=\"{'eda-wizard-navigate': {'category': 'two-sample-test'}}\">\n                                <h5 class=\"new-card-menu__header\">Two-sample test</h5>\n                                <span class=\"new-card-menu__subtext\">1 <i class=\"icon-number\"></i> variable</span>\n                                <span class=\"new-card-menu__subtext\">1 <i class=\"icon-font\"></i> variable with 2 modalities</span>\n                            </li>\n                            <li (click)=\"setTestType(TestState.N_SAMPLE)\" class=\"new-card-menu__item\"\n                                [ngClass]=\"{ 'new-card-menu__item--selected': selectedTest === TestState.N_SAMPLE }\"\n                                [qa]=\"{'eda-wizard-navigate': {'category': 'n-sample-test'}}\">\n                                <h5 class=\"new-card-menu__header\">N-sample test</h5>\n                                <span class=\"new-card-menu__subtext\">1 <i class=\"icon-number\"></i> variable</span>\n                                <span class=\"new-card-menu__subtext\">1 <i class=\"icon-font\"></i> variable with N modalities</span>\n                            </li>\n                            <li (click)=\"setTestType(TestState.PAIRED)\" class=\"new-card-menu__item\"\n                                [ngClass]=\"{ 'new-card-menu__item--selected': selectedTest === TestState.PAIRED }\"\n                                [qa]=\"{'eda-wizard-navigate': {'category': 'categorical-test'}}\">\n                                <h5 class=\"new-card-menu__header\">Categorical test</h5>\n                                <span class=\"new-card-menu__subtext\">2 <i class=\"icon-font\"></i> variables</span>\n                            </li>\n                        </ul>\n                    </div>\n                    <div class=\"new-card-content\">\n                        <ng-container *ngIf=\"selectedTest === TestState.ONE_SAMPLE\">\n                            <h4 class=\"new-card-content__header\">Location</h4>\n                            <p>Compare the location parameters of a population to a hypothesized constant.</p>\n                            <ul class=\"new-card__list\">\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('ttest_ztest_1samp')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': '1samp-ttest'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Student 𝘵-test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether the mean of a population is a specified value.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('sign_test_1samp')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': 'sign-test'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Sign Test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether the median of a population is a specified value.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                                <h4  class=\"new-card-content__header\">Distribution</h4>\n                                <p>Compare the distribution of a population to a hypothesized one.</p>\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('shapiro')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': 'shapiro'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Shapiro-Wilk Test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether a population is normally distributed.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                            </ul>\n                        </ng-container>\n                        <ng-container *ngIf=\"selectedTest === TestState.TWO_SAMPLE\">\n                            <h4  class=\"new-card-content__header\">Location</h4>\n                            <p>Compare the location parameters of two populations.</p>\n                            <ul class=\"new-card__list\">\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('ttest_2samp')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': '2samp-ttest'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Student 𝘵-test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether the mean of two populations is equal.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('mood_test_2samp')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': '2samp-mood-test'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Median Mood Test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether the median of two populations is equal.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                                <h4  class=\"new-card-content__header\">Distribution</h4>\n                                <p>Compare the distributions of two populations.</p>\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('ks_test_2samp')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': 'ks-test'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Kolmogorov-Smirnov</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether the two populations are similarly distributed.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                            </ul>\n                        </ng-container>\n                        <ng-container *ngIf=\"selectedTest === TestState.N_SAMPLE\">\n                            <h4  class=\"new-card-content__header\">Location</h4>\n                            <p>Compare the location parameters of multiple populations.</p>\n                            <ul class=\"new-card__list\">\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('oneway_anova')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': 'anova'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Oneway ANOVA</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether the mean of all populations is equal.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('mood_nsamp')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': 'nsamp-mood-test'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Median Mood Test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether the median of all populations is equal.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('pairwise_ttest')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': 'pairwise-ttest'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Pairwise Student 𝘵-test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether every pair of population has the same mean.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('pairwise_mood')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': 'pairwise-mood-test'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Pairwise Median Mood Test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether every pair of population has the same median.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                            </ul>\n                        </ng-container>\n                        <ng-container *ngIf=\"selectedTest === TestState.PAIRED\">\n                            <h4  class=\"new-card-content__header\">Independence</h4>\n                            <p>Test independence between categorical variables.</p>\n                            <ul class=\"new-card__list\">\n                                <li>\n                                    <a class=\"new-card-type new-card-type--list\"\n                                        (click)=\"setCardType('chi2_independence_test')\"\n                                        [qa]=\"{'eda-wizard-navigate': {'category': 'chi2-test'}}\">\n                                        <div class=\"new-card-type__body\">\n                                            <h5 class=\"new-card-type__title\">Chi-square Independence Test</h5>\n                                            <p class=\"new-card-type__description\">\n                                                Test whether two categorical variables are independent.\n                                            </p>\n                                        </div>\n                                    </a>\n                                </li>\n                            </ul>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n    <ng-container *ngIf=\"state === WizardState.VARIABLES\">\n        <div class=\"modal-footer modal-footer-std-buttons\">\n            <div class=\"pull-right\" [matTooltip]=\"validationTooltip\">\n                <button\n                    type=\"button\"\n                    class=\"btn btn--text btn--secondary\"\n                    (click)=\"dismiss()\"\n                    tabindex=\"-1\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"submit\"\n                    form=\"config-form\"\n                    class=\"btn btn--text btn--primary\"\n                    [disabled]=\"!canSave\"\n                    (click)=\"save()\"\n                    tabindex=\"-1\"\n                    [wt1Click]=\"'worksheets_create-card'\"\n                    [qa]=\"'eda-create-card-button'\"\n                >\n                    Create Card\n                </button>\n            </div>\n        </div>\n    </ng-container>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { CardWizardService } from '../card-wizard.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Card, isCorrelationMatrixCard, isPCACard } from 'src/generated-sources';\nimport { getBasicCardTitle } from '@features/eda/card-utils';\nimport produce from 'immer';\n\nenum TestState {\n    ONE_SAMPLE = 'ONE_SAMPLE',\n    TWO_SAMPLE = 'TWO_SAMPLE',\n    N_SAMPLE = 'N_SAMPLE',\n    PAIRED = 'PAIRED',\n}\n\nexport enum WizardState {\n    ANALYSIS = 'ANALYSIS',\n    TEST = 'TEST',\n    FIT = 'FIT',\n    VARIABLES = 'VARIABLES'\n}\n\n@Component({\n    selector: 'new-card-modal',\n    templateUrl: './new-card-modal.component.html',\n    styleUrls: [\n        '../../../shared-styles/card-wizard.less',\n        './new-card-modal.component.less'\n    ],\n    providers: [CardWizardService]\n})\nexport class NewCardModalComponent implements OnInit {\n    state = WizardState.ANALYSIS;\n    previousState = WizardState.ANALYSIS;\n    WizardState = WizardState;\n    selectedTest = TestState.ONE_SAMPLE;\n    TestState = TestState;\n    stateName = {\n        [WizardState.ANALYSIS]: 'Select a card type',\n        [WizardState.TEST]: 'Statistical Tests',\n        [WizardState.FIT]: 'Fit curves & distributions',\n        [WizardState.VARIABLES]: '',\n    };\n    title: string = this.stateName[this.state];\n\n    params: any = {};\n    changedParamsValid = true;\n    validationTooltip: string;\n    changedParams?: Card;\n\n    constructor(\n        private cardWizardService: CardWizardService,\n        private dialogRef: MatDialogRef<NewCardModalComponent>\n    ) {\n    }\n\n    ngOnInit() {\n    }\n\n    setCardType(type: Card['type']) {\n        this.params = this.cardWizardService.getCardDefault(type);\n        this.title = getBasicCardTitle(this.params);\n        this.goToState(WizardState.VARIABLES);\n    }\n\n    goToState(state: WizardState) {\n        this.previousState = this.state;\n        this.state = state;\n\n        if (this.state !== WizardState.VARIABLES) {\n            this.title = this.stateName[this.state];\n        }\n    }\n\n    goToPreviousState(state: WizardState) {\n        let previousState: WizardState = this.previousState;\n\n        switch (state) {\n            case WizardState.FIT:\n            case WizardState.TEST:\n                previousState = WizardState.ANALYSIS;\n                break;\n        }\n\n        this.goToState(previousState);\n    }\n\n    setTestType(type: TestState) {\n        this.selectedTest = type;\n    }\n\n    changeValidity(validity: boolean) {\n        this.changedParamsValid = validity;\n    }\n\n    changeValidityTooltip(tooltip: string) {\n        this.validationTooltip = tooltip;\n    }\n\n    changeParams(params: Card) {\n        this.changedParams = params;\n    }\n\n    dismiss() {\n        this.dialogRef.close('');\n    }\n\n    get canSave() {\n        return this.changedParams && this.changedParamsValid;\n    }\n\n    save() {\n        if (this.canSave) {\n            this.dialogRef.close({\n                card: withSmartCreationParams(this.changedParams!)\n            });\n        }\n    }\n}\n\n// Not all parameters are configurable in card creation modal\n// This function overrides default parameters with smart values\nfunction withSmartCreationParams(newCard: Card): Card {\n    // Hide values when the heatmap is too large (unreadable)\n    if (isCorrelationMatrixCard(newCard) || isPCACard(newCard)) {\n        return produce(newCard, draft => {\n            if (newCard.columns.length > 20) {\n                draft.heatmapParams.showValues = false;\n            }\n        });\n    }\n\n    return newCard;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nconst TARGET_NUMBER_LENGTH = 12;\n\n/**\n * Similar to smartNumber except:\n * - Formatted numbers takes <= TARGET_NUMBER_LENGTH characters\n * - Precision is preserved as much as possible\n */\nexport function smarterNumber(v?: number | null): string {\n    if (typeof v !== 'number') {\n        return 'N/A';\n    }\n    const str = v.toString();\n    if (str.length <= TARGET_NUMBER_LENGTH) {\n        return str;\n    }\n    for (let precision = TARGET_NUMBER_LENGTH; precision > 1; precision--) {\n        // Round to lower precision\n        const rounded = v.toPrecision(precision);\n        // Remove trailing zeros\n        const cleaned = rounded.replace(/^([-+]?[0-9]*)(?:\\.0*|(\\.[0-9]*[1-9])0*)([eE][-+]?[0-9]+)?$/, '$1$2$3');\n        if (cleaned.length <= TARGET_NUMBER_LENGTH) {\n            return cleaned;\n        }\n    }\n    // Should never happen\n    return v.toString();\n}\n\n@Pipe({\n    name: 'smarterNumber'\n})\nexport class SmarterNumberPipe implements PipeTransform {\n    transform(d: number | undefined | null): string {\n        return smarterNumber(d);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Filter, IntervalFilter, isAnumFilter, isAllFilter, isIntervalFilter, isAndFilter } from 'src/generated-sources';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\nfunction fullFilterName(filter: Filter): string {\n    if (!filter) {\n        return '';\n    }\n    if (filter.name != null && filter.name !== '') {\n        return filter.name;\n    }\n    if (isAnumFilter(filter)) {\n        return filter.values.map(value => value === '' ? '(no value)' : value).join(', ');\n    }\n    if (isAllFilter(filter)) {\n        return 'All';\n    }\n    if (isIntervalFilter(filter)) {\n        let beginning;\n        let end;\n        switch (filter.closed) {\n            case IntervalFilter.ClosedMode.LEFT:\n                beginning = '[';\n                end = ')';\n                break;\n            case IntervalFilter.ClosedMode.RIGHT:\n                beginning = '(';\n                end = ']';\n                break;\n            case IntervalFilter.ClosedMode.BOTH:\n                beginning = '[';\n                end = ']';\n                break;\n            case IntervalFilter.ClosedMode.NEITHER:\n                beginning = '(';\n                end = ')';\n        }\n        const left = filter.left === -Number.MAX_VALUE ? '-∞' : smarterNumber(filter.left);\n        const right = filter.right === Number.MAX_VALUE ? '+∞' : smarterNumber(filter.right);\n        return `${beginning}${left},${right}${end}`;\n    }\n    if (isAndFilter(filter)) {\n        return filter.filters\n            .map(childFilter => filterName(childFilter))\n            .join(', ');\n    }\n\n    // NOT IMPLEMENTED\n    return 'UNNAMED';\n}\n\nexport function filterName(filter: Filter): string {\n    return fullFilterName(filter).slice(0, 100);\n}\n\n@Pipe({\n    name: 'filterName',\n    pure: true\n})\nexport class FilterNamePipe implements PipeTransform {\n    transform(filter: Filter): string {\n        return filterName(filter);\n    }\n}\n","import {Filter, _Filter} from './filter';\n\n/**\n * Generated from com.dataiku.dip.eda.compute.filtering.AnumFilter\n */\nexport interface AnumFilter extends _Filter {\n    column: string;\n    values: string[];\n\n    // PolyJson type\n    type: 'anum';\n}\n\nexport function isAnumFilter(toTest: Filter): toTest is AnumFilter { return 'anum' === toTest.type; }","import { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { Observable, Subject, of, concat } from 'rxjs';\nimport { Card, Filter, Variable, SplitBySpec, AbstractHeaderCard } from 'src/generated-sources';\nimport { FilterNamePipe } from '@features/eda/pipes/filter-name.pipe';\n\n// Collapsing key is an identifier used to synchronize collapsible elements together\n// Typically, two elements are collapsed together if their collapsing key is the same\nabstract class CollapsibleBase {\n    // Collapsible is always per-card\n    cardId: string;\n\n    // Type of collapsible\n    type: string;\n\n    // Used to\n    // - Persist collapsing states\n    // - Compare collapsible key\n    persistenceKey(): string {\n        return `${this.type}.${this.cardId}`;\n    }\n\n    constructor(cardId: string) {\n        this.cardId = cardId;\n    }\n\n    collapsedByDefault(): boolean {\n        return false;\n    }\n}\n\n// Collapsing key referencing a specific group in any grouped top level card\nexport class CollapsibleGroup extends CollapsibleBase {\n    type = 'group';\n    filter: Filter;\n\n    persistenceKey() {\n        return `${super.persistenceKey()}.${new FilterNamePipe().transform(this.filter)}`;\n    }\n\n    constructor(cardId: string, filterArg: Filter) {\n        super(cardId);\n        this.filter = filterArg;\n    }\n}\n\n\n// Collapsing key referencing a top level card\nexport class CollapsibleTopLevelCard extends CollapsibleBase {\n    type = 'top_level';\n}\n\n// Collapsing key referencing the help section of a top level card\nexport class CollapsibleHelp extends CollapsibleBase {\n    type = 'help';\n\n    collapsedByDefault(): boolean {\n        return true;\n    }\n}\n\n\n// Collapsing key of a stat card\n// Note: since grouped header cards are rotated, collapsing works per-column\nexport class CollapsibleStatCard extends CollapsibleBase {\n    type = 'stat_card';\n    column: Variable;\n    statType: Card['type'];\n    headerSplitBy?: SplitBySpec | null;\n\n    persistenceKey() {\n        if (this.headerSplitBy) {\n            return `${super.persistenceKey()}.grouped.${this.statType}.${this.column.type}.${this.column.name}`;\n        } else {\n            return `${super.persistenceKey()}.notGrouped.${this.statType}.${this.column.type}`;\n        }\n    }\n\n    constructor(headerCard: AbstractHeaderCard, column: Variable, statType: Card['type']) {\n        super(headerCard.id);\n        this.column = column;\n        this.statType = statType;\n        this.headerSplitBy = headerCard.splitBy;\n    }\n}\n\n// Collapsing key of a column any header card\nexport class CollapsibleColumnCard extends CollapsibleBase {\n    type = 'column_card';\n    column: Variable;\n\n    persistenceKey() {\n        return `${super.persistenceKey()}.${this.column.name}`;\n    }\n\n    constructor(cardId: string, column: Variable) {\n        super(cardId);\n        this.column = column;\n    }\n}\n\nexport type Collapsible = CollapsibleGroup\n    | CollapsibleStatCard\n    | CollapsibleColumnCard\n    | CollapsibleTopLevelCard\n    | CollapsibleHelp;\n\nexport abstract class CollapsingService {\n    abstract watchIsCollapsed(collapsible: Collapsible): Observable<boolean>;\n    abstract setIsCollapsed(collapsible: Collapsible, isCollapsed: boolean): void;\n}\n\nexport abstract class UpdatableCollapsingService extends CollapsingService {\n\n}\n\n@Injectable()\nexport class LocalStorageCollapsingService extends UpdatableCollapsingService {\n    private changes = new Subject<{ storageKey: string, isCollapsed: boolean }>();\n\n    watchIsCollapsed(collapsible: Collapsible): Observable<boolean> {\n        const storageKey = collapsible.persistenceKey();\n        const initialValue = this.getItem(storageKey, collapsible.collapsedByDefault());\n        const updatedValues = this.changes.pipe(\n            filter(change => change.storageKey === storageKey),\n            map(change => change.isCollapsed)\n        );\n        return concat(of(initialValue), updatedValues);\n    }\n\n    constructor() {\n        super();\n    }\n\n    setIsCollapsed(collapsible: Collapsible, newIsCollapsed: boolean): void {\n        const storageKey = collapsible.persistenceKey();\n        const newIsDefault = newIsCollapsed === collapsible.collapsedByDefault();\n\n        if (newIsDefault) {\n            this.removeItem(storageKey);\n        } else {\n            this.setItem(storageKey, newIsCollapsed);\n        }\n        this.changes.next({ storageKey, isCollapsed: newIsCollapsed });\n    }\n\n    // Private\n\n    private setItem(key: string, collapsed: true | false) {\n        localStorage.setItem(key, collapsed ? 'true' : 'false');\n    }\n\n    private removeItem(key: string) {\n        localStorage.removeItem(key);\n    }\n\n    private getItem(key: string, collapsedByDefault: boolean): boolean {\n        switch (localStorage.getItem(key)) {\n            case 'true':\n                return true;\n            case 'false':\n                return false;\n        }\n        return collapsedByDefault;\n    }\n}\n\n@Injectable()\nexport class NoopCollapsingService extends CollapsingService {\n    watchIsCollapsed(collapsible: Collapsible): Observable<boolean> {\n        return of(collapsible.collapsedByDefault());\n    }\n\n    setIsCollapsed(collapsible: Collapsible, isCollapsed: boolean): void {\n        return;\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'delete-dialog',\n  templateUrl: './delete-dialog.component.html',\n  styleUrls: ['./delete-dialog.component.less']\n})\nexport class DeleteDialogComponent  {\n    // Use remove for variables, but delete for cards since we're not actually deleting the variable/column\n    get removalText(): string {\n        return this.data.type === 'column_card' ? 'remove' : 'delete';\n    }\n\n    constructor(\n        public dialogRef: MatDialogRef<DeleteDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: {\n            title: string,\n            type?: string,\n        }\n    ) { }\n}\n","\n<div class=\"modal-header no-totem has-border\">\n    <h4 class=\"remove-title\">{{ removalText }} \"{{ data.title }}\"</h4>\n</div>\n<div class=\"modal-body\">\n    <p>Are you sure you want to {{ removalText }} \"{{ data.title }}\"?\n    </p>\n</div>\n<div class=\"modal-footer modal-footer-std-buttons\">\n    <div class=\"pull-right\">\n        <button type=\"button\" class=\"btn btn--text btn--secondary\" (click)=\"dialogRef.close(false)\">Cancel</button>\n        <button type=\"button\" class=\"btn btn--text btn--danger\" (click)=\"dialogRef.close(true)\" >\n            {{ removalText }}\n        </button>\n    </div>\n</div>","import { ElementRef, Injector, Directive, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'angularjs-dataset-selector'\n})\nexport class AngularjsDatasetSelectorDirective extends UpgradeComponent {\n    @Input() dataset: any;\n    @Input() datasetChange: any;\n    @Input() availableDatasets: any;\n    @Input() required?: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('ng1DatasetSelectorDirective', elementRef, injector);\n    }\n}","import { Component, Output, Input, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'dataset-selector',\n    template: '<angularjs-dataset-selector [dataset]=\"dataset\" [datasetChange]=\"datasetChange\" [availableDatasets]=\"availableDatasets\" [required]=\"required\"></angularjs-dataset-selector>',\n})\nexport class DatasetSelectorComponent {\n    @Input() dataset: string;\n    @Input() availableDatasets: any[];\n    @Input() required?: boolean;\n    @Output() datasetChange: EventEmitter<String> = new EventEmitter<String>();\n}\n","import { Component, Input, EventEmitter, Output, forwardRef, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'dataset-selector-form-control',\n    template: `\n        <dataset-selector\n            [dataset]=\"dataset\"\n            (datasetChange)=\"select($event)\"\n            [availableDatasets]=\"availableDatasets\"\n            [required]=\"required\"\n        ></dataset-selector>\n    `,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => DatasetSelectorFormControlComponent),\n        multi: true\n    }]\n})\nexport class DatasetSelectorFormControlComponent implements ControlValueAccessor {\n    @Input() dataset: string;\n    @Input() availableDatasets: any[];\n    @Input() required?: boolean;\n    @Output() datasetChange: EventEmitter<String> = new EventEmitter<String>();\n\n    propagateChange = (_: any) => {};\n\n    constructor(\n        private changeDetectionRef: ChangeDetectorRef,\n    ) {\n\n    }\n\n    select(selected: any) {\n        this.propagateChange(selected);\n    }\n\n    writeValue(value: any) {\n        this.dataset = value;\n    }\n\n    registerOnChange(fn: (_: any) => {}) {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched() {}\n}\n","<div class=\"modal\">\n    <modal-header\n        [title]=\"'Duplicate worksheet'\"\n        [hasBorder]=\"false\"\n    ></modal-header>\n    <div class=\"modal-body\">\n        <form class=\"dkuform-modal-horizontal\" [formGroup]=\"form\">\n            <div class=\"control-group\">\n                <label class=\"control-label\">Project</label>\n                <div class=\"controls\">\n                    <dku-bs-select-form-control [params]=\"projectSelectParams\" dataLiveSearch=\"true\" [list]=\"projects\" formControlName=\"project\" ngOptions=\"project.projectKey as project.name for project in list\"></dku-bs-select-form-control>\n                </div>\n            </div>\n            <div class=\"control-group modal-first-cg-clear-totem\" ng-show=\"selectedProject\">\n                <label class=\"control-label\">Dataset</label>\n                <div class=\"controls\">\n                    <dataset-selector-form-control [availableDatasets]=\"datasets\" formControlName=\"dataset\"></dataset-selector-form-control>\n                    <div class=\"help-inline\" *ngIf=\"!datasets.length\">\n                        <a (click)=\"importDataset(form.get('project')!.value)\">No dataset in this project: Import a new dataset</a>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\">\n            <button type=\"button\" class=\"btn btn--text btn--secondary\" (click)=\"dialogRef.close(false)\">Cancel</button>\n            <button type=\"button\" class=\"btn btn--text btn--primary\" (click)=\"confirm()\" [disabled]=\"!form.valid\">\n                Confirm\n            </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ChangeDetectionStrategy, OnDestroy, ChangeDetectorRef, Inject } from '@angular/core';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { CurrentRouteService } from '@core/nav/current-route.service';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { map, switchMap, filter, distinctUntilChanged } from 'rxjs/operators';\nimport { UsabilityComputer, ProjectsCRUDController } from 'src/generated-sources';\nimport { IScope } from 'angular';\nimport { fairAny } from 'dku-frontend-core';\n\n@UntilDestroy()\n@Component({\n    selector: 'duplicate-worksheet-dialog',\n    templateUrl: './duplicate-worksheet-dialog.component.html',\n    styleUrls: ['./duplicate-worksheet-dialog.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DuplicateWorksheetDialogComponent implements OnInit, OnDestroy {\n    projects: ProjectsCRUDController.ProjectHead[] = [];\n    datasets: UsabilityComputer.UsableComputable[] = [];\n    projectSelectParams: { noneSelectedText: string };\n    form = this.fb.group({\n        project: this.fb.control(null, [Validators.required]),\n        dataset: this.fb.control(null, [Validators.required])\n    });\n\n    constructor(\n        private currentRoute: CurrentRouteService,\n        private DataikuAPI: DataikuAPIService,\n        private changeDetectionRef: ChangeDetectorRef,\n        public dialogRef: MatDialogRef<DuplicateWorksheetDialogComponent>,\n        @Inject('$state') private $state: fairAny,\n        @Inject('$rootScope') private $rootScope: IScope,\n        private fb: FormBuilder\n    ) {\n        this.projectSelectParams = {\n            noneSelectedText: 'No project selected'\n        };\n    }\n\n    ngOnInit() {\n        const originalProjectKey = this.currentRoute.projectKey;\n        const originalDatasetName = this.currentRoute.datasetName;\n\n        this.DataikuAPI.projects.listHeads('WRITE_CONF')\n            .pipe(\n                untilDestroyed(this)\n            )\n            .subscribe((writableProjects) => {\n                if (writableProjects && writableProjects.length) {\n                    const currentProjectWritable = writableProjects.some(_ => _.projectKey === originalProjectKey);\n                    const selectedProject = currentProjectWritable ? originalProjectKey : writableProjects[0].projectKey;\n\n                    this.projects = writableProjects;\n\n                    this.form.patchValue({\n                        project: selectedProject\n                    });\n\n                    this.changeDetectionRef.detectChanges();\n                }\n            });\n\n        this.form.controls.project.valueChanges.pipe(\n            distinctUntilChanged(),\n            filter(projectKey => projectKey), // if not empty\n            switchMap(projectKey => this.DataikuAPI.flow.listUsableComputables(projectKey, { datasetsOnly: true })\n                .pipe(\n                    map(datasets => [projectKey, datasets])\n                )\n            )\n        ).subscribe(([projectKey, datasets]) => {\n            const selectedDataset = projectKey === originalProjectKey ? originalDatasetName : null;\n\n            this.datasets = datasets;\n\n            this.form.patchValue({\n                dataset: selectedDataset\n            });\n\n            this.changeDetectionRef.detectChanges();\n            this.$rootScope.$applyAsync();\n        });\n    }\n\n    importDataset(projectKey: string) {\n        this.$state.go('projects.project.datasets.new', {\n            projectKey\n        });\n    }\n\n    confirm() {\n        this.dialogRef.close({\n            projectKey: this.form.controls.project.value,\n            datasetName: this.form.controls.dataset.value,\n        });\n    }\n\n    ngOnDestroy() {\n\n    }\n\n}\n","import { Component, OnInit, ChangeDetectionStrategy, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n    selector: 'rename-worksheet-dialog',\n    templateUrl: './rename-worksheet-dialog.component.html',\n    styleUrls: ['./rename-worksheet-dialog.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RenameWorksheetDialogComponent {\n    constructor(\n        public dialogRef: MatDialogRef<RenameWorksheetDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: {\n            name: string\n        }\n    ) {}\n}\n","<div class=\"modal\">\n    <modal-header\n        [title]=\"'Rename worksheet'\"\n        [hasBorder]=\"false\"\n    ></modal-header>\n    <div class=\"modal-body dkuform-modal-horizontal\">\n        <div class=\"control-group\">\n            <label for=\"\" class=\"control-label\">New name</label>\n            <div class=\"controls\">\n                <input [(ngModel)]=\"data.name\" type=\"text\" />\n            </div>\n        </div>\n    </div>\n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\">\n            <button type=\"button\" class=\"btn btn--text btn--secondary\" (click)=\"dialogRef.close(false)\">Cancel</button>\n            <button type=\"button\" class=\"btn btn--text btn--primary\" (click)=\"dialogRef.close(data.name)\" >\n                Confirm\n            </button>\n        </div>\n    </div>\n</div>\n","<div class=\"waiting\">\n    <div class=\"waiting__progress\">\n        <svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\" class=\"waiting__svg\">\n            <circle [attr.r]=\"radius\" cx=\"60\" cy=\"60\" stroke-width=\"6\" class=\"waiting__spinner-base\" />\n            <circle [attr.r]=\"radius\" cx=\"60\" cy=\"60\" stroke-width=\"6\" class=\"waiting__spinner\" />\n        </svg>\n        <div class=\"waiting__percentage\" *ngIf=\"started\">{{ percentage | number: '1.0-0' }}%</div>\n    </div>\n    <div class=\"waiting__message\">\n        <span [innerHtml]=\"stackMessage\" class=\"waiting__message-text\"></span>\n    </div>\n    <button (click)=\"abort()\" class=\"btn btn--danger waiting__abort\">Abort</button>\n</div>","import { Component, Inject } from '@angular/core';\nimport { fairAny } from 'dku-frontend-core';\n\n@Component({\n    selector: 'waiting-overlay',\n    templateUrl: './waiting-overlay.component.html',\n    styleUrls: ['./waiting-overlay.component.less']\n})\nexport class WaitingOverlayComponent {\n    percentage = 0;\n    radius = 54;\n    stackMessage = '';\n    started = false;\n    abortFunction?: () => void;\n\n    constructor(\n        @Inject('ProgressStackMessageBuilder') private ProgressStackMessageBuilder: fairAny\n    ) {\n    }\n\n    setAbortFunction(abortFunction: () => void) {\n        this.abortFunction = abortFunction;\n    }\n\n    abort(): void {\n        if (this.abortFunction) {\n            this.abortFunction();\n        }\n    }\n\n    update(progress: any) {\n        this.percentage = this.ProgressStackMessageBuilder.getPercentage(progress);\n        this.started = progress && progress.states && progress.states.length;\n        this.stackMessage = this.ProgressStackMessageBuilder.build(progress);\n    }\n}\n","import { OverlayConfig, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { Injectable, Inject, ComponentRef } from '@angular/core';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { WaitingOverlayComponent } from './waiting-overlay/waiting-overlay.component';\nimport { fairAny } from 'dku-frontend-core';\nimport { Observable, defer, Subject, OperatorFunction, MonoTypeOperatorFunction } from 'rxjs';\nimport { takeUntil, finalize, tap } from 'rxjs/operators';\nimport { IScope } from 'angular';\nimport { TypedFutureResponse, FutureWatcherService } from 'dku-frontend-core';\n\ninterface FutureState {\n    progress: any;\n    aborter: () => void;\n}\n\nconst ABORT_ERROR = {\n    message: 'Interrupted',\n    errorType: 'FutureAbort',\n    httpCode: 444\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class WaitingService {\n    constructor(\n        private overlay: Overlay,\n        private futureWatcher: FutureWatcherService,\n        @Inject('SpinnerService') SpinnerService: fairAny,\n        @Inject('$rootScope') private $rootScope: IScope\n    ) {\n        this.spinnerServiceInstance = SpinnerService();\n    }\n\n    private spinnerServiceInstance: any;\n\n    // List of running futures (only the last one is displayed)\n    private futures: FutureState[] = [];\n    // Active overlay reference\n    private overlayRef?: OverlayRef;\n    private componentRef?: ComponentRef<WaitingOverlayComponent>;\n\n    // Nb. of observables requesting the spinner to be shown (spinner is displayed when count > 0)\n    private spinnerRequestCount = 0;\n    // Active spinner flag\n    private isSpinnerDisplayed = false;\n\n    bindSpinner<T>() {\n        const spinnerHolder$ = new Observable<T>(_ => {\n            this.spinnerRequestCount++;\n            this.update();\n            return () => {\n                this.spinnerRequestCount--;\n                this.update();\n            };\n        });\n        return (longOperation: Observable<T>) => longOperation.pipe(takeUntil(spinnerHolder$));\n    }\n\n    bindStaticOverlay<T>(message = 'Please wait...'): MonoTypeOperatorFunction<T> {\n        const attachedObservable = new Observable(observer => {\n            const futureState = {\n                progress: { states: [{ name: message }] },\n                aborter: () => { observer.error(ABORT_ERROR); }\n            };\n            this.futures.push(futureState);\n            this.update();\n            return () => {\n                this.futures = this.futures.filter(f => f !== futureState);\n                this.update();\n            };\n        });\n\n        return future => future.pipe(takeUntil(attachedObservable));\n    }\n\n    bindOverlayAndWaitForResult<T>(): OperatorFunction<TypedFutureResponse<T>, T> {\n        return future => defer(() => { // defer() ensures we get a different context at every subscription\n            const aborted$ = new Subject<void>();\n            let futureState: FutureState | undefined;\n            return future.pipe(\n                tap(resp => {\n                    if (!futureState) {\n                        futureState = {\n                            aborter: () => aborted$.error(ABORT_ERROR),\n                            progress: resp.progress\n                        };\n                        this.futures.push(futureState);\n                    }\n                    futureState.progress = resp.progress;\n                    this.update();\n                }),\n                finalize(() => {\n                    this.futures = this.futures.filter(f => f !== futureState);\n                    this.update();\n                }),\n                this.futureWatcher.waitForResult(),\n                takeUntil(aborted$)\n            );\n        });\n    }\n\n    private update() {\n        // Update the future overlay (managed by Angular)\n        const shouldDisplayOverlay = this.futures.length > 0;\n        const isOverlayDisplayed = this.overlayRef && this.componentRef;\n\n        if (shouldDisplayOverlay && !isOverlayDisplayed) {\n            const config = new OverlayConfig();\n            config.positionStrategy = this.overlay.position()\n                .global().centerHorizontally().centerVertically();\n            this.overlayRef = this.overlay.create(config);\n            const portal = new ComponentPortal(WaitingOverlayComponent);\n            this.componentRef = this.overlayRef.attach(portal);\n            this.componentRef.instance.setAbortFunction(() => {\n                // Abort them all\n                for (const future of this.futures) {\n                    future.aborter();\n                }\n                this.futures = [];\n            });\n        }\n\n        if (!shouldDisplayOverlay && isOverlayDisplayed) {\n            this.overlayRef!.dispose();\n            delete this.overlayRef;\n            delete this.componentRef;\n        }\n\n        if (shouldDisplayOverlay) {\n            const lastFuture = this.futures[this.futures.length - 1];\n            this.componentRef!.instance.update(lastFuture.progress);\n        }\n\n        // Update the spinner (managed by AngularJS)\n        const shouldDisplaySpinner = this.spinnerRequestCount > 0\n            && !shouldDisplayOverlay; // Hide spinner if overlay is shown\n\n        if (this.isSpinnerDisplayed && !shouldDisplaySpinner) {\n            this.$rootScope.$applyAsync(() => this.spinnerServiceInstance.release());\n            this.isSpinnerDisplayed = false;\n        }\n\n        if (!this.isSpinnerDisplayed && shouldDisplaySpinner) {\n            this.$rootScope.$applyAsync(() => this.spinnerServiceInstance.acquire());\n            this.isSpinnerDisplayed = true;\n        }\n    }\n}\n","import { SchemaColumn, Variable } from 'src/generated-sources';\n\nexport function columnsToVariables(schemaColumns: SchemaColumn[]): Variable[] {\n    return schemaColumns.map(column => {\n        switch (column.type) {\n            case 'float':\n            case 'double':\n            case 'smallint':\n            case 'int':\n            case 'bigint':\n            case 'tinyint':\n                return { type: Variable.Type.CONTINUOUS, name: column.name };\n            default:\n                return { type: Variable.Type.CATEGORICAL, name: column.name };\n        }\n    });\n}","import { Card, Variable, SerializedDataset } from 'src/generated-sources';\nimport { AnyLoc, Worksheet, Sample, CardResult, WorksheetRootCard, ComputationResult } from 'src/generated-sources';\nimport { Observable, combineLatest, NEVER } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport deepEqual from 'fast-deep-equal';\nimport { deepDistinctUntilChanged, combineLatestObject } from 'dku-frontend-core';\nimport { APIError } from '@core/dataiku-api/api-error';\nimport { columnsToVariables } from '../schema-utils';\nimport { resolveSmartName } from '../utils';\n\n\n// Store the results of card\nexport interface CachedComputedCard {\n    cardParams: Card;\n    cardResult: CardResult;\n    sampleId: string;\n}\n\n// Store state related to the current worksheet\nexport interface State {\n    // Pointer to the (maybe not yet loaded) worksheet\n    worksheetLoc?: AnyLoc;\n\n    // Temporary worksheet containing pending user modifications (not fixed up yet)\n    // - The 'dirtyWorksheet' is updated by user actions\n    // - The WorksheetSaver will take care of updating the 'worksheet' (after it has been saved & fixed)\n    dirtyWorksheet?: Worksheet;\n\n    // Current worksheet (fixed up by the backend & consistent with current results)\n    // - This worksheet is never impacted by user actions directly\n    // - It is updated by the WorksheetSaver or WorksheetLoader processes only\n    worksheet?: Worksheet;\n\n    // Details about the current sample\n    // - Managed by the SampleLoader process\n    // - Note that the sample is only asked if necessary (ie. when there are cards to compute or explicitely requested)\n    sample?: Sample;\n\n    // Card which should require focus (when a card is focused => we scroll to id)\n    // - 'focusedCardId' is set when a top level card is newly added\n    // - When card is displayed in the UI with results, the component triggers a scroll\n    // - After scroll is done, the component will reset the 'focusedCardId'\n    focusedCardId?: string;\n\n    // Store the results of each top level cards (instead of working with a global WorksheetRootCardResult)\n    // - 'results' are generated by the WorksheetComputer process\n    // - 'results' **MUST** be consistent with the cards of the current 'worksheet' at all time\n    results: { [cardId: string]: CachedComputedCard };\n\n    // List of card IDs which need to be computed\n    // - 'requestedCardIds' is driven by the CollapsingWatcher process (to compute expanded cards only)\n    requestedCardIds: string[];\n\n    // Store a worksheet-global error\n    // - Any process can push a worksheet-global error (eg. network error, backend failure, etc)\n    error?: APIError;\n\n    // Dataset associated to the worksheet\n    // - 'dataset' is managed by the DatasetLoader process\n    dataset?: SerializedDataset;\n\n    // Flag indicating that the sample has been requested\n    // (without this flag, the sample is not built automatically until there is a card to compute)\n    sampleExternallyRequested: boolean;\n}\n\nexport const INITIAL_STATE: State = {\n    requestedCardIds: [],\n    results: {},\n    sampleExternallyRequested: false\n};\n\nexport type Transition = (state: State) => State;\n\nexport type Process = Observable<Transition>;\n\n// Extract nested properties from the global worksheet state\nexport class StateSelectors {\n    constructor(public state$: Observable<State>) { }\n\n    getRequestedCards() {\n        return combineLatest([this.getRequestedCardIds(), this.getWorksheet()]).pipe(\n            map(([ids, worksheet]) => {\n                if (!worksheet) { return []; }\n                return worksheet.rootCard!.cards.filter(card => ids.includes(card.id));\n            }),\n            deepDistinctUntilChanged()\n        );\n    }\n\n    getCardsToCompute() {\n        return combineLatest([\n            this.getComputedCards(),\n            this.getRequestedCards()\n        ]).pipe(map(([computedCards, requestedCardIds]) => {\n            return requestedCardIds.filter((requestedCard) => {\n                const computedCard = computedCards[requestedCard.id];\n                return !computedCard || !deepEqual(computedCard.cardParams, requestedCard);\n            });\n        }));\n    }\n\n    getSample(): Observable<Sample | undefined> {\n        return this.state$.pipe(map(state => state.sample), deepDistinctUntilChanged());\n    }\n\n    isSampleExternallyRequested() : Observable<boolean> {\n        return this.state$.pipe(map(state => state.sampleExternallyRequested), deepDistinctUntilChanged());\n    }\n\n    getLoc(): Observable<AnyLoc | undefined> {\n        return this.state$.pipe(map(state => state.worksheetLoc), deepDistinctUntilChanged());\n    }\n\n    getWorksheetLoc(): Observable<AnyLoc | undefined> {\n        return this.state$.pipe(map(state => state.worksheetLoc), deepDistinctUntilChanged());\n    }\n\n    getWorksheet(): Observable<Worksheet | undefined> {\n        return this.state$.pipe(map(state => state.worksheet), deepDistinctUntilChanged());\n    }\n\n    getRootCard(): Observable<WorksheetRootCard | undefined> {\n        return this.getWorksheet().pipe(map(worksheet => worksheet && worksheet.rootCard!));\n    }\n\n    getRequestedCardIds(): Observable<string[]> {\n        return this.state$.pipe(map(state => state.requestedCardIds), deepDistinctUntilChanged());\n    }\n\n    getError(): Observable<APIError | undefined> {\n        return this.state$.pipe(map(state => state.error), distinctUntilChanged());\n    }\n\n    getDatasetLoc(): Observable<AnyLoc | undefined> {\n        return this.state$.pipe(\n            map(state => state.worksheet ? resolveSmartName(\n                state.worksheet.projectKey,\n                state.worksheet.dataSpec.inputDatasetSmartName\n            ) : undefined),\n            deepDistinctUntilChanged()\n        );\n    }\n\n    getDataset(): Observable<SerializedDataset | undefined> {\n        return this.state$.pipe(map(state => state.dataset), distinctUntilChanged());\n    }\n\n    getFocusedCardId(): Observable<string | undefined> {\n        return this.state$.pipe(map(state => state.focusedCardId), distinctUntilChanged());\n    }\n\n    getRootCardResults(): Observable<WorksheetRootCard.WorksheetRootCardResult | undefined> {\n        return combineLatestObject({\n            worksheet: this.getWorksheet(),\n            computedResults: this.getComputedResults()\n        }).pipe(\n            map(({ worksheet, computedResults }) => {\n                if (!worksheet) {\n                    return;\n                }\n                const fakeResultCard: WorksheetRootCard.WorksheetRootCardResult = {\n                    type: 'worksheet_root',\n                    // This is fake, backend cannot process multiple cards at once\n                    computationCount: -1,\n                    failedComputationsCount: -1,\n                    notComputedCount: -1,\n                    results: worksheet.rootCard!.cards.map((card): CardResult => {\n                        if (computedResults[card.id]) {\n                            return computedResults[card.id].cardResult;\n                        }\n                        return {\n                            type: 'unavailable',\n                            reason: CardResult.UnavailabilityReason.NOT_COMPUTED,\n                            // This is a fake result\n                            computationCount: -1,\n                            failedComputationsCount: -1,\n                            notComputedCount: -1\n                        };\n                    })\n                };\n\n                return fakeResultCard;\n            })\n        );\n    }\n\n    getComputationResults(v: any): Observable<ComputationResult> {\n        return NEVER;\n    }\n\n    getComputedResults() {\n        return this.state$.pipe(map(state => state.results));\n    }\n\n    getDataSpec() {\n        return this.getWorksheet().pipe(\n            map(worksheet => worksheet && worksheet.dataSpec),\n            deepDistinctUntilChanged()\n        );\n    }\n\n    getComputedCards() {\n        return this.state$.pipe(\n            map(state => state.results),\n            deepDistinctUntilChanged()\n        );\n    }\n\n    availableVariables(): Observable<Variable[]> {\n        return combineLatest([this.getSample(), this.getDataset()]).pipe(\n            map(([sample, dataset]) => {\n                const schemaSource = sample || dataset;\n                if (!schemaSource) {\n                    return [];\n                }\n                return columnsToVariables(schemaSource.schema.columns || []);\n            })\n        );\n    }\n}\n","import produce from 'immer';\nimport { CachedComputedCard, State, Transition, INITIAL_STATE } from './state';\nimport deepEqual from 'fast-deep-equal';\nimport { Worksheet, WorksheetRootCard, DataSpec, Card, Sample, SerializedDataset, AnyLoc, AbstractHeaderCard, GroupedCompiledCardWrapper, isAbstractHeaderCard } from 'src/generated-sources';\nimport { resolveSmartName } from '../utils';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\n\nexport function setErrorTransition(error: any): Transition {\n    return state => ({ ...state, error });\n}\n\nexport function worksheetInitialLoadTransition(worksheet: Worksheet): Transition {\n    return () => ({\n        ...INITIAL_STATE,\n        worksheet,\n        worksheetLoc: { projectKey: worksheet.projectKey, id: worksheet.id! }\n    });\n}\n\nexport function worksheetSavedTransition(fixedWorksheet: Worksheet): Transition {\n    const allCardIdsInFixedWorksheet = fixedWorksheet.rootCard!.cards.map(card => card.id);\n\n    return state => produce(state, draft => {\n        for (const cardId in draft.results) {\n            if (!allCardIdsInFixedWorksheet.includes(cardId)) {\n                // Delete the results of a card if card isn't part of the worksheet anymore\n                delete draft.results[cardId];\n            }\n        }\n\n        for (const card of fixedWorksheet.rootCard!.cards) {\n            const computedCard = state.results[card.id];\n            if (computedCard && !deepEqual(computedCard.cardParams, card)) {\n                // Delete the results of a card if they are outdated\n                delete draft.results[card.id];\n            }\n        }\n\n        if (draft.worksheet) {\n            const previousDataSpec = draft.worksheet.dataSpec;\n            const newDataSpec = fixedWorksheet.dataSpec;\n            if (!deepEqual(previousDataSpec, newDataSpec)) {\n                // If dataspec has changed => clear current sample & current results\n                draft.sample = undefined;\n                draft.results = {};\n            }\n        }\n\n        draft.dirtyWorksheet = undefined;\n        draft.worksheet = fixedWorksheet;\n    });\n}\n\nexport function resultsReceivedTransition(computedCards: CachedComputedCard[]) {\n    return (state: State) => {\n        // Do NOT use immer to store the card results into the state because:\n        // - Results are (possibly) huge objects\n        // - Immer's diffing is can be slow\n        computedCards.forEach(receivedComputedCard => {\n            // Ignore if current sample doesn't match\n            if (!state.worksheet || !state.sample\n                || state.sample.id !== receivedComputedCard.sampleId) {\n                return;\n            }\n\n            // Store results if they correspond to the params of an existing top level card\n            for (const topLevelCard of state.worksheet.rootCard!.cards!) {\n                if (deepEqual(topLevelCard, receivedComputedCard.cardParams)) {\n                    const results = {\n                        ...state.results,\n                        [receivedComputedCard.cardParams.id]: receivedComputedCard\n                    };\n                    state = { ...state, results };\n                    break;\n                }\n            }\n        });\n\n        return state;\n    };\n}\n\nexport function resetFocusedCardTransition(): Transition {\n    return state => produce(state, draft => {\n        draft.focusedCardId = undefined;\n    });\n}\n\nexport function sampleLoadedTransition(sample: Sample): Transition {\n    return state => produce(state, draft => {\n        draft.sample = sample;\n\n        for (const cardId in draft.results) {\n            if (draft.results[cardId].sampleId !== sample.id) {\n                // Delete the results of a card if sample has been changed\n                delete draft.results[cardId];\n            }\n        }\n    });\n}\n\nexport function requestCardTransition(cardIds: string[]): Transition {\n    return state => produce(state, draft => {\n        draft.requestedCardIds = cardIds;\n    });\n}\n\nexport function renameWorksheetTransition(newName: string): Transition {\n    return state => produce(state, draft => {\n        if (draft.worksheet) {\n            draft.worksheet.name = newName || 'Unnamed worksheet'; // Speculative\n            draft.dirtyWorksheet = draft.worksheet;\n        }\n    });\n}\n\nexport function editRootCardTransition(rootCard: WorksheetRootCard, immediate?: boolean): Transition {\n    return state => produce(state, draft => {\n        if (!draft.worksheet) {\n            return;\n        }\n        draft.dirtyWorksheet = { ...draft.worksheet, rootCard };\n        if (immediate) {\n            draft.worksheet = draft.dirtyWorksheet;\n        }\n    });\n}\n\nexport function swapCardsTransition(previousIndex: number, currentIndex: number): Transition {\n    return state => produce(state, draft => {\n        if (!draft.worksheet) {\n            return;\n        }\n        // move it immediatly to keep GUI reactive even for big sheets\n        moveItemInArray(draft.worksheet.rootCard.cards, previousIndex, currentIndex);\n        // save the worksheet - as card ids are preserved, we should only save, not recompute\n        draft.dirtyWorksheet = {...draft.worksheet};\n    });\n}\n\nexport function swapColumnsTransition(cardId: string, previousIndex: number, currentIndex: number): Transition {\n    return state => produce(state, draft => {\n        if (!draft.worksheet) {\n            return;\n        }\n        // move it immediatly to keep GUI reactive even for big sheets\n        const draftCard = draft.worksheet.rootCard.cards.find(e => e.id === cardId) as AbstractHeaderCard;\n        moveItemInArray(draftCard.cards, previousIndex, currentIndex);\n        moveItemInArray(draftCard.xColumns, previousIndex, currentIndex);\n\n        const draftResults = draft.results[cardId].cardResult;\n        if (AbstractHeaderCard.isAbstractHeaderCardResult(draftResults)) {\n            moveItemInArray(draftResults.results, previousIndex, currentIndex);\n        } else if (GroupedCompiledCardWrapper.isGroupedCardResult(draftResults)) {\n            for (const c of draftResults.results) {\n                if (AbstractHeaderCard.isAbstractHeaderCardResult(c)) {\n                    moveItemInArray(c.results, previousIndex, currentIndex);\n                }\n            }\n        }\n        // save the worksheet - as card ids are preserved, we should only save, not recompute\n        draft.dirtyWorksheet = {...draft.worksheet};\n    });\n}\n\nexport function addTopLevelCardTransition(card: Card): Transition {\n    return state => produce(state, draft => {\n        if (!draft.worksheet) {\n            return;\n        }\n        draft.dirtyWorksheet = produce(draft.worksheet, worksheetDraft => {\n            worksheetDraft.rootCard!.cards.push(card);\n        });\n        draft.requestedCardIds.push(card.id);\n        draft.focusedCardId = card.id;\n    });\n}\n\nexport function editDataSpecTransition(dataSpec: DataSpec): Transition {\n    return state => produce(state, draft => {\n        if (!draft.worksheet) {\n            return;\n        }\n        draft.dirtyWorksheet = { ...draft.worksheet, dataSpec };\n        draft.dataset = undefined;\n        draft.sample = undefined;\n    });\n}\n\nexport function requestSample(): Transition {\n    return state => ({...state, sampleExternallyRequested: true });\n}\n\nexport function datasetLoaded(dataset: SerializedDataset): Transition {\n    return state => produce(state, draft => {\n        if (!draft.worksheet) {\n            return;\n        }\n        const receivedDatasetLoc: AnyLoc = { projectKey: dataset.projectKey, id: dataset.name };\n        const expectedDatasetLoc: AnyLoc = resolveSmartName(\n            draft.worksheet.projectKey,\n            draft.worksheet.dataSpec.inputDatasetSmartName\n        );\n        if (!deepEqual(receivedDatasetLoc, expectedDatasetLoc)) {\n            return;\n        }\n        draft.dataset = dataset;\n    });\n}\n\nexport function loadWorksheetTransition(projectKey: string, id: string): Transition {\n    return () => ({ ...INITIAL_STATE, worksheetLoc: { projectKey, id } });\n}\n","import { Sample, WorksheetRootCard, CardResult } from 'src/generated-sources';\nimport { of, combineLatest, EMPTY, race, merge, from } from 'rxjs';\nimport { map, switchMap, catchError, pairwise, filter, distinctUntilChanged, skip, takeUntil, withLatestFrom, debounceTime, tap } from 'rxjs/operators';\nimport deepEqual from 'fast-deep-equal';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { deepDistinctUntilChanged, auditMap, combineLatestObject } from 'dku-frontend-core';\nimport { getWorksheetObjectRef } from '../utils';\nimport { WaitingService } from '@core/overlays/waiting.service';\nimport { CollapsingService, CollapsibleTopLevelCard } from '../collapsing.service';\nimport { worksheetSavedTransition, setErrorTransition, sampleLoadedTransition, worksheetInitialLoadTransition, requestCardTransition, resultsReceivedTransition, datasetLoaded } from './transitions';\nimport { Process, StateSelectors } from './state';\nimport { ComputeService } from '../compute.service';\nimport { WT1Service } from '@core/dataiku-wt1/wt1.service';\nimport { getWorksheetStats } from '../card-utils';\n\n// Background processes\nexport class Processes {\n    constructor(\n        private DataikuAPI: DataikuAPIService,\n        private waitingService: WaitingService,\n        private collapsingService: CollapsingService,\n        private selectors: StateSelectors,\n        private computeService: ComputeService,\n        private wt1Service: WT1Service\n    ) { }\n\n    getAllProcesses() {\n        return merge(\n            this.worksheetComputer(),\n            this.worksheetLoader(),\n            this.sampleLoader(),\n            this.worksheetSaver(),\n            this.collapsingWatcher(),\n            this.datasetLoader()\n        );\n    }\n\n    worksheetSaver = (): Process => {\n        return combineLatest([\n            this.selectors.state$.pipe(\n                map(state => state.dirtyWorksheet),\n                distinctUntilChanged()\n            ),\n            this.selectors.getWorksheet().pipe(distinctUntilChanged())\n        ]).pipe(\n            filter(([dirtyWorksheet]) => !!dirtyWorksheet),\n            switchMap(([dirtyWorksheet, currentWorksheet]) => {\n                if (!dirtyWorksheet) {\n                    return EMPTY;\n                }\n\n                return this.DataikuAPI.statistics.save(dirtyWorksheet!).pipe(\n                    tap(savedWorksheet => {\n                        this.wt1Service.event('save-worksheet', getWorksheetStats(savedWorksheet));\n                    }),\n                    map(savedWorksheet => worksheetSavedTransition(savedWorksheet)),\n                    catchError((err) => of(setErrorTransition(err)))\n                );\n            })\n        );\n    }\n\n    worksheetComputer = (): Process => {\n        const computeTrigger$ = combineLatest([\n            this.selectors.getCardsToCompute(),\n            this.selectors.getLoc(),\n            this.selectors.getSample()\n        ]).pipe(deepDistinctUntilChanged(), debounceTime(100));\n\n        const dataSpecChanged$ = this.selectors.getDataSpec().pipe(skip(1));\n        const worksheetLocChanged$ = this.selectors.getWorksheetLoc().pipe(skip(1));\n        const abortCondition$ = race(dataSpecChanged$, worksheetLocChanged$);\n\n        return computeTrigger$.pipe(\n            auditMap(([cards, loc, sample]) => {\n                if (!loc || !sample || cards.length === 0) {\n                    return EMPTY;\n                }\n                const fakeRootCard: WorksheetRootCard = {\n                    type: 'worksheet_root',\n                    cards,\n                    // This is a fake container card (backend can't compute Card[])\n                    confidenceLevel: 1,\n                    id: 'abc',\n                    showConfidenceInterval: true\n                };\n\n                return this.computeService.computeCard(fakeRootCard, sample.id, true).pipe(\n                    map(resp => {\n                        const rootCardResult = resp as WorksheetRootCard.WorksheetRootCardResult;\n                        return resultsReceivedTransition(rootCardResult.results.map((result, index) => ({\n                            cardParams: fakeRootCard.cards[index],\n                            cardResult: result,\n                            sampleId: sample.id\n                        })));\n                    }),\n                    catchError(err => {\n                        // Display error within cards\n                        const failedResults = cards.map(card => ({\n                            cardParams: card,\n                            cardResult: {\n                                type: 'unavailable',\n                                reason: CardResult.UnavailabilityReason.FAILURE,\n                                message: err && err.message ? err.message : 'Unexpected error'\n                            } as CardResult,\n                            sampleId: sample.id\n                        }));\n\n                        const transitions = [resultsReceivedTransition(failedResults)];\n\n                        // Display full error globally (except if failure is caused by user abort)\n                        if (err.errorType !== 'FutureAbort') {\n                            transitions.push(setErrorTransition(err));\n                        }\n                        return from(transitions);\n                    }),\n                    takeUntil(abortCondition$)\n                );\n            })\n        );\n    }\n\n    datasetLoader = (): Process => {\n        return combineLatest([\n            this.selectors.getDatasetLoc(),\n            this.selectors.getDataset().pipe(filter(dataset => !dataset)),\n        ]).pipe(\n            withLatestFrom(this.selectors.getWorksheetLoc()),\n            auditMap(([[datasetLoc, _], worksheetLoc]) => {\n                if (!datasetLoc || !worksheetLoc) {\n                    return EMPTY;\n                }\n\n                return this.DataikuAPI.datasets.get(datasetLoc.projectKey, datasetLoc.id, worksheetLoc.projectKey)\n                    .pipe(\n                        this.waitingService.bindSpinner(),\n                        map(dataset => datasetLoaded(dataset)),\n                        catchError((err) => of(setErrorTransition(err))),\n                    );\n            })\n        );\n    }\n\n    worksheetLoader = (): Process => {\n        return combineLatest([\n            this.selectors.getWorksheetLoc(),\n            this.selectors.getWorksheet()\n        ]).pipe(\n            deepDistinctUntilChanged(),\n            pairwise(),\n            filter(([[prevLoc, prevWorksheet], [newLoc, newWorksheet]]) => {\n                if (!prevLoc && newLoc && !newWorksheet) {\n                    // Worksheet not loaded yet\n                    return true;\n                }\n                if (prevLoc && newLoc && !deepEqual(prevLoc, newLoc)) {\n                    // Worksheet loc has changed\n                    return true;\n                }\n                // TODO: should we handle worksheet unloading (return to initial state?)\n                return false;\n            }),\n            map(([[prevLoc, prevWorksheet], [newLoc, newWorksheet]]) => newLoc!),\n            switchMap(({ projectKey, id }) =>\n                this.DataikuAPI.statistics.get(projectKey, id).pipe(\n                    this.waitingService.bindSpinner(),\n                    map(worksheet => worksheetInitialLoadTransition(worksheet)),\n                    catchError((err) => of(setErrorTransition(err)))\n                )\n            )\n        );\n    }\n\n    collapsingWatcher = (): Process => {\n        return this.selectors.getRootCard().pipe(\n            switchMap(rootCard => {\n                if (rootCard) {\n                    return combineLatest(\n                        rootCard.cards.map(card => {\n                            return this.collapsingService\n                                .watchIsCollapsed(new CollapsibleTopLevelCard(card.id))\n                                .pipe(map(collapsed => ({ id: card.id, collapsed })));\n                        })\n                    ).pipe(\n                        deepDistinctUntilChanged(),\n                        map(states => requestCardTransition(\n                            states\n                                .filter(({ collapsed }) => !collapsed)\n                                .map(({ id }) => id))\n                        )\n                    );\n                }\n                return EMPTY;\n            })\n        );\n    }\n\n    sampleLoader = (): Process => {\n        return combineLatestObject({\n            cardsToCompute: this.selectors.getCardsToCompute(),\n            sample: this.selectors.getSample(),\n            worksheet: this.selectors.getWorksheet(),\n            sampleExternallyRequested: this.selectors.isSampleExternallyRequested()\n        }).pipe(\n            // Only create a sample if needed (when there is a card to compute and no sample)\n            filter(({ cardsToCompute, sample, worksheet, sampleExternallyRequested }) =>\n                !sample && !!worksheet && (cardsToCompute.length > 0 || sampleExternallyRequested)\n            ),\n\n            // Ignore unrelated state changes\n            map(({ worksheet }) => ({\n                dataSpec: worksheet!.dataSpec,\n                sampleKey: getWorksheetObjectRef(worksheet!)\n            })),\n            deepDistinctUntilChanged(),\n\n            // Sample need to be retrieve or rebuild\n            switchMap(({ dataSpec, sampleKey }) => {\n                return this.DataikuAPI.statistics.currentSample(sampleKey, dataSpec)\n                    .pipe(\n                        switchMap(currentSampleResponse => {\n                            // Sample was already built\n                            if (currentSampleResponse) {\n                                return of(sampleLoadedTransition(currentSampleResponse));\n                            }\n\n                            // Otherwise build a new sample\n                            return this.DataikuAPI.statistics.rebuildSample(sampleKey, dataSpec)\n                                .pipe(\n                                    this.waitingService.bindOverlayAndWaitForResult<Sample>(),\n                                    map(newSample => sampleLoadedTransition(newSample))\n                                );\n                        }),\n                        this.waitingService.bindStaticOverlay('Preparing sample...')\n                    ).pipe(catchError((err) => of(setErrorTransition(err))));\n            })\n        );\n    }\n}\n","import { Component, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { MatTabGroup } from '@angular/material/tabs';\nimport { CardResult, Card, Computation, ComputationResult } from 'src/generated-sources';\nimport { copyToClipboard } from '@utils/clipboard';\n\nexport interface DebugData {\n    computation: Computation;\n    params: Card;\n    results: CardResult;\n    computationResults: ComputationResult;\n}\n\n@Component({\n    selector: 'debug-card-modal',\n    templateUrl: './debug-card-modal.component.html',\n    styleUrls: ['./debug-card-modal.component.less']\n})\nexport class DebugCardModalComponent {\n    computationJson: string;\n    resultsJson: string;\n    paramsJson: string;\n    computationResultsJson: string;\n\n    copyString: string;\n\n    @ViewChild('tabs', { static: true}) tabs: MatTabGroup;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) data: DebugData,\n        public dialogRef: MatDialogRef<DebugCardModalComponent>\n    ) {\n        this.computationJson = JSON.stringify(data.computation, null, 4);\n        this.paramsJson = JSON.stringify(data.params, null, 4);\n        this.resultsJson = JSON.stringify(data.results, null, 4);\n        this.computationResultsJson = JSON.stringify(data.computationResults, null, 4);\n\n        this.copyString = this.computationJson;\n    }\n\n    copyToClipboard() {\n        let text: string;\n        switch (this.tabs.selectedIndex) {\n            case 0:\n                text = this.paramsJson;\n                break;\n            case 1:\n                text = this.resultsJson;\n                break;\n            case 2:\n                text = this.computationJson;\n                break;\n            case 3:\n                text = this.computationResultsJson;\n                break;\n            default:\n                throw new Error('Unhandled tab index');\n        }\n        copyToClipboard(text);\n    }\n}\n","export function copyToClipboard(text: string) {\n    const tempInput = document.createElement('textarea');\n    tempInput.style.position = 'absolute';\n    tempInput.style.left = '-1000px';\n    tempInput.style.top = '-1000px';\n    tempInput.value = text;\n    document.body.appendChild(tempInput);\n    try {\n        tempInput.select();\n        document.execCommand('copy');\n    } catch (err) {\n        throw new Error(`Unable to copy to clipboard ${err}`);\n    } finally {\n        document.body.removeChild(tempInput);\n    }\n}\n","<div class=\"modal\">\n    <modal-header\n        [title]=\"'View JSON'\"\n        [hasBorder]=\"false\"\n    ></modal-header>\n    <div class=\"modal-body modal-body--tabs fixed-height500 flex\">\n        <mat-tab-group #tabs>\n            <mat-tab label=\"Card params\">\n                <pre class=\"result-box\">{{ paramsJson }}</pre>\n            </mat-tab>\n            <mat-tab label=\"Card results\">\n                <pre class=\"result-box\">{{ resultsJson }}</pre>\n            </mat-tab>\n            <mat-tab label=\"Computation\">\n                <pre class=\"result-box\">{{ computationJson }}</pre>\n            </mat-tab>\n            <mat-tab label=\"Computation results\">\n                <pre  class=\"result-box\" matTooltip=\"Retrieved from computation cache\">{{ computationResultsJson }}</pre>\n            </mat-tab>\n        </mat-tab-group>\n    </div>\n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\">\n            <button type=\"button\"\n                mat-raised-button\n                (click)=\"copyToClipboard()\"\n                class=\"btn btn--text btn--secondary\">\n                Copy to clipboard\n            </button>\n            <button\n                type=\"button\"\n                (click)=\"dialogRef.close()\"\n                class=\"btn btn--text btn--secondary\"\n                tabindex=\"-1\"\n            >\n                Close\n            </button>\n        </div>\n    </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Card, CardResult } from 'src/generated-sources';\nimport { Observable, of, concat } from 'rxjs';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { WaitingService } from '@core/overlays/waiting.service';\nimport { switchMap } from 'rxjs/operators';\nimport { isFullyComputed } from './card-utils';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ComputeService {\n    constructor(\n        private DataikuAPI: DataikuAPIService,\n        private waitingService: WaitingService\n    ) { }\n\n    // Compute a card and return up to two CardResults\n    // 1- First from the backend cache (fast but maybe incomplete)\n    // 2- From Python if (1) was incomplete (slow)\n    //\n    // Note that only (2) is returned if 'useCache' is set to false\n    computeCard(card: Card, sampleId: string, useCache: boolean): Observable<CardResult> {\n        return this.DataikuAPI.statistics.computeResults(card, useCache, sampleId)\n            .pipe(\n                this.waitingService.bindOverlayAndWaitForResult(),\n                switchMap(cardResult => {\n                    if (isFullyComputed(cardResult)) {\n                        return of(cardResult);\n                    }\n                    return concat(\n                        of(cardResult),\n                        this.DataikuAPI.statistics.computeResults(card, false, sampleId).pipe(\n                            this.waitingService.bindOverlayAndWaitForResult()\n                        )\n                    );\n                }),\n                this.waitingService.bindStaticOverlay()\n            );\n    }\n}\n","import { Injectable, OnDestroy, Inject } from '@angular/core';\nimport { Card, WorksheetRootCard, DataSpec, Insight, CardResult, ComputationResult } from 'src/generated-sources';\nimport { BehaviorSubject, Observable, merge, Subject, combineLatest, EMPTY } from 'rxjs';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { withLatestFrom, first, switchMap } from 'rxjs/operators';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { WaitingService } from '@core/overlays/waiting.service';\nimport { CollapsingService } from '../collapsing.service';\nimport { Transition, INITIAL_STATE } from './state';\nimport { Processes } from './processes';\nimport { StateSelectors } from './state';\nimport {\n    editRootCardTransition, addTopLevelCardTransition, editDataSpecTransition,\n    resetFocusedCardTransition, loadWorksheetTransition, setErrorTransition, requestSample,\n    renameWorksheetTransition, swapCardsTransition, swapColumnsTransition as swapHeaderCardColumnsTransition\n} from './transitions';\nimport { IScope } from 'angular';\nimport { catchAPIError, ErrorContext, APIError } from '@core/dataiku-api/api-error';\nimport { DebugData, DebugCardModalComponent } from '../worksheet/debug-card-modal/debug-card-modal.component';\nimport { ModalsService, ModalShape } from '@shared/modals/modals.service';\nimport { ComputeService } from '@features/eda/compute.service';\nimport { SampleContextService } from '@features/eda/sample-context.service';\nimport { WT1Service } from '@core/dataiku-wt1/wt1.service';\nimport { DEFAULT_TAGGABLE_OBJECT_FIELDS } from '@utils/dss-defaults';\nimport { FutureWatcherService } from 'dku-frontend-core';\n\n\n@UntilDestroy()\n@Injectable()\nexport class WorksheetContextService extends SampleContextService implements OnDestroy, ErrorContext {\n    // Worksheet state\n    private state$ = new BehaviorSubject(INITIAL_STATE);\n\n    // Mutations triggered by user actions\n    private transitions$ = new Subject<Transition>();\n\n    // Convenient state selectors\n    private selectors = new StateSelectors(this.state$);\n\n    // Expose a few selectors publicly\n    public getError = this.selectors.getError.bind(this.selectors);\n    public getWorksheet = this.selectors.getWorksheet.bind(this.selectors);\n    public getRootCard = this.selectors.getRootCard.bind(this.selectors);\n    public getSample = this.selectors.getSample.bind(this.selectors);\n    public getDataSpec = this.selectors.getDataSpec.bind(this.selectors);\n    public getRootCardResults = this.selectors.getRootCardResults.bind(this.selectors);\n    public getFocusedCardId = this.selectors.getFocusedCardId.bind(this.selectors);\n    public availableVariables = this.selectors.availableVariables.bind(this.selectors);\n\n    // Actions on the worksheet\n    resetFocusedCardTransition() {\n        this.transitions$.next(resetFocusedCardTransition());\n    }\n\n    editRootCard(rootCard: WorksheetRootCard, immediate?: boolean) {\n        this.transitions$.next(editRootCardTransition(rootCard, immediate));\n    }\n\n    swapCards(previousIndex: number, currentIndex: number) {\n        this.transitions$.next(swapCardsTransition(previousIndex, currentIndex));\n    }\n\n    swapHeaderCardColumns(cardId: string, previousIndex: number, currentIndex: number) {\n        this.transitions$.next(swapHeaderCardColumnsTransition(cardId, previousIndex, currentIndex));\n    }\n\n    forceLoadSample() {\n        this.transitions$.next(requestSample());\n    }\n\n    addTopLevelCard(card: Card) {\n        this.transitions$.next(addTopLevelCardTransition(card));\n    }\n\n    editDataSpec(dataSpec: DataSpec) {\n        this.transitions$.next(editDataSpecTransition(dataSpec));\n    }\n\n    loadWorksheet(projectKey: string, id: string) {\n        this.transitions$.next(loadWorksheetTransition(projectKey, id));\n    }\n\n    editWorksheetName(newName: string) {\n        this.transitions$.next(renameWorksheetTransition(newName));\n    }\n\n    pushError(error?: APIError) {\n        this.transitions$.next(setErrorTransition(error));\n    }\n\n    // Actions outside the worksheet\n    getComputationResults(card: Card): Observable<ComputationResult> {\n        return combineLatest([\n            this.selectors.getSample(),\n            this.selectors.getDataSpec(),\n            this.selectors.getWorksheet()\n        ]).pipe(\n            first(),\n            switchMap(([sample, dataSpec, worksheet]) => {\n                if (sample && dataSpec && worksheet) {\n                    return this.DataikuAPI.statistics\n                        .getComputationResults(card, sample.id);\n                }\n                return EMPTY;\n            }),\n            catchAPIError(this)\n        );\n    }\n\n    debugCard(card: Card) {\n        combineLatest([\n            this.computeCard(card),\n            this.computePlan(card),\n            this.getComputationResults(card)\n        ]).pipe(first(), untilDestroyed(this))\n            .subscribe(([results, computation, computationResults]) => {\n                const debugData: DebugData = { params: card, results: results!, computation, computationResults };\n                this.modalsService\n                    .open(DebugCardModalComponent, debugData, ModalShape.NARROW).catch(() => { });\n            });\n    }\n\n    computeCard(card: Card): Observable<CardResult | undefined> {\n        return combineLatest([\n            this.selectors.getWorksheet(),\n            this.selectors.getSample()\n        ]).pipe(\n            first(),\n            switchMap(([worksheet, sample]) =>\n                worksheet && sample ? this.computeService.computeCard(card, sample.id, false)\n                    .pipe(catchAPIError(this)) : EMPTY\n            )\n        );\n    }\n\n    computePlan(card: Card) {\n        return this.DataikuAPI.statistics.getComputationPlan(card).pipe(catchAPIError(this));\n    }\n\n    // Startup\n    constructor(\n        DataikuAPI: DataikuAPIService,\n        futureWatcherService: FutureWatcherService,\n        waitingService: WaitingService,\n        collapsingService: CollapsingService,\n        wt1Service: WT1Service,\n        private modalsService: ModalsService,\n        private computeService: ComputeService,\n        @Inject('CreateModalFromTemplate') private createOldModal: any,\n        @Inject('$rootScope') private $rootScope: IScope,\n    ) {\n        super(DataikuAPI, futureWatcherService);\n\n        const backgroundProcesses = new Processes(DataikuAPI, waitingService,\n            collapsingService, this.selectors, computeService, wt1Service);\n\n        merge(backgroundProcesses.getAllProcesses(), this.transitions$).pipe(\n            withLatestFrom(this.state$),\n            untilDestroyed(this)\n        ).subscribe(([reducer, state]) => {\n            const newState = reducer(state);\n            this.state$.next(newState);\n        });\n    }\n\n    createInsight(card: Card, name: string): void {\n        combineLatest([\n            this.getDataSpec(),\n            this.getWorksheet(),\n            this.computeCard(card)\n        ]).pipe(first(), catchAPIError(this))\n            .subscribe(([dataSpec, worksheet, cardResult]) => {\n                if (!dataSpec || !worksheet || !cardResult) {\n                    return;\n                }\n\n                const insight: Insight = {\n                    ...DEFAULT_TAGGABLE_OBJECT_FIELDS,\n                    params: { card, dataSpec },\n                    dashboardCreationId: 'will-be-replaced-by-modal',\n                    listed: true,\n                    name,\n                    projectKey: worksheet.projectKey,\n                    type: 'eda',\n                };\n                return this.createOldModal('/templates/dashboards/insights/create-and-pin-insight-modal.html',\n                    this.$rootScope, 'CreateAndPinInsightModalController', (newScope: any) => {\n                        newScope.init(insight, null, JSON.stringify(cardResult!));\n                        // An exception is raised when the user clicks cancel. Let's silently ignore it\n                    }).catch(() => { });\n            });\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<ng-container *ngIf=\"datasetStatus$ | async as status\">\n    <div [ngSwitch]=\"status\" *ngIf=\"datasetFullInfo$ | async as datasetFullInfo\" class=\"dataset-error\">\n        <div *ngSwitchCase=\"DatasetStatus.BEING_BUILT\">\n            <h4 class=\"dataset-error__header\">\n                <p>This dataset is being built.</p>\n                <a class=\"btn btn--secondary btn--large\"\n                (click)=\"goToJob(datasetFullInfo.currentBuildState.beingBuilt[0].jobId)\" ng-if=\"datasetFullInfo.directAccessOnOriginal\">See job</a>\n            </h4>\n        </div>\n        \n        <div *ngSwitchCase=\"DatasetStatus.ABOUT_TO_BE_BUILT\">\n            <h4 class=\"dataset-error__header\">\n                <p>This dataset is about to be built.</p>\n                <a class=\"btn btn--secondary btn--large\" ui-sref=\"goToJob(datasetFullInfo.currentBuildState.aboutToBeBuilt[0].jobId)\" ng-if=\"datasetFullInfo.directAccessOnOriginal\">See job</a>\n            </h4>\n        </div>\n        \n        <div *ngSwitchCase=\"DatasetStatus.EMPTY_BUILD\">\n            <h4 class=\"dataset-error__header\">\n                <p>This dataset is empty. You should build it.</p>\n                <a class=\"btn btn--success btn--large\" (click)=\"buildOpenDataset(datasetFullInfo.dataset.projectKey, datasetFullInfo.dataset.name)\"> <i class=\"icon-play\"></i>&nbsp;Build</a>\n            </h4>\n        </div>\n        \n        <div *ngSwitchCase=\"DatasetStatus.FAILED_BUILD\">\n            <h4 class=\"dataset-error__header\">\n                <p>Build this dataset</p>\n                <a class=\"btn btn--success btn--large\" (click)=\"buildOpenDataset(datasetFullInfo.dataset.projectKey, datasetFullInfo.dataset.smartName)\"> <i class=\"icon-play\"></i>&nbsp;Build</a>\n            </h4>\n        </div>\n    </div>\n</ng-container>","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter, Inject, OnDestroy } from '@angular/core';\nimport { ObservableInput } from 'observable-input';\nimport { Observable, combineLatest } from 'rxjs';\nimport { APIError, EnhancedSerializedError } from '@core/dataiku-api/api-error';\nimport { InfoMessage } from 'dku-frontend-core';\nimport { NavigatorService } from 'src/generated-sources';\nimport { map } from 'rxjs/operators';\nimport { IScope } from 'angular';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\nenum DatasetStatus {\n    NONE = 'NONE',\n    BEING_BUILT = 'BEING_BUILT',\n    ABOUT_TO_BE_BUILT = 'ABOUT_TO_BE_BUILT',\n    EMPTY_BUILD = 'EMPTY_BUILD',\n    FAILED_BUILD = 'FAILED_BUILD'\n}\n\n@UntilDestroy()\n@Component({\n    selector: 'dataset-error-cta',\n    templateUrl: './dataset-error-cta.component.html',\n    styleUrls: ['./dataset-error-cta.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatasetErrorCtaComponent {\n    @Input('apiError') @ObservableInput() apiError$: Observable<APIError | null>;\n    @Input('datasetFullInfo') @ObservableInput() datasetFullInfo$: Observable<NavigatorService.DatasetFullInfo>;\n\n    DatasetStatus = DatasetStatus;\n    datasetStatus$: Observable<DatasetStatus>;\n\n    constructor(\n        private DataikuAPI: DataikuAPIService,\n        @Inject('CreateModalFromTemplate') private createOldModal: any,\n        @Inject('$rootScope') private $rootScope: IScope,\n        @Inject('$state') private $state: any\n    ) {\n        /*\n            This is essentially a port of the AngularJS datasetErrorCta service\n            (datasets/directives.js).\n\n            AngularJS Template: templates/datasets/fragments/dataset-error-cta.html\n        */\n        this.datasetStatus$ = combineLatest([this.apiError$, this.datasetFullInfo$])\n            .pipe(map(([apiError, info]) => {\n                const managed = !!info?.dataset?.managed;\n                const beingBuilt = !!info?.currentBuildState?.beingBuilt?.length;\n                const aboutToBeBuilt = !!info?.currentBuildState?.aboutToBeBuilt?.length;\n                const neverBuiltBuildable = !!info?.buildable && info?.lastBuild === undefined;\n                const buildable = !!info?.buildable;\n                const isNotUnauthorized = apiError?.errorType !== 'com.dataiku.dip.exceptions.UnauthorizedException';\n                const requiresDatasetBuild = [\n                  InfoMessage.FixabilityCategory.USER_CONFIG_DATASET,\n                  InfoMessage.FixabilityCategory.USER_CONFIG_OR_BUILD\n                ].includes((apiError as EnhancedSerializedError)?.fixability);\n                let status = DatasetStatus.NONE;\n\n                if (apiError && !this.ignoreError(apiError)) {\n                    if (beingBuilt && isNotUnauthorized) {\n                        status = DatasetStatus.BEING_BUILT;\n                    } else if (aboutToBeBuilt && isNotUnauthorized) {\n                        status = DatasetStatus.ABOUT_TO_BE_BUILT;\n                    } else if (!beingBuilt && !aboutToBeBuilt && managed) {\n                        if (neverBuiltBuildable) {\n                            status = DatasetStatus.EMPTY_BUILD;\n                        } else if (buildable && requiresDatasetBuild) {\n                            status = DatasetStatus.FAILED_BUILD;\n                        }\n                    }\n                }\n \n                return status;\n            }));\n    }\n\n    buildOpenDataset(projectKey: string, datasetName: string) {\n        this.DataikuAPI.datasets.get(projectKey, datasetName, projectKey)\n            .pipe(untilDestroyed(this))\n            .subscribe((dataset) => {\n                this.createOldModal('/templates/datasets/build-dataset-modal.html',\n                this.$rootScope, 'BuildDatasetController', (newScope: any) => {\n                    newScope.jobStartRedirects = true;\n                    newScope.dataset = dataset;\n                }, 'build-dataset-modal').catch(() => { });\n        });\n    }\n\n    goToJob(jobId: string) {\n        this.$state.go('projects.project.jobs.job', {\n            jobId\n        }, { location: 'replace' })\n    }\n\n    ignoreError(apiError: APIError | null) {\n        const ignorableErrorTypes = ['FutureAbort'];\n        return apiError && ignorableErrorTypes.indexOf(apiError.errorType) >= 0;\n    }\n}\n","import {\n    Directive,\n    Input,\n    Output,\n    HostListener,\n    EventEmitter,\n    EmbeddedViewRef,\n    ViewContainerRef,\n    OnDestroy,\n    OnInit,\n    ElementRef\n} from '@angular/core';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DkuPopoverComponent } from './dku-popover/dku-popover.component';\nimport { Overlay, OverlayRef, OverlayConfig, ConnectedPosition } from '@angular/cdk/overlay';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Directive({\n    selector: '[dkuPopoverTrigger]'\n})\nexport class DkuPopoverTriggerDirective implements OnInit, OnDestroy {\n    @Input('dkuPopoverTrigger') public dkuPopover: DkuPopoverComponent;\n    @Input() public anchor: any;\n    @Output() public hide: EventEmitter<any> = new EventEmitter<any>();\n\n    private opened = false;\n    private templatePortal: TemplatePortal;\n    private viewRef: EmbeddedViewRef<any>;\n    private overlayRef: OverlayRef;\n    private preventCloseList = ['.bootstrap-select'];\n\n    constructor(\n        private elementRef: ElementRef,\n        private viewContainerRef: ViewContainerRef,\n        private overlay: Overlay\n    ) {\n    }\n\n    @HostListener('click', ['$event'])\n    onClick() {\n        if (this.opened) {\n            this.hidePopup();\n        } else {\n            this.showPopup();\n        }\n    }\n\n    ngOnInit() {\n        // If no anchor is specified as input, we set the current element as a default anchor\n        if (!this.anchor) {\n            this.anchor = this.elementRef.nativeElement;\n        }\n\n        this.preventCloseList.push('.' + this.dkuPopover.className);\n\n        // Create a template portal\n        this.templatePortal = new TemplatePortal(\n            this.dkuPopover.popupTemplate,\n            this.viewContainerRef\n        );\n\n        // if the popover was closed from within the dku popover,\n        // the trigger directive needs to be notified in order\n        // to properly dispose of the overlay.\n        this.dkuPopover.notifyTrigger$.pipe(\n            untilDestroyed(this)\n        ).subscribe((hide) => {\n            if (hide) {\n                this.hidePopup();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.opened) {\n            this.hidePopup();\n            // element stays on page during navigation...\n            const popups = document.querySelectorAll('.' + this.dkuPopover.className);\n            if (popups && popups.length) {\n                popups.forEach(_ => _.remove());\n            }\n        }\n    }\n\n    showPopup() {\n        const positions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' }\n        ] as ConnectedPosition[];\n\n        const config = new OverlayConfig({\n            hasBackdrop: true,\n            backdropClass: 'cdk-overlay-transparent-backdrop',\n            positionStrategy: this.overlay.position()\n                .flexibleConnectedTo(this.elementRef)\n                .withPositions(positions)\n        });\n\n        this.overlayRef = this.overlay.create(config);\n        this.viewRef = this.overlayRef.attach(this.templatePortal);\n\n        this.overlayRef.backdropClick().subscribe(() => {\n            this.hidePopup();\n        });\n\n        this.dkuPopover.show();\n        this.opened = true;\n    }\n\n    hidePopup() {\n        this.overlayRef.dispose();\n        this.dkuPopover.hide(false);\n        this.opened = false;\n        this.hide.emit();\n    }\n}\n","<ng-template #popupTemplate>\n    <div [ngClass]=\"className\">\n        <ng-container *ngIf=\"!hidden\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</ng-template>\n","import { Component, ViewChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'dku-popover',\n    templateUrl: './dku-popover.component.html',\n    styleUrls: ['./dku-popover.component.less']\n})\nexport class DkuPopoverComponent implements OnDestroy {\n    @ViewChild('popupTemplate', {static: true})\n    public popupTemplate: TemplateRef<any>;\n    public hidden = false;\n\n    private notifyTriggerSource = new BehaviorSubject<boolean>(false);\n    public notifyTrigger$ = this.notifyTriggerSource.asObservable();\n\n    public className = 'dku-popover';\n\n    show() {\n        this.hidden = false;\n    }\n\n    hide(closedWithinPopover = true) {\n        this.hidden = true;\n\n        if (closedWithinPopover) {\n            this.notifyTriggerSource.next(true);\n        }\n    }\n\n    ngOnDestroy() {\n        this.hidden = false;\n    }\n}\n","import { Directive, Input, Injector, ElementRef } from \"@angular/core\";\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { StreamableDatasetSelection } from 'src/generated-sources';\nimport { fairAny } from 'dku-frontend-core';\n\n@Directive({\n    selector: 'angularjs-dataset-selection-ordering'\n})\nexport class AngularjsDatasetSelectionOrderingDirective extends UpgradeComponent {\n    @Input() selection: StreamableDatasetSelection;\n    @Input() datasetSupportsReadOrdering: fairAny;\n    @Input() shakerState: fairAny;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('ng1DatasetSelectionOrderingDirective', elementRef, injector);\n    }\n}","import { OnInit, Component, Input, Inject } from '@angular/core';\nimport { fairAny } from 'dku-frontend-core';\nimport { StreamableDatasetSelection } from 'src/generated-sources';\n\n@Component({\n    selector: 'dataset-selection-ordering-fields',\n    template: `<angularjs-dataset-selection-ordering [selection]=\"selection\" [datasetSupportsReadOrdering]=\"boundDatasetSupportsReadOrdering\"\n    [shakerState]=\"shakerState\" ></angularjs-dataset-selection-ordering>`\n})\nexport class DatasetSelectionOrderingFieldsComponent{\n    @Input() selection: StreamableDatasetSelection;\n    @Input() datasetFullInfo: fairAny;\n\n    boundDatasetSupportsReadOrdering: Function;\n\n    shakerState: {\n        withSteps: true;\n    };\n\n    constructor(@Inject('DatasetUtils') private DatasetUtils: fairAny) {\n        this.boundDatasetSupportsReadOrdering = this.datasetSupportsReadOrdering.bind(this);\n    }\n\n    datasetSupportsReadOrdering(): boolean {\n        return this.datasetFullInfo && this.DatasetUtils.supportsReadOrdering(this.datasetFullInfo.dataset);\n    };\n\n}","import { Directive, Renderer2, ElementRef, HostListener, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n    selector: '[commaSeparatedView]',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CommaSeparatedViewDirective),\n        multi: true\n    }]\n})\nexport class CommaSeparatedViewDirective implements ControlValueAccessor {\n    onChange: any = () => {};\n    onTouch: any = () => {};\n\n    constructor(private renderer: Renderer2,\n        private element: ElementRef) {\n    }\n    @HostListener('input', ['$event.target.value'])\n    input(value: string) {\n        this.onChange(value.split(',').filter(Boolean));\n    }\n    writeValue(value: any): void {\n        const element = this.element.nativeElement;\n        this.renderer.setProperty(element, 'value', value?value.join(','):'');\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n}\n","import { Directive, Renderer2, ElementRef, HostListener, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n    selector: '[forceInteger]',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => ForceIntegerDirective),\n        multi: true\n    }]\n})\nexport class ForceIntegerDirective implements ControlValueAccessor {\n    onChange: any = () => {};\n    onTouch: any = () => {};\n\n    constructor(private renderer: Renderer2,\n        private element: ElementRef) {\n    }\n    @HostListener('input', ['$event.target.value'])\n    input(value: string | null) {\n        this.onChange(parseInt(value || '0', 10));\n    }\n    writeValue(value: string): void {\n        const element = this.element.nativeElement;\n        this.renderer.setProperty(element, 'value', value);\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n}\n","<form\n[formGroup]=\"form\"\n>\n\n<fieldset class=\"control-group\">\n    <label for=\"\" class=\"control-label\">Use partitions</label>\n    <div class=\"controls\">\n        <dku-bs-select-form-control\n            formControlName=\"partitionSelectionMethod\"\n            ngOptions=\"v.key as v.value for v in list\"\n            [list]=\"preparedPartitionSelectionMethods\"\n            [optionsDescriptions]=\"SamplingData.partitionSelectionMethodsDesc\"\n            [layout]=\"'list'\"\n        >\n        </dku-bs-select-form-control>\n    </div>\n</fieldset>\n<fieldset *ngIf=\"form.value.partitionSelectionMethod == 'SELECTED'\" class=\"control-group\">\n    <span class=\"control-label\">Partitions</span>\n    <div class=\"controls\">\n        <span *ngIf=\"partitionsList == null || partitionsList!.length == 0\">\n            <input type=\"text\" formControlName=\"selectedPartitions\" commaSeparatedView style=\"display:inline-block; width: 176px\"/>\n            <button *ngIf=\"partitionsList === null\" class=\"btn btn--secondary\" (click)=\"loadPartitionsList()\">\n                <i class=\"icon-list\" style=\"cursor:pointer\" toggle=\"tooltip\" title=\"Retrieve list\" data-placement=\"bottom\"></i>\n            </button>\n        </span>\n        <span class=\"help-inline\" *ngIf=\"partitionsList == null || partitionsList!.length == 0\">Comma-separated list</span>\n        <span class=\"help-inline\" *ngIf=\"partitionsList != null && partitionsList!.length == 0\">(No partition built)</span>\n\n        <span *ngIf=\"partitionsList != null && partitionsList!.length > 0 \">\n            <dku-bs-select-form-control formControlName=\"selectedPartitions\" ngOptions=\"part for part in list\"\n                [list]=\"partitionsList\" dataActionsBox=\"true\" dataLiveSearch=\"true\" dkuMultiple=\"multiple\"\n                [layout]=\"'list'\"\n            >\n            </dku-bs-select-form-control>\n        </span>\n    </div>\n</fieldset>\n<fieldset *ngIf=\"form.value.partitionSelectionMethod == 'LATEST_N'\" class=\"control-group\">\n    <label class=\"control-label\">Nb. partitions</label>\n    <div class=\"controls\">\n        <input type=\"number\" forceInteger min=\"1\" max=\"100000000\" formControlName=\"latestPartitionsN\"/>\n    </div>\n</fieldset>\n\n</form>","import { resolveSmartName } from '@features/eda/utils';\nimport { Component, Input, Inject, OnInit, EventEmitter, Output, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ChangeDetectionStrategy } from '@angular/core';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { fairAny, isNumeric } from 'dku-frontend-core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { DatasetSelection } from 'src/generated-sources';\n\n@Component({\n    selector: 'partition-selection',\n    templateUrl: './partition-selection.component.html',\n    styleUrls: ['./partition-selection.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PartitionSelectionComponent implements OnInit, OnChanges {\n    @Input() partitionSelectionMethod: DatasetSelection.PartitionSelectionMethod | null;\n    @Input() selectedPartitions: string[] | null;\n    @Input() latestPartitionsN: number | null;\n    @Input() projectKey: string;\n    @Input() datasetSmartName: string;\n    @Output() partitionSelectionMethodChange = new EventEmitter<DatasetSelection.PartitionSelectionMethod | null>();\n    @Output() selectedPartitionsChange = new EventEmitter<string[] | null>();\n    @Output() latestPartitionsNChange = new EventEmitter<number | null>();\n\n    form = this.formBuilder.group({\n        partitionSelectionMethod: new FormControl(undefined, [Validators.required]),\n        selectedPartitions: new FormControl(undefined, [Validators.required]),\n        latestPartitionsN: new FormControl(undefined, [Validators.required])\n    });\n\n\n    partitionsList: any[] | null = null;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dataikuAPIService: DataikuAPIService,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Inject('SamplingData') public SamplingData: fairAny) {\n    }\n\n    ngOnInit(): void {\n        this.form.get('partitionSelectionMethod')!.valueChanges.subscribe(\n            value => this.partitionSelectionMethodChange.emit(value)\n        );\n\n        this.form.get('selectedPartitions')!.valueChanges.subscribe(\n            value => {\n                this.selectedPartitionsChange.emit((typeof value === \"string\") ? [value] : value);\n            }\n        );\n\n        this.form.get('latestPartitionsN')!.valueChanges.subscribe(\n            value => this.latestPartitionsNChange.emit(value)\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.form.patchValue({\n            partitionSelectionMethod: this.partitionSelectionMethod,\n            selectedPartitions: this.selectedPartitions,\n            latestPartitionsN: this.latestPartitionsN\n        });\n    }\n\n    loadPartitionsList(): void {\n        const nameInfo = resolveSmartName(this.projectKey, this.datasetSmartName);\n        this.dataikuAPIService.datasets.listPartitionsWithName(\n            nameInfo.projectKey,\n            nameInfo.id)\n            .subscribe(\n                (response: any) => {\n                    this.partitionsList = response.sort((a: any, b: any) => {\n                        if (isNumeric(a) && isNumeric(b)) {\n                            return (b as number) - (a as number);\n                        } else {\n                            return a === b ? 0 : (a < b ? 1 : -1);\n                        }\n                    });\n                    this.changeDetectorRef.detectChanges();\n                });\n    }\n\n    get preparedPartitionSelectionMethods(): any[] {\n        const ret: any[] = [];\n        for (const x of this.SamplingData.partitionSelectionMethods) {\n            ret.push({\n                key: x[0],\n                value: x[1]\n            });\n        }\n        return ret;\n    }\n}\n","import { Pipe, PipeTransform, Inject } from '@angular/core';\nimport { FilterDesc } from 'src/generated-sources';\nimport { encodeHTML } from 'entities';\nimport { fairAny } from 'dku-frontend-core';\n\n\n@Pipe({\n    name: 'filterNiceRepr',\n    pure: true\n})\nexport class FilterNiceReprPipe implements PipeTransform {\n    constructor(@Inject(\"Expressions\") private Expressions: fairAny) { }\n\n    translateConds(input: FilterDesc) {\n        if(!input.uiData) {\n            return [];\n        }\n        return input.uiData.conditions!.map((cond) => {\n            var op = this.Expressions.getOperatorByName(cond[\"operator\"]);\n            if (!op) return \"Unknown op: \" + encodeHTML(cond[\"operator\"]);\n            if (op.repr) return op.repr(cond);\n            else return encodeHTML(JSON.stringify(cond));\n        });\n    }\n\n    anumLiteral(value: any): string {\n        return \"<span class='alphanum-literal flex'>\" + encodeHTML(value) + \"</span>\";\n    }\n\n    transform(input: FilterDesc): string {\n        if (!input || !input.enabled || !input.uiData) return \"No filter\";\n\n        if (input.uiData.mode == \"&&\") {\n            var condStr = this.translateConds(input);\n            if (condStr.length == 1) return condStr[0];\n            else return condStr.map(function (x) { return \"(\" + x + \")\" }).join(\" AND \");\n        } else if (input.uiData.mode == \"||\") {\n            var condStr = this.translateConds(input);\n            if (condStr.length == 1) return condStr[0];\n            else return condStr.map(function (x) { return \"(\" + x + \")\" }).join(\" OR \");\n        } else if (input.uiData.mode == \"CUSTOM\") {\n            return \"<span class='noflex'>Formula: </span>\" + this.anumLiteral(input.expression);\n        } else if (input.uiData.mode == \"SQL\") {\n            return \"<span class='noflex'>SQL: </span>\" + this.anumLiteral(input.expression);\n        }\n        return '';\n    }\n}\n","<button\n    class=\"btn header-button trigger subnav-page-header-name has-caret\"\n    [dkuPopoverTrigger]=\"popover\"\n    [wt1Click]=\"'worksheets_sampling-button'\"\n>\n    Sampling and filtering\n    <b class=\"caret\"></b>\n</button>\n<dku-popover #popover>\n    <div class=\"dkuform-horizontal\">\n        <form [formGroup]=\"form\" class=\"sample-settings\" [class.form--disabled]=\"readOnly\">\n            <fieldset [disabled]=\"readOnly\">\n                <div class=\"control-group\">\n                    <label\n                        for=\"samplingMethod\"\n                        class=\"control-label control-dropdown-label\"\n                    >\n                        Sampling method\n                    </label>\n                    <div class=\"controls\">\n                        <dku-bs-select-form-control\n                            ngOptions=\"x[0] as x[1] for x in list\"\n                            [list]=\"samplingMethods\"\n                            [layout]=\"'list'\"\n                            [optionsDescriptions]=\"samplingMethodDescriptions\"\n                            formControlName=\"samplingMethod\"\n                        ></dku-bs-select-form-control>\n                    </div>\n                </div>\n                <partition-selection *ngIf=\"partitioned\" [(partitionSelectionMethod)]=\"form.value.partitionSelectionMethod\"\n                    [(selectedPartitions)]=\"form.value.selectedPartitions\"\n                    [(latestPartitionsN)]=\"form.value.latestPartitionsN\"\n                    [projectKey]=\"projectKey\"\n                    [datasetSmartName]=\"dataSpec.inputDatasetSmartName\"></partition-selection>\n\n                <div class=\"control-group\" *ngIf=\"form.value.samplingMethod == 'HEAD_SEQUENTIAL'\">\n                    <label\n                        for=\"maxRecords\"\n                        class=\"control-label control-dropdown-label\"\n                    >\n                        Number of records\n                    </label>\n                    <div class=\"controls\">\n                        <input\n                            formControlName=\"maxRecords\"\n                            name=\"maxRecords\"\n                            min=\"1\"\n                            type=\"number\"\n                        >\n                    </div>\n                </div>\n                <div class=\"control-group\" *ngIf=\"form.value.samplingMethod == 'RANDOM_FIXED_RATIO'\">\n                    <label\n                        for=\"targetRatio\"\n                        class=\"control-label control-dropdown-label\"\n                    >\n                        Ratio\n                    </label>\n                    <div class=\"controls\">\n                        <input\n                            formControlName=\"targetRatio\"\n                            name=\"targetRatio\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.1\"\n                            type=\"number\"\n                        >\n                    </div>\n                </div>\n                <div class=\"control-group\">\n                    <h2\n                        class=\"settings-section-title\"\n                    >\n                    Filtering\n                </h2>\n                <fieldset>\n                    <label>\n                        <input\n                            formControlName=\"enableFiltering\"\n                            name=\"enableFiltering\"\n                            type=\"checkbox\"\n                            id=\"enableFiltering\"\n                            class=\"form__checkbox\"\n                            (change)=\"onFilteringChange()\"\n                        >\n                        Enable filtering\n                    </label>\n                </fieldset>\n                </div>\n                <div *ngIf=\"form.value.enableFiltering\" [innerHTML]=\"form.value.filter | filterNiceRepr\" (click)=\"onFilteringChange()\" class=\"shaker-preview filter-expression\" matTooltip=\"Click to edit\" matTooltipPosition=\"right\"></div>\n\n                <dataset-selection-ordering-fields [datasetFullInfo]=\"datasetFullInfo\" [selection]=\"form.value.datasetSelectionForOrdering\" class=\"form__dataset-selection common-styles-only\">\n\n                </dataset-selection-ordering-fields>\n\n\n                <div class=\"control-group\">\n                    <h2\n                        class=\"settings-section-title\"\n                    >\n                        Advanced\n                    </h2>\n                    <fieldset>\n                        <label\n                            for=\"autoRefreshSample\"\n                            class=\"control-label control-dropdown-label\"\n                        >\n                            <input\n                                formControlName=\"autoRefreshSample\"\n                                name=\"autoRefreshSample\"\n                                id=\"autoRefreshSample\"\n                                class=\"form__checkbox\"\n                                type=\"checkbox\"\n                            >\n                            Auto Refresh Sample\n                        </label>\n                    </fieldset>\n                </div>\n\n                <div #closeButton *ngIf=\"!readOnly\">\n                    <button\n                        class=\"btn btn--primary pull-right\"\n                        style=\"margin-right: 10px\"\n                        [disabled]=\"form.invalid\"\n                        (click)=\"save()\"\n                    >\n                        Save and refresh sample\n                    </button>\n                </div>\n            </fieldset>\n        </form>\n    </div>\n</dku-popover>\n","import { Component, Input, EventEmitter, Output, SimpleChanges, OnChanges, ChangeDetectionStrategy, ViewChild, Inject, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { DataSpec } from 'src/generated-sources';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport deepEqual from 'fast-deep-equal';\nimport { DkuPopoverComponent } from '@app/widgets/dropdowns/dku-popover/dku-popover.component';\nimport { fairAny } from 'dku-frontend-core';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { IScope } from 'angular';\nimport _ from 'lodash';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { resolveSmartName } from '@features/eda/utils';\n\n/*\n    This component is equivalent to the \"sampling-tab\", minus the DatasetSelectionToMemTable.maxSizeMb,\n    as we do not support this type of dataset selection iun EDA.\n*/\n@UntilDestroy()\n@Component({\n    selector: 'sample-settings',\n    templateUrl: './sample-settings.component.html',\n    styleUrls: [\n        '../../shared-styles/forms.less',\n        '../../shared-styles/header-button.less',\n        './sample-settings.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SampleSettingsComponent implements OnChanges, OnDestroy {\n    @Input() dataSpec: DataSpec;\n    @Input() readOnly: boolean;\n    @Input() projectKey: string;\n    @Output() dataSpecChange = new EventEmitter<DataSpec>();\n    @ViewChild('popover', { static: true }) popover: DkuPopoverComponent;\n\n    partitioned: boolean = false;\n\n    samplingMethods: string[];\n    samplingMethodDescriptions: string[];\n\n    datasetFullInfo: fairAny;\n\n    form = this.formBuilder.group({\n        samplingMethod: new FormControl(undefined, [Validators.required]),\n        maxRecords: new FormControl(undefined, [Validators.required, Validators.min(1)]),\n        autoRefreshSample: new FormControl(undefined, [Validators.required]),\n        enableFiltering: new FormControl(undefined, [Validators.required]),\n        targetRatio: new FormControl(1, [Validators.required, Validators.min(0), Validators.max(1)]),\n        filter: new FormControl(undefined, [Validators.required]),\n        partitionSelectionMethod: new FormControl(undefined, [Validators.required]),\n        selectedPartitions: new FormControl(),\n        latestPartitionsN: new FormControl(),\n        datasetSelectionForOrdering: new FormControl(undefined, [Validators.required])\n    });\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private DataikuAPI: DataikuAPIService,\n        @Inject('CreateModalFromTemplate') private createModal: fairAny,\n        @Inject('SamplingData') public SamplingData: fairAny,\n        @Inject('$rootScope') private $rootScope: IScope,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        const methodCount = 3;\n\n        this.samplingMethods = this.SamplingData.streamSamplingMethods.slice(0, methodCount);\n        this.samplingMethodDescriptions = this.SamplingData.streamSamplingMethodsDesc.slice(0, methodCount);\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.dataSpec) {\n            if (!changes.dataSpec.currentValue) {\n                this.partitioned = false;\n            } else {\n                const datasetLoc = resolveSmartName(this.projectKey, this.dataSpec.inputDatasetSmartName);\n                this.DataikuAPI.datasets\n                    .getFullInfo(this.projectKey, datasetLoc.projectKey, datasetLoc.id)\n                    .subscribe(\n                        response => {\n                            this.datasetFullInfo = response;\n                            this.partitioned = response.partitioned;\n                            this.changeDetectorRef.markForCheck();\n                        }\n                    );\n            }\n            if (!deepEqual(changes.dataSpec.currentValue, changes.dataSpec.previousValue)) {\n                this.reset();\n            }\n        }\n    }\n\n    reset() {\n        this.form.patchValue({\n            samplingMethod: this.dataSpec.datasetSelection.samplingMethod,\n            maxRecords: this.dataSpec.datasetSelection.maxRecords,\n            autoRefreshSample: this.dataSpec.autoRefreshSample,\n            enableFiltering: this.dataSpec.datasetSelection.filter!.enabled,\n            targetRatio: this.dataSpec.datasetSelection.targetRatio,\n            filter: this.dataSpec.datasetSelection.filter,\n            partitionSelectionMethod: this.dataSpec.datasetSelection.partitionSelectionMethod,\n            selectedPartitions: this.dataSpec.datasetSelection.selectedPartitions,\n            latestPartitionsN: this.dataSpec.datasetSelection.latestPartitionsN,\n            datasetSelectionForOrdering: _.cloneDeep(this.dataSpec.datasetSelection)\n        });\n    }\n\n    save() {\n        let selection;\n        switch (this.form.value.samplingMethod) {\n            case 'RANDOM_FIXED_RATIO':\n                selection = { targetRatio: this.form.value.targetRatio };\n                break;\n            case 'HEAD_SEQUENTIAL':\n                selection = { maxRecords: this.form.value.maxRecords };\n                break;\n            default:\n                selection = {};\n        }\n\n        this.dataSpecChange.emit({\n            ...this.dataSpec,\n            refreshTrigger: this.dataSpec.refreshTrigger + 1,\n            autoRefreshSample: this.form.value.autoRefreshSample,\n            datasetSelection: {\n                ...this.dataSpec.datasetSelection,\n                ...selection,\n                samplingMethod: this.form.value.samplingMethod,\n                filter: {\n                    ...this.form.value.filter,\n                    enabled: this.form.value.enableFiltering\n                },\n                targetRatio: this.form.value.targetRatio,\n                partitionSelectionMethod: this.form.value.partitionSelectionMethod,\n                ...(this.form.value.selectedPartitions && { selectedPartitions: this.form.value.selectedPartitions }),\n                latestPartitionsN: this.form.value.latestPartitionsN ? this.form.value.latestPartitionsN : 1,\n                ordering: {\n                    ...this.form.value.datasetSelectionForOrdering.ordering\n                }\n            },\n        });\n\n        this.popover.hide();\n    }\n\n    onFilteringChange() {\n        if (this.form.value.enableFiltering) {\n            const datasetLoc = resolveSmartName(this.projectKey, this.dataSpec.inputDatasetSmartName);\n            this.DataikuAPI.datasets.get(\n                datasetLoc.projectKey, datasetLoc.id, this.projectKey\n            ).pipe(untilDestroyed(this))\n                .subscribe(\n                    dataset => {\n                        const newScope: fairAny = this.$rootScope.$new();\n                        newScope.dataset = dataset;\n                        newScope.schema = dataset.schema,\n                            newScope.filter = _.cloneDeep(this.form.value.filter);\n                        newScope.ok = () => {\n                            newScope.filter.enabled = true;\n                            this.form.patchValue({ filter: newScope.filter });\n                            this.changeDetectorRef.markForCheck();\n                        };\n                        this.createModal('/templates/recipes/fragments/filter-modal.html', newScope);\n                    },\n                );\n        }\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<button\n    class=\"btn header-button trigger subnav-page-header-name has-caret\"\n    [dkuPopoverTrigger]=\"popover\"\n    [wt1Click]=\"'worksheets_confidence-level'\"\n>\n    Confidence level:\n    <span class=\"confidence-value\">{{ confidenceLevel | percent: '1.0-3' }}</span>\n    <b class=\"caret\"></b>\n</button>\n<dku-popover #popover>\n    <div class=\"control-group confidence-level\">\n        <form\n            [formGroup]=\"form\"\n            (ngSubmit)=\"save()\"\n            [class.form--disabled]=\"!canSave\"\n        >\n            <fieldset [disabled]=\"!canSave\">\n                <p>\n                    <i>\n                        Used to determine the confidence level of tests.\n                    </i>\n                </p>\n                <label>\n                    Confidence level\n                    <input\n                        type=\"number\"\n                        min=\"0.5\"\n                        max=\"0.99999\"\n                        step=\"0.00001\"\n                        formControlName=\"confidenceLevel\"\n                    >\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        class=\"form__checkbox\"\n                        formControlName=\"showConfidenceInterval\"\n                    >\n                    Show confidence intervals\n                </label>\n                <p>\n                    <i>\n                        Confidence intervals are displayed in quantile tables and summary stats\n                    </i>\n                </p>\n            </fieldset>\n        </form>\n    </div>\n    <div #closeButton *ngIf=\"canSave\">\n        <button\n            class=\"btn btn--primary pull-right\"\n            [disabled]=\"form.invalid\"\n            (click)=\"save()\"\n        >\n            Save\n        </button>\n    </div>\n</dku-popover>\n","import { Component, Output, Input, EventEmitter, OnChanges, ChangeDetectionStrategy, ViewChild } from '@angular/core';\nimport { Card } from 'src/generated-sources';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { CardAction, CardActionType } from '../cards/events';\nimport { DkuPopoverComponent } from '@app/widgets/dropdowns/dku-popover/dku-popover.component';\nimport { hasConfidenceLevel } from '@features/eda/utils';\n\n@Component({\n    selector: 'edit-confidence-level-settings',\n    templateUrl: './edit-confidence-level-settings.component.html',\n    styleUrls: [\n        '../../shared-styles/forms.less',\n        '../../shared-styles/header-button.less',\n        './edit-confidence-level-settings.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EditConfidenceLevelSettingsComponent implements OnChanges {\n    @Input() params: Card;\n    @Input() canSave = true;\n    @Output() action = new EventEmitter<CardAction>();\n    @ViewChild('popover') popover: DkuPopoverComponent;\n\n    form = new FormGroup({\n        confidenceLevel: new FormControl(undefined, [\n            Validators.required,\n            Validators.min(0.5),\n            Validators.max(0.99999)\n        ]),\n        showConfidenceInterval: new FormControl(undefined, [Validators.required])\n    });\n\n    ngOnChanges() {\n        if (this.params && hasConfidenceLevel(this.params)) {\n            this.form.patchValue({\n                confidenceLevel: this.params.confidenceLevel,\n                showConfidenceInterval: this.params.showConfidenceInterval,\n            });\n        }\n    }\n\n    save() {\n        if (this.canSave && this.form.valid) {\n            this.action.emit({\n                type: CardActionType.UPDATE,\n                newParams: { ...this.params, ...this.form.value }\n            });\n\n            this.popover.hide();\n        }\n    }\n\n    get confidenceLevel(): number {\n        return (this.params as any).confidenceLevel;\n    }\n}\n","<button\n    class=\"btn header-button trigger subnav-page-header-name\"\n    *ngIf=\"params.highlightFilter\"\n    [disabled]=\"readOnly\"\n    [matTooltip]=\"params.highlightFilter | filterName\"\n    (click)=\"dropHighlight()\"\n>\n    Selection:\n    <span class=\"selection-name\">\n        {{ params.highlightFilter | filterName }}\n    </span>\n    <i class=\"icon-dku-close\" *ngIf=\"!readOnly\"></i>\n</button>\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { CardAction, CardActionType } from '../cards/events';\nimport { WorksheetRootCard } from 'src/generated-sources';\n\n\n@Component({\n    selector: 'highlight-settings',\n    templateUrl: './highlight-settings.component.html',\n    styleUrls: [\n        '../../shared-styles/header-button.less',\n        './highlight-settings.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HighlightSettingsComponent {\n    @Input() params: WorksheetRootCard;\n    @Input() readOnly: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    dropHighlight() {\n        if (this.params.highlightFilter) {\n            this.action.emit({\n                type: CardActionType.UPDATE,\n                newParams: { ...this.params, highlightFilter: null }\n            });\n        }\n    }\n}\n","import { Input, Injector, ElementRef, Output, EventEmitter, Directive } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ContainerExecSelection } from 'src/generated-sources';\n\n\n@Directive({\n    selector: 'container-selection-form'\n})\nexport class ContainerSelectionFormComponent extends UpgradeComponent {\n    @Input() selection: ContainerExecSelection;\n    @Output() selectionChange: EventEmitter<ContainerExecSelection>;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('ng1ContainerSelectionForm', elementRef, injector);\n    }\n}\n","<button class=\"btn header-button trigger subnav-page-header-name has-caret\" [dkuPopoverTrigger]=\"popover\"\n    [wt1Click]=\"'worksheets_container-selection'\">\n    <i class=\"icon-cogs\"></i>\n    <b class=\"caret\"></b>\n</button>\n<dku-popover #popover>\n    <div class=\"control-group\">\n        <h2 class=\"settings-section-title\">Containerized execution</h2>\n        <container-selection-form [(selection)]=\"selection\"></container-selection-form>\n    </div>\n    <div #closeButton *ngIf=\"!readOnly\">\n        <button class=\"btn btn--primary pull-right\" (click)=\"save()\">\n            Save\n        </button>\n    </div>\n</dku-popover>","import { Component, Output, Input, EventEmitter, OnChanges, ChangeDetectionStrategy, ViewChild, OnInit, SimpleChange, SimpleChanges } from '@angular/core';\nimport { DataSpec, ContainerExecSelection } from 'src/generated-sources';\nimport { DkuPopoverComponent } from '@app/widgets/dropdowns/dku-popover/dku-popover.component';\n\n@Component({\n    selector: 'container-settings',\n    templateUrl: './container-settings.component.html',\n    styleUrls: [\n        '../../shared-styles/forms.less',\n        '../../shared-styles/header-button.less',\n        './container-settings.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContainerSettingsComponent implements OnChanges {\n    @Input() dataSpec: DataSpec;\n    @Input() readOnly = false;\n    @Output() dataSpecChange = new EventEmitter<DataSpec>();\n    @ViewChild('popover') popover: DkuPopoverComponent;\n    selection: ContainerExecSelection;\n\n    save() {\n        if (!this.readOnly) {\n            this.dataSpecChange.emit({\n                ... this.dataSpec,\n                containerSelection: this.selection\n            });\n            this.popover.hide();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.dataSpec) {\n            this.selection = this.dataSpec.containerSelection;\n        }\n    }\n}\n","import { transition, trigger, style, animate, state } from '@angular/animations';\n\n\n// Do not use in combination with *ngIf (it breaks state transition)\nexport const fadeInOutHeight = trigger('fadeInOut', [\n    state('opened', style({ opacity: 1, height: '*', willChange: 'height, opacity' })),\n    state('closed', style({ opacity: 0, height: '0px', willChange: 'height, opacity' })),\n\n    transition('opened => closed', animate('200ms ease-out')),\n    transition('closed => opened', animate('200ms ease-out'))\n]);\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Card } from 'src/generated-sources';\nimport { getFullCardTitle, getBasicCardTitle, getConfigureCardTitle } from '../card-utils';\n\n@Pipe({\n    name: 'cardTitle'\n})\nexport class CardTitlePipe implements PipeTransform {\n    transform(params: Card, layout: 'basic' | 'full' | 'config'): string {\n        switch (layout) {\n            case 'basic':\n                return getBasicCardTitle(params);\n            case 'full':\n                return getFullCardTitle(params);\n            case 'config':\n                return getConfigureCardTitle(params);\n        }\n    }\n}\n","<div class=\"modal\" [qa]=\"'eda-configure-card-modal'\">\n    <modal-header\n        [title]=\"params | cardTitle: 'basic'\"\n        [hasBorder]=\"false\"\n    ></modal-header>\n    <div class=\"modal-body flex modal-body--analysis no-padding\">\n        <card-editor\n            [params]=\"params\"\n            (paramsChange)=\"changeParams($event)\"\n            (validityChange)=\"changeValidity($event)\"\n            (validityTooltipChange)=\"changeValidityTooltip($event)\"\n        ></card-editor>\n    </div>\n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\" [matTooltip]=\"validationTooltip\">\n            <button\n                type=\"button\"\n                class=\"btn btn--text btn--secondary\"\n                (click)=\"dismiss()\"\n                tabindex=\"-1\"\n            >\n                Cancel\n            </button>\n            <button\n                type=\"submit\"\n                form=\"config-form\"\n                class=\"btn btn--text btn--primary\"\n                [disabled]=\"!canSave\"\n                (click)=\"save()\"\n                [wt1Click]=\"'worksheets_edit-card'\"\n                [qa]=\"'eda-save-card-button'\"\n                tabindex=\"-1\"\n            >\n                Apply\n            </button>\n        </div>\n        <form\n            class=\"controls\"\n            *ngIf=\"columnParams\"\n        >\n            <div class=\"control-group\">\n                <label class=\"control-label control-label--flex\" [qa]=\"'eda-propagate-columns-checkbox'\">\n                    <input\n                        type=\"checkbox\"\n                        [(ngModel)]=\"updateSiblings\"\n                        name=\"updateSiblings\"\n                    >\n                    <span class=\"help-inline\">\n                        Propagate settings to all\n                        <ng-container *ngIf=\"columnParams!.column.type === Variable.Type.CONTINUOUS\">numerical</ng-container>\n                        <ng-container *ngIf=\"columnParams!.column.type === Variable.Type.CATEGORICAL\">categorical</ng-container>\n                        columns\n                    </span>\n                </label>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, ChangeDetectionStrategy, Inject } from '@angular/core';\nimport { Card, ColumnCard } from 'src/generated-sources';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Variable } from 'src/generated-sources';\nimport { CardWizardService } from '../card-wizard.service';\n\nexport interface EditCardModalComponentInput {\n    params: Card;\n    isStatCard: boolean;\n    columnParams?: ColumnCard;\n}\n\n@Component({\n    selector: 'edit-card-modal',\n    templateUrl: './edit-card-modal.component.html',\n    styleUrls: [\n        '../../../shared-styles/card-wizard.less',\n        './edit-card-modal.component.less'\n    ],\n    providers: [CardWizardService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EditCardModalComponent {\n    // Inputs\n    params: Card;\n    isStatCard: boolean;\n    columnParams?: ColumnCard; // null if the card is top level (ie. not contained in a ColumnCard)\n\n    // Local\n    changedParamsValid = true;\n    validationTooltip: string;\n    changedParams?: Card;\n    updateSiblings = false;\n    Variable = Variable;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) data: EditCardModalComponentInput,\n        private dialogRef: MatDialogRef<EditCardModalComponentInput>\n    ) {\n        this.params = data.params;\n        this.columnParams = data.columnParams;\n        this.isStatCard = data.isStatCard;\n    }\n\n    changeValidity(validity: boolean) {\n        this.changedParamsValid = validity;\n    }\n\n    changeValidityTooltip(tooltip: string) {\n        this.validationTooltip = tooltip;\n    }\n\n    changeParams(params: Card) {\n        this.changedParams = params;\n    }\n\n    dismiss() {\n        this.dialogRef.close('');\n    }\n\n    get canSave() {\n        return this.changedParams && this.changedParamsValid;\n    }\n\n    save() {\n        if (this.canSave) {\n            this.dialogRef.close({\n                card: this.changedParams,\n                updateSiblings: this.updateSiblings\n            });\n        }\n    }\n}\n","import { ShapiroNormalityTestCard, UnivariateHeaderCard, Variable } from 'src/generated-sources';\nimport { randomId } from '@utils/random';\nimport { DEFAULT_SPLIT_BY_SPEC } from '@utils/dss-defaults';\n\nexport function createVarianceComparisonCard(column: Variable, groupBy: Variable): UnivariateHeaderCard {\n    return {\n        id: randomId(),\n        type: 'univariate_header',\n        xColumns: [column],\n        showSummary: true,\n        showBoxPlot: false,\n        showHistogram: false,\n        showQuantile: false,\n        showFrequencyTable: false,\n        cards: [\n            {\n                id: randomId(),\n                type: 'column_card',\n                column,\n                cards: [\n                    {\n                        id: randomId(),\n                        type: 'univariate_summary',\n                        column,\n                        confidenceLevel: 0.95,\n                        showConfidenceInterval: false,\n                        compute: {\n                            // Display variance\n                            variance: true,\n                            // Override default values to display variance only (a bit verbose...)\n                            totalCount: false,\n                            mean: false,\n                            sum: false,\n                            median: false,\n                            std: false,\n                            skewness: false,\n                            kurtosis: false,\n                            sem: false,\n                            completeCount: false,\n                            nbEmpty: false,\n                            zeroCount: false,\n                            zeroRatio: false,\n                            nonZeroRatio: false,\n                            iqr: false,\n                            distinctCount: false,\n                            nbNonEmpty: false,\n                            min: false,\n                            max: false,\n                            range: false,\n                            mode: false\n                        }\n                    }\n                ]\n            }\n        ],\n        splitBy: {\n            ...DEFAULT_SPLIT_BY_SPEC,\n            groupingColumn: groupBy\n        }\n    };\n}\n\nexport function createShapiroCard(column: Variable, groupBy?: Variable): ShapiroNormalityTestCard {\n    return {\n        id: randomId(),\n        type: 'shapiro',\n        column,\n        splitBy: groupBy ? { ...DEFAULT_SPLIT_BY_SPEC, groupingColumn: groupBy } : null,\n        confidenceLevel: 0.95\n    };\n}\n","<ng-container *ngIf=\"params.knownStdDev == null; else ztest\">\n    <p>\n        The one-sample 𝘵-test is a statistical procedure used to determine whether your data\n        could have been drawn from a population where the mean of\n        <b>{{ params.column.name }}</b>\n        is\n        <b>\n            {{params.hypothesizedMean | smarterNumber}}\n        </b>.\n    </p>\n    <p>\n        There are two possible outcomes depending on the 𝘱-value:\n    </p>\n    <ul>\n        <li>\n            <b>\n                𝘱-value &le; significance level (&le; {{ 1 - params.confidenceLevel | smarterNumber }})\n            </b>\n            <br>\n            The hypothesis is rejected.\n            The population mean of\n            <b>{{ params.column.name }}</b>\n            is different from {{params.hypothesizedMean | smarterNumber}}.\n        </li>\n        <li>\n            <b>\n                𝘱-value is &gt; significance level (&gt; {{ 1 - params.confidenceLevel | smarterNumber }})\n            </b>\n\n            <br>\n            Not enough evidence against the hypothesis. Test is inconclusive.\n        </li>\n    </ul>\n    <p>\n        It has been shown that the conclusion is meaningful under the following conditions:\n    </p>\n    <ul>\n        <li>\n            Observations of\n            <b>{{ params.column.name }}</b>\n            are independent and identically distributed\n        </li>\n        <li>\n            Variable\n            <b>{{ params.column.name }}</b>\n            is normally distributed\n            <br>\n            <span\n                class=\"text-weak\"\n                *ngIf=\"canAddCard\"\n            >\n                <i class=\"icon-lightbulb\"></i>\n                You may want to check this assumption using a\n                <a (click)=\"addShapiro()\">Shapiro-Wilk test</a>\n            </span>\n        </li>\n    </ul>\n    <p>\n        <span class=\"text-weak\">\n            <i class=\"icon-info-sign\"></i>\n            Missing values are discarded\n        </span>\n    </p>\n</ng-container>\n<ng-template #ztest>\n    NOT IMPLEMENTED\n    <!-- POSTPONED AFTER EDA V1 RELEASE -->\n</ng-template>\n","import { Component, Input, ChangeDetectionStrategy, Optional, EventEmitter, Output, ViewContainerRef } from '@angular/core';\nimport { TZTest1SampCard } from 'src/generated-sources';\nimport { ModalsService, ModalShape } from '@shared/modals/modals.service';\nimport { CardAction, CardActionType } from '../../events';\nimport { EditCardModalComponent } from '../../../card-wizard/edit-card-modal/edit-card-modal.component';\nimport { createShapiroCard } from '../card-creation-templates';\n\n@Component({\n    selector: 'tztest1-samp-card-help',\n    templateUrl: './tztest1-samp-card-help.component.html',\n    styleUrls: ['./tztest1-samp-card-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TZTest1SampCardHelpComponent {\n    @Input() params: TZTest1SampCard;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    constructor(\n        private modalsService: ModalsService,\n        private viewContainerRef: ViewContainerRef\n    ) {\n    }\n\n    get canAddCard() {\n        return !this.readOnly && this.extendedActions;\n    }\n\n    addShapiro() {\n        if (!this.canAddCard) {\n            return;\n        }\n\n        const proposedCard = createShapiroCard(this.params.column);\n        this.modalsService.open(EditCardModalComponent, { params: proposedCard }, ModalShape.NONE, this.viewContainerRef)\n            .then(({ card })  => {\n                this.action.emit({\n                    type: CardActionType.ADD,\n                    card\n                });\n            }, () => { });\n    }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ShapiroNormalityTestCard } from 'src/generated-sources';\n\n@Component({\n    selector: 'shapiro-normality-test-card-help',\n    templateUrl: './shapiro-normality-test-card-help.component.html',\n    styleUrls: ['./shapiro-normality-test-card-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShapiroNormalityTestCardHelpComponent {\n    @Input() params: ShapiroNormalityTestCard;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n}\n","<p>\n    The Shapiro-Wilk test is a statistical procedure used to test the hypothesis that your data\n    could have been drawn from a normal population.\n</p>\n<p>\n    There are two possible outcomes depending on the 𝘱-value:\n</p>\n<ul>\n    <li>\n        <b>\n            𝘱-value &le; significance level (&le; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n        <br>\n        The hypothesis is rejected.\n        <b>{{ params.column.name }}</b>\n        is not normally distributed.\n    </li>\n    <li>\n        <b>\n            𝘱-value is &gt; significance level (&gt; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n\n        <br>\n        Not enough evidence against the hypothesis. Test is inconclusive.\n    </li>\n</ul>\n<p>\n    It has been shown that the conclusion is meaningful under the following conditions:\n</p>\n<ul>\n    <li>\n        Observations of\n        <b>{{ params.column.name }}</b>\n        are independent and identically distributed\n    </li>\n    <li>\n        Sample size is not too large (&lt; 5000)\n    </li>\n</ul>\n<p>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        Missing values are discarded\n    </span>\n    <br>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        &ngsp;\n        <a\n            href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.shapiro.html\"\n            target=\"_blank\"\n        >More information\n        </a>\n    </span>\n</p>\n","<ng-container *ngIf=\"isBuildingPopulationsAutomatically else manual\">\n    The compared populations are determined from the first {{ maxNbOfAutomaticPopulations }} most common values of\n    <b>{{ params.yColumn.name }}</b>.\n</ng-container>\n\n<ng-template #manual>\n    The compared populations are:\n    <ul>\n        <li *ngFor=\"let population of manualPopulations\">\n            <u>{{ population.column.name }}</u>:\n            {{ population.values.join(', ') }}\n        </li>\n    </ul>\n</ng-template>\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { Abstract2SampTestCard, AbstractNSampTestCard, isAbstractNSampTestCard, isAbstract2SampTestCard, Variable } from 'src/generated-sources';\nimport { assertNever } from 'dku-frontend-core';\n\ntype SupportedTypes = Abstract2SampTestCard | AbstractNSampTestCard;\n\ninterface Population {\n    column: Variable;\n    values: string[];\n}\n\n@Component({\n    selector: 'list-compared-populations',\n    templateUrl: './list-compared-populations.component.html',\n    styleUrls: ['./list-compared-populations.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListComparedPopulationsComponent {\n    @Input() params: SupportedTypes;\n\n    get isBuildingPopulationsAutomatically() {\n        return isAbstractNSampTestCard(this.params) && !this.params.yValues;\n    }\n\n    get maxNbOfAutomaticPopulations() {\n        return isAbstractNSampTestCard(this.params) ? this.params.maxGroups : 0;\n    }\n\n    get manualPopulations(): Population[] {\n        if (isAbstractNSampTestCard(this.params)) {\n            if (this.params.yValues) {\n                return this.params.yValues.map(value => ({\n                    column: this.params.yColumn,\n                    values: [value]\n                }));\n            } else {\n                // Automatically determined groups\n                return [];\n            }\n        }\n        if (isAbstract2SampTestCard(this.params)) {\n            return [\n                { column: this.params.yColumn, values: this.params.value1 },\n                { column: this.params.yColumn, values: this.params.value2 },\n            ];\n        }\n\n        // Won't compile if a new card type is added to 'SupportedTypes'\n        // and is not handled by this function\n        return assertNever(this.params);\n    }\n}\n","import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\nimport { KsTest2SampCard } from 'src/generated-sources';\nimport { CardAction } from '../../events';\n\n@Component({\n    selector: 'ks-test2-samp-card-help',\n    templateUrl: './ks-test2-samp-card-help.component.html',\n    styleUrls: ['./ks-test2-samp-card-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class KsTest2SampCardHelpComponent {\n    @Input() params: KsTest2SampCard;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n}\n","<p>\n    The two-sample Kolmogorov–Smirnov test is a statistical procedure used\n    to test the hypothesis that the underlying distribution of\n    <b>{{ params.xColumn.name }}</b>\n    is the same between two populations.\n</p>\n\n<list-compared-populations [params]=\"params\"></list-compared-populations>\n\n<p>\n    There are two possible outcomes depending on the 𝘱-value:\n</p>\n<ul>\n    <li>\n        <b>\n            𝘱-value &le; significance level (&le; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n        <br>\n        The hypothesis is rejected.\n        <b>{{ params.xColumn.name }}</b>\n        distribution is different in the two populations.\n    </li>\n    <li>\n        <b>\n            𝘱-value is &gt; significance level (&gt; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n\n        <br>\n        Not enough evidence against the hypothesis. Test is inconclusive.\n    </li>\n</ul>\n<p>\n    It has been shown that the conclusion is meaningful under the following condition:\n</p>\n<ul>\n    <li>\n        Observations of\n        <b>{{ params.xColumn.name }}</b>\n        are independent and identically distributed\n    </li>\n</ul>\n<p>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        Missing values are discarded\n    </span>\n</p>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { SignTest1SampCard } from 'src/generated-sources';\n\n@Component({\n    selector: 'sign-test1-samp-card-help',\n    templateUrl: './sign-test1-samp-card-help.component.html',\n    styleUrls: ['./sign-test1-samp-card-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SignTest1SampCardHelpComponent {\n    @Input() params: SignTest1SampCard;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n}\n","<p>\n    The sign test is a nonparametric test used to determine whether your data\n            could have been drawn from a population where the median of\n    <b>{{ params.column.name }}</b>\n    is\n    <b>\n        {{params.hypothesizedMedian | smarterNumber}}\n    </b>.\n</p>\n<p>\n    There are two possible outcomes depending on the 𝘱-value:\n</p>\n<ul>\n    <li>\n        <b>\n            𝘱-value &le; significance level (&le; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n        <br>\n        The hypothesis is rejected.\n        The population median of\n        <b>{{ params.column.name }}</b>\n        is different from {{params.hypothesizedMedian | smarterNumber}}.\n    </li>\n    <li>\n        <b>\n            𝘱-value is &gt; significance level (&gt; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n\n        <br>\n        Not enough evidence against the hypothesis. Test is inconclusive.\n    </li>\n</ul>\n<p>\n    It has been shown that the conclusion is meaningful under the following condition:\n</p>\n<ul>\n    <li>\n        Observations of\n        <b>{{ params.column.name }}</b>\n        are independent and identically distributed\n    </li>\n</ul>\n<p>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        Missing values and values which are equal to the hypothesized median are discarded\n    </span>\n</p>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Chi2IndTestCard } from 'src/generated-sources';\n\n@Component({\n    selector: 'chi2-ind-test-card-help',\n    templateUrl: './chi2-ind-test-card-help.component.html',\n    styleUrls: ['./chi2-ind-test-card-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Chi2IndTestCardHelpComponent {\n    @Input() params: Chi2IndTestCard;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n}\n","<p>\n    The Chi-square independence test is a statistical procedure used\n    to test the hypothesis that variables\n    <b>{{ params.xColumn.name }}</b>\n    and\n    <b>{{ params.yColumn.name }}</b>\n    are independent.\n</p>\n\n<p>\n    There are two possible outcomes depending on the 𝘱-value:\n</p>\n<ul>\n    <li>\n        <b>\n            𝘱-value &le; significance level (&le; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n        <br>\n        The hypothesis is rejected. Variables\n        <b>{{ params.xColumn.name }}</b>\n        and\n        <b>{{ params.yColumn.name }}</b>\n        are not independent.\n    </li>\n    <li>\n        <b>\n            𝘱-value is &gt; significance level (&gt; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n\n        <br>\n        Not enough evidence against the hypothesis. Test is inconclusive.\n    </li>\n</ul>\n<p>\n    It has been shown that the conclusion is meaningful under the following conditions:\n</p>\n<ul>\n    <li>\n        Observations of\n        (<b>{{ params.xColumn.name }}</b>,\n        <b>{{ params.yColumn.name }}</b>)\n        are independent and identically distributed\n    </li>\n    <li>\n        The expected count for each cell of the frequency table is at least\n        <b>5</b>\n    </li>\n</ul>\n<p>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        Missing values in\n        <b>{{ params.xColumn.name }}</b>\n        and/or\n        <b>{{ params.yColumn.name }}</b>\n        are considered as a separate category\n    </span>\n    <br>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        &ngsp;\n        <a\n            href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chi2_contingency.html\"\n            target=\"_blank\"\n        >More information\n        </a>\n    </span>\n</p>\n","<p>\n    The {{ params.type === 'pairwise_mood' ? 'pairwise' : '' }} Mood test is a nonparametric test that tests the hypothesis that the median of\n    <b>{{ params.xColumn.name }}</b>\n    is identical\n    <ng-container *ngIf=\"isPairwise\">in every pair of populations.</ng-container>\n    <ng-container *ngIf=\"!isPairwise\">\n        <ng-container *ngIf=\"hasTwoSamples else nSamp\">in both populations.</ng-container>\n        <ng-template #nSamp>in all populations.</ng-template>\n    </ng-container>\n</p>\n\n<p>\n    <list-compared-populations [params]=\"params\"></list-compared-populations>\n</p>\n\n<p>\n    There are two possible outcomes depending on the {{ params.type === 'pairwise_mood' ? '𝘱-values' : '𝘱-value' }}:\n</p>\n\n<ul>\n    <li>\n        <b>\n            𝘱-value &le; significance level (&le; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n        <br>\n        The hypothesis is rejected. the\n        median <b>{{ params.xColumn.name }}</b>\n        is not the same\n        <ng-container *ngIf=\"isPairwise\">for this pair of populations.</ng-container>\n        <ng-container *ngIf=\"!isPairwise\">\n            <ng-container *ngIf=\"hasTwoSamples else nSamp\">in both populations.</ng-container>\n            <ng-template #nSamp>in all populations.</ng-template>\n        </ng-container>\n    </li>\n    <li>\n        <b>\n            𝘱-value is &gt; significance level (&gt; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n\n        <br>\n        Not enough evidence against the hypothesis. Test is inconclusive.\n    </li>\n</ul>\n\n<p>\n    It has been shown that the conclusion is meaningful under the following conditions:\n</p>\n<ul>\n    <li>\n        Observations of\n        <b>{{ params.xColumn.name }}</b>\n        are independent and identically distributed\n    </li>\n    <li>\n        Distributions of\n        <b>{{ params.xColumn.name }}</b>\n        have the same shape in all populations\n    </li>\n</ul>\n\n<p>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        Missing values and values which are equal to the grand median are discarded\n    </span>\n    <br>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        &ngsp;\n        <a\n            href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.median_test.html\"\n            target=\"_blank\"\n        >More information\n        </a>\n    </span>\n</p>\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { MoodTest2SampCard, MoodTestNSampCard, PairwiseMoodTestCard, isAbstractPairwiseTestCard, isAbstract2SampTestCard } from 'src/generated-sources';\n\n\ntype SupportedCards = MoodTestNSampCard | MoodTest2SampCard | PairwiseMoodTestCard;\n\n@Component({\n    selector: 'generic-nsamp-mood-test-help',\n    templateUrl: './generic-nsamp-mood-test-help.component.html',\n    styleUrls: ['./generic-nsamp-mood-test-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GenericNSampMoodTestHelpComponent {\n    @Input() params: SupportedCards;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n\n    get isPairwise() {\n        return isAbstractPairwiseTestCard(this.params);\n    }\n\n    get hasTwoSamples() {\n        return isAbstract2SampTestCard(this.params);\n    }\n}\n","<p>\n    The one-way ANOVA test is a parametric test that tests the hypothesis that the mean of\n    <b>{{ params.xColumn.name }}</b>\n    is identical in all populations.\n</p>\n\n<p>\n    <list-compared-populations [params]=\"params\"></list-compared-populations>\n</p>\n\n<p>\n    There are two possible outcomes depending on the 𝘱-value:\n</p>\n\n<ul>\n    <li>\n        <b>\n            𝘱-value &le; significance level (&le; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n        <br>\n        The hypothesis is rejected. The population mean of\n        <b>{{ params.xColumn.name }}</b>\n        is not the same in all the populations.\n    </li>\n    <li>\n        <b>\n            𝘱-value is &gt; significance level (&gt; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n\n        <br>\n        Not enough evidence against the hypothesis. Test is inconclusive.\n    </li>\n</ul>\n\n<p>\n    It has been shown that the conclusion is meaningful under the following conditions:\n</p>\n<ul>\n    <li>\n        Observations of\n        <b>{{ params.xColumn.name }}</b>\n        are independent and identically distributed\n    </li>\n    <li>\n        Variable\n        <b>{{ params.xColumn.name }}</b>\n        is normally distributed in every population\n        <br>\n        <span\n            class=\"text-weak\"\n            *ngIf=\"canAddCard\"\n        >\n            <i class=\"icon-lightbulb\"></i>\n            You may want to check this assumption using a\n            <a (click)=\"addGroupedShapiro()\">Shapiro-Wilk test</a>\n        </span>\n    </li>\n    <li>\n        Variance of\n        <b>{{ params.xColumn.name }}</b>\n        is identical in all populations\n        <br>\n        <span\n            class=\"text-weak\"\n            *ngIf=\"canAddCard\"\n        >\n            <i class=\"icon-lightbulb\"></i>\n            You may want to have a look at\n            <a (click)=\"addGroupedSummary()\">summary statistics</a>\n        </span>\n    </li>\n</ul>\n\n<p>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        Missing values are discarded\n    </span>\n</p>\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ViewContainerRef } from '@angular/core';\nimport { OneWayANOVACard } from 'src/generated-sources';\nimport { CardAction, CardActionType } from '../../events';\nimport { ModalsService, ModalShape } from '@shared/modals/modals.service';\nimport { EditCardModalComponent } from '@features/eda/worksheet/card-wizard/edit-card-modal/edit-card-modal.component';\nimport { createVarianceComparisonCard, createShapiroCard} from '../card-creation-templates';\n\n@Component({\n    selector: 'one-way-anova-card-help',\n    templateUrl: './one-way-anova-card-help.component.html',\n    styleUrls: ['./one-way-anova-card-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OneWayANOVACardHelpComponent {\n    @Input() params: OneWayANOVACard;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    constructor(private modalsService: ModalsService, private viewContainerRef: ViewContainerRef) { }\n\n    get canAddCard() {\n        return !this.readOnly && this.extendedActions;\n    }\n\n    addGroupedShapiro() {\n        if (!this.canAddCard) {\n            return;\n        }\n\n        const proposedCard = createShapiroCard(this.params.xColumn, this.params.yColumn);\n        this.modalsService.open(EditCardModalComponent, { params: proposedCard }, ModalShape.NONE,\n            this.viewContainerRef)\n            .then(({ card }) => {\n                this.action.emit({\n                    type: CardActionType.ADD,\n                    card\n                });\n            }, () => { });\n    }\n\n    addGroupedSummary() {\n        if (!this.canAddCard) {\n            return;\n        }\n\n        const proposedCard = createVarianceComparisonCard(this.params.xColumn, this.params.yColumn);\n        this.modalsService.open(EditCardModalComponent, { params: proposedCard }, ModalShape.NONE,\n            this.viewContainerRef)\n            .then(({ card }) => {\n                this.action.emit({\n                    type: CardActionType.ADD,\n                    card\n                });\n            }, () => { });\n    }\n}\n","<p>\n    The {{ isPairwise ? 'pairwise' : '' }} Student 𝘵-test\n        is a parametric test that tests the hypothesis that the mean of\n    <b>{{ params.xColumn.name }}</b>\n    is identical {{ isPairwise ? 'in every pair of' : 'in both' }} populations.\n</p>\n\n<p>\n    <list-compared-populations [params]=\"params\"></list-compared-populations>\n</p>\n\n<p>\n    There are two possible outcomes depending on the {{ isPairwise ? '𝘱-values' : '𝘱-value' }}:\n</p>\n\n<ul>\n    <li>\n        <b>\n            𝘱-value &le; significance level (&le; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n        <br>\n        The hypothesis is rejected. The\n        mean <b>{{ params.xColumn.name }}</b>\n        is not the same {{ isPairwise ? 'for this pair of' : 'in both' }} populations.\n    </li>\n    <li>\n        <b>\n            𝘱-value is &gt; significance level (&gt; {{ 1 - params.confidenceLevel | smarterNumber }})\n        </b>\n\n        <br>\n        Not enough evidence against the hypothesis. Test is inconclusive.\n    </li>\n</ul>\n\n<p>\n    It has been shown that the conclusion is meaningful under the following conditions:\n</p>\n\n<ul>\n    <li>\n        Observations of\n        <b>{{ params.xColumn.name }}</b>\n        are independent and identically distributed\n    </li>\n    <li>\n        Variable\n        <b>{{ params.xColumn.name }}</b>\n        is normally distributed in {{ hasTwoSamples ? 'both' : 'every' }} populations\n        <br>\n        <span\n            class=\"text-weak\"\n            *ngIf=\"canAddCard\"\n        >\n            <i class=\"icon-lightbulb\"></i>\n            You may want to check this assumption using a\n            <a (click)=\"addGroupedShapiro()\">Shapiro-Wilk test</a>\n        </span>\n    </li>\n    <li>\n        Variance of\n        <b>{{ params.xColumn.name }}</b>\n        is identical in {{ hasTwoSamples ? 'both' : 'every' }} populations\n        <br>\n        <span\n            class=\"text-weak\"\n            *ngIf=\"canAddCard\"\n        >\n            <i class=\"icon-lightbulb\"></i>\n            You may want to have a look at\n            <a (click)=\"addGroupedSummary()\">summary statistics</a>\n        </span>\n    </li>\n</ul>\n<p>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        Missing values are discarded\n    </span>\n    <br>\n    <span class=\"text-weak\">\n        <i class=\"icon-info-sign\"></i>\n        &ngsp;\n        <a\n            href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html\"\n            target=\"_blank\"\n        >More information\n        </a>\n    </span>\n</p>\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ViewContainerRef } from '@angular/core';\nimport { PairwiseTTestCard, TTest2SampCard, isAbstract2SampTestCard, isAbstractPairwiseTestCard } from 'src/generated-sources';\nimport { createShapiroCard, createVarianceComparisonCard } from '../card-creation-templates';\nimport { ModalsService, ModalShape } from '@shared/modals/modals.service';\nimport { EditCardModalComponent } from '@features/eda/worksheet/card-wizard/edit-card-modal/edit-card-modal.component';\nimport { CardActionType, CardAction } from '../../events';\n\ntype SupportedCards = PairwiseTTestCard | TTest2SampCard;\n\n@Component({\n    selector: 'generic-nsamp-ttest-card-help',\n    templateUrl: './generic-nsamp-ttest-card-help.component.html',\n    styleUrls: ['./generic-nsamp-ttest-card-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GenericNSampTTestCardHelpComponent {\n    @Input() params: SupportedCards;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    constructor(private modalsService: ModalsService, private viewContainerRef: ViewContainerRef) { }\n\n    get canAddCard() {\n        return !this.readOnly && this.extendedActions;\n    }\n\n    addGroupedShapiro() {\n        if (!this.canAddCard) {\n            return;\n        }\n\n        const proposedCard = createShapiroCard(this.params.xColumn, this.params.yColumn);\n        this.modalsService.open(EditCardModalComponent, { params: proposedCard }, ModalShape.NONE,\n            this.viewContainerRef)\n            .then(({ card }) => {\n                this.action.emit({\n                    type: CardActionType.ADD,\n                    card\n                });\n            }, () => { });\n    }\n\n    get hasTwoSamples() {\n        return isAbstract2SampTestCard(this.params);\n    }\n\n    get isPairwise() {\n        return isAbstractPairwiseTestCard(this.params);\n    }\n\n    addGroupedSummary() {\n        if (!this.canAddCard) {\n            return;\n        }\n\n        const proposedCard = createVarianceComparisonCard(this.params.xColumn, this.params.yColumn);\n        this.modalsService.open(EditCardModalComponent, { params: proposedCard }, ModalShape.NONE,\n            this.viewContainerRef)\n            .then(({ card }) => {\n                this.action.emit({\n                    type: CardActionType.ADD,\n                    card\n                });\n            }, () => { });\n    }\n}\n","<div [qa]=\"'eda-card-help-content'\">\n    <tztest1-samp-card-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'ttest_ztest_1samp'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></tztest1-samp-card-help>\n\n    <shapiro-normality-test-card-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'shapiro'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></shapiro-normality-test-card-help>\n\n    <ks-test2-samp-card-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'ks_test_2samp'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></ks-test2-samp-card-help>\n\n    <sign-test1-samp-card-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'sign_test_1samp'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></sign-test1-samp-card-help>\n\n    <chi2-ind-test-card-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'chi2_independence_test'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></chi2-ind-test-card-help>\n\n    <generic-nsamp-mood-test-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'mood_nsamp'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></generic-nsamp-mood-test-help>\n\n    <generic-nsamp-mood-test-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'mood_test_2samp'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></generic-nsamp-mood-test-help>\n\n    <generic-nsamp-mood-test-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'pairwise_mood'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></generic-nsamp-mood-test-help>\n\n    <one-way-anova-card-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'oneway_anova'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></one-way-anova-card-help>\n\n    <generic-nsamp-ttest-card-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'ttest_2samp'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></generic-nsamp-ttest-card-help>\n\n    <generic-nsamp-ttest-card-help\n        [params]=\"params\"\n        *ngIf=\"params.type == 'pairwise_ttest'\"\n        [readOnly]=\"readOnly\"\n        [extendedActions]=\"extendedActions\"\n        (action)=\"action.emit($event)\"\n    ></generic-nsamp-ttest-card-help>\n</div>\n","import { Component, Input, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';\nimport { Card } from 'src/generated-sources';\nimport { CardAction } from '../events';\n\n@Component({\n    selector: 'card-help',\n    templateUrl: './card-help.component.html',\n    styleUrls: ['./card-help.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardHelpComponent {\n    @Input() params: Card;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    static isAvailableForCard(card: Card): boolean {\n        switch (card.type) {\n            case 'ttest_ztest_1samp':\n                return !card.knownStdDev; // TODO: write content for z-test\n            case 'shapiro':\n            case 'ks_test_2samp':\n            case 'sign_test_1samp':\n            case 'chi2_independence_test':\n            case 'mood_nsamp':\n            case 'mood_test_2samp':\n            case 'pairwise_mood':\n            case 'oneway_anova':\n            case 'pairwise_ttest':\n            case 'ttest_2samp':\n                return true;\n        }\n        return false;\n    }\n}\n","<div class=\"modal modal--heatmap\">\n    <modal-header [title]=\"'Edit heatmap'\" [hasBorder]=\"false\"></modal-header>\n    <div class=\"modal-body flex\">\n        <form class=\"dkuform-modal-vertical\" [formGroup]=\"configForm\">\n            <div class=\"controls\">\n                <label>\n                    <input type=\"checkbox\" class=\"form__checkbox\" formControlName=\"showAbsValues\">\n                    Show absolute values\n                </label>\n            </div>\n            <div class=\"controls\">\n\n                <label>\n                    <input type=\"checkbox\" class=\"form__checkbox\" formControlName=\"showColors\">\n                    Show values as colors\n                </label>\n            </div>\n            <div class=\"controls\">\n                <label>\n                    <input type=\"checkbox\" class=\"form__checkbox\" formControlName=\"showValues\">\n                    Show values as text\n                </label>\n            </div>\n            <div class=\"controls\">\n                <label>\n                    Threshold\n                    <input type=\"number\" min=\"0\" max=\"1\" step=\"0.01\" formControlName=\"threshold\"\n                        required>\n                </label>\n            </div>\n            <div class=\"controls\" *ngIf=\"configForm.controls.threshold.value != 0\">\n                <label>\n                    <input type=\"checkbox\" class=\"form__checkbox\" formControlName=\"filterVariablesWithoutValues\">\n                    Do not show variables for which all values have been filtered out\n                </label>\n            </div>\n        </form>\n    </div>\n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\">\n            <button type=\"button\" class=\"btn btn--text btn--secondary\" (click)=\"dismiss();\" tabindex=\"-1\">Cancel</button>\n            <button type=\"button\" class=\"btn btn--text btn--primary\" (click)=\"finish();\" tabindex=\"-1\" [disabled]=\"configForm.invalid\">Apply</button>\n        </div>\n    </div>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport _ from 'lodash';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'heatmap-config',\n    templateUrl: './heatmap-config.component.html',\n    styleUrls: [\n        '../../../../shared-styles/forms.less',\n        './heatmap-config.component.less'\n    ]\n})\nexport class HeatmapConfigComponent implements OnInit {\n    configForm = this.fb.group({\n        showAbsValues: this.fb.control(null, [Validators.required]),\n        showColors: this.fb.control(null, [Validators.required]),\n        showValues: this.fb.control(null, [Validators.required]),\n        threshold: this.fb.control(null, [Validators.min(0), Validators.max(1)]),\n        filterVariablesWithoutValues: this.fb.control(null),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) public data: any,\n        private dialogRef: MatDialogRef<HeatmapConfigComponent>,\n        private fb: FormBuilder\n    ) {\n        this.configForm.patchValue({\n            showAbsValues: data.params.showAbsValues,\n            showColors: data.params.showColors,\n            showValues: data.params.showValues,\n            threshold: data.params.threshold,\n            filterVariablesWithoutValues: data.params.filterVariablesWithoutValues\n        });\n    }\n\n    ngOnInit() {\n        this.configForm.controls.threshold.valueChanges.subscribe(\n            (value) => (value !== 0)\n                ?this.configForm.controls.filterVariablesWithoutValues.enable()\n                :this.configForm.controls.filterVariablesWithoutValues.disable()\n        )\n    }\n\n    dismiss() {\n        this.dialogRef.close(undefined);\n    }\n\n    finish() {\n        this.dialogRef.close({\n            showAbsValues: this.configForm.value.showAbsValues,\n            showColors: this.configForm.value.showColors,\n            showValues: this.configForm.value.showValues,\n            threshold: this.configForm.value.threshold,\n            filterVariablesWithoutValues: this.configForm.value.filterVariablesWithoutValues\n        });\n    }\n}\n","<ng-container *ngIf=\"showMenu\">\n    <button\n        *ngIf=\"showExtendedMenu\"\n        class=\"btn btn--icon btn--secondary menu-button pull-right\"\n        [class.menu-button--active]=\"menuActive\"\n        (menuOpened)=\"menuActive = true\"\n        (menuClosed)=\"menuActive = false\"\n        [matMenuTriggerFor]=\"contextualMenu\"\n        [matMenuTriggerRestoreFocus]=\"false\"\n        [qa]=\"{'eda-card-menu-trigger': { id: params.id, type: params.type}}\"\n    >\n        <i class=\"icon-dku-ellipsis-vertical\"></i>\n    </button>\n\n    <button\n        *ngIf=\"extendedActions && deletable\"\n        class=\"btn btn--icon btn--secondary menu-button pull-right\"\n        [class.menu-button--active]=\"menuActive\"\n        title=\"{{ removalText }}\"\n        [qa]=\"{'eda-card-menu-item': {action: 'delete'}}\"\n        [wt1Click]=\"'worksheets_delete-card'\"\n        (click)=\"handleDelete()\"\n    >\n        <i class=\"icon-trash\"></i>\n    </button>\n\n    <button\n        *ngIf=\"hasConfigureCardModal\"\n        class=\"btn btn--icon btn--secondary menu-button pull-right\"\n        [class.menu-button--active]=\"menuActive\"\n        title=\"{{ params | cardTitle: 'config' }}\"\n        [qa]=\"{'eda-card-menu-item': {action: 'configure'}}\"\n        (click)=\"configureCard()\"\n    >\n        <i class=\"icon-pencil\"></i>\n    </button>\n\n    <mat-menu #contextualMenu>\n        <ng-template matMenuContent>\n            <button\n                mat-menu-item\n                *ngIf=\"hasConfigureVisualizationModal\"\n                (click)=\"configureVisualization()\"\n                [qa]=\"{'eda-card-menu-item': {action: 'configure-viz'}}\"\n            >\n                Configure visualization…\n            </button>\n            <ng-container *ngIf=\"this.params.type == 'column_card'\">\n                <button\n                    mat-menu-item\n                    *ngIf=\"params.column.type != Variable.Type.CONTINUOUS && extendedActions\"\n                    (click)=\"treatAs(Variable.Type.CONTINUOUS)\"\n                    [wt1Click]=\"'worksheets_treat-as'\"\n                    [qa]=\"{'eda-card-menu-item': {action: 'treat-as', as: 'numerical'}}\"\n                >\n                    Treat {{ params.column.name }} as continuous\n                </button>\n                <button\n                    mat-menu-item\n                    *ngIf=\"params.column.type != Variable.Type.CATEGORICAL && extendedActions\"\n                    (click)=\"treatAs(Variable.Type.CATEGORICAL)\"\n                    [wt1Click]=\"'worksheets_treat-as'\"\n                    [qa]=\"{'eda-card-menu-item': {action: 'treat-as', as: 'categorical'}}\"\n                >\n                    Treat {{ params.column.name }} as categorical\n                </button>\n            </ng-container>\n            <button\n                mat-menu-item\n                *ngIf=\"extendedActions\"\n                (click)=\"addCard()\"\n                [wt1Click]=\"'worksheets_duplicate-card'\"\n                [qa]=\"{'eda-card-menu-item': {action: 'duplicate'}}\"\n            >\n                Duplicate as new card\n            </button>\n            <button\n                mat-menu-item\n                *ngIf=\"extendedActions\"\n                (click)=\"debugCard()\"\n                [qa]=\"{'eda-card-menu-item': {action: 'view-json'}}\"\n            >\n                View JSON…\n            </button>\n            <button\n                mat-menu-item\n                *ngIf=\"extendedActions\"\n                [qa]=\"{'eda-card-menu-item': {action: 'publish'}}\"\n                [wt1Click]=\"'worksheets_publish-card'\"\n                (click)=\"publish()\"\n            >\n                Publish…\n            </button>\n        </ng-template>\n    </mat-menu>\n</ng-container>\n","import { Component, Input, EventEmitter, Output, ChangeDetectionStrategy, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { Card, Variable, isCorrelationMatrixCard, CorrelationMatrixCard, isPCACard, PCACard, ColumnCard, isColumnCard, isNumericalHistogramCard } from 'src/generated-sources';\nimport { ModalsService, ModalShape } from '@shared/modals/modals.service';\nimport { CardActionType, CardAction } from '@features/eda/worksheet/cards/events';\nimport { DeleteDialogComponent } from '../../delete-dialog/delete-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { HeatmapConfigComponent } from '../config/heatmap-config/heatmap-config.component';\nimport _ from 'lodash';\nimport { EditCardModalComponent, EditCardModalComponentInput } from '../../card-wizard/edit-card-modal/edit-card-modal.component';\nimport produce from 'immer';\nimport { getBasicCardTitle } from '@features/eda/card-utils';\n\n\n@Component({\n    selector: 'card-menu',\n    templateUrl: './card-menu.component.html',\n    styleUrls: [\n        '../../../shared-styles/menu-button.less',\n        './card-menu.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardMenuComponent {\n    @Input() params: Card;\n    @Input() columnParams?: ColumnCard; // only if the card is a child of a ColumnCard\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Input() deletable: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    projectKey: string;\n    datasetName: string;\n    menuActive = false;\n\n    Variable = Variable;\n\n    constructor(\n        private modalsService: ModalsService,\n        private dialog: MatDialog,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n    }\n\n    get hasConfigureCardModal(): boolean {\n        if (isColumnCard(this.params)) {\n            // \"Treat as\" actions are menu items (there is no modal)\n            return false;\n        }\n        if (isNumericalHistogramCard(this.params)) {\n            // Box plot is not configurable\n            return !!this.params.showHistogram;\n        }\n        return true;\n    }\n\n    get hasConfigureVisualizationModal(): boolean {\n        return isCorrelationMatrixCard(this.params) || isPCACard(this.params);\n    }\n\n    get removalText(): string {\n        return isColumnCard(this.params) ? 'Remove' : 'Delete';\n    }\n\n    get showMenu() {\n        return !this.readOnly && this.params && !(this.params.type === 'column_card' && !this.extendedActions)\n    }\n\n    get showExtendedMenu() {\n        return this.hasConfigureVisualizationModal || this.extendedActions;\n    }\n\n    handleDelete() {\n        const dialogRef = this.dialog.open(DeleteDialogComponent, {\n            data: {\n                title: isColumnCard(this.params) ? this.params.column.name : getBasicCardTitle(this.params),\n                type: this.params.type\n            },\n            restoreFocus: false,\n            panelClass: ['modal', 'modal3', 'dku-modal-panel-narrow']\n        });\n\n        dialogRef.afterClosed().subscribe((deleteCard: boolean) => {\n            if (deleteCard) {\n                this.action.emit({ type: CardActionType.DELETE });\n            }\n        });\n    }\n\n    configureCard() {\n        this.menuActive = true;\n\n        this.modalsService.open(EditCardModalComponent,\n            {\n                params: this.params,\n                columnParams: this.columnParams\n            } as EditCardModalComponentInput,\n            ModalShape.NONE,\n            this.viewContainerRef,\n            { restoreFocus: false }\n        ).then(({ card, updateSiblings }) => {\n            this.menuActive = false;\n            this.updateCard(card, updateSiblings);\n        }, () => {\n            this.menuActive = false;\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    configureVisualization() {\n        if (isCorrelationMatrixCard(this.params) || isPCACard(this.params)) {\n            this.modalsService.open(HeatmapConfigComponent, { params: this.params.heatmapParams },\n                ModalShape.NARROW, this.viewContainerRef)\n                .then((heatmapParams) => {\n                    // these second typeguards are imposed by TS.\n                    if (isCorrelationMatrixCard(this.params) || isPCACard(this.params)) {\n                        let card: CorrelationMatrixCard | PCACard = _.cloneDeep(this.params);\n                        card.heatmapParams = heatmapParams;\n                        this.updateCard(card, false);\n                    }\n                }, () => { });\n        }\n\n    }\n\n    updateCard(card: Card, updateSiblings: boolean) {\n        this.action.emit({ type: CardActionType.UPDATE, newParams: card, updateSiblings });\n    }\n\n    addCard() {\n        this.action.emit({ type: CardActionType.ADD, card: this.params });\n    }\n\n    publish() {\n        this.action.emit({ type: CardActionType.PUBLISH, card: this.params });\n    }\n\n    treatAs(type: Variable.Type) {\n        if (this.params.type === 'column_card') {\n            const newCard = produce(this.params, draft => {\n                draft.column.type = type;\n            });\n            this.updateCard(newCard, false);\n        }\n    }\n\n    debugCard() {\n        this.action.emit({ type: CardActionType.DEBUG, card: this.params })\n    }\n}\n","<span *ngIf=\"readOnly; else splitByEditable\">\n    <span *ngIf=\"splitBy?.groupingColumn\">split by </span>\n    <span [ngClass]=\"{'card__header-split--active': !!splitBy?.groupingColumn }\"\n        class=\"split-by__text\">\n        {{ splitBy?.groupingColumn ? splitBy?.groupingColumn.name : '' }}\n    </span>\n</span>\n<ng-template #splitByEditable>\n    <span [dkuPopoverTrigger]=\"splitByMenu\"\n        [qa]=\"'eda-split-by-menu'\"\n        [wt1Click]=\"'worksheets_split-button'\"\n        >\n        <span *ngIf=\"splitBy?.groupingColumn\">split by </span>\n        <span class=\"split-by__text\" [ngClass]=\"{'card__header-split--active': !!splitBy?.groupingColumn }\">\n            {{ splitBy?.groupingColumn ? splitBy?.groupingColumn.name : 'No split' }}\n        </span>\n        <i class=\"icon-sort-down split-by__arrow\"></i>\n    </span>\n    <dku-popover #splitByMenu>\n        <div class=\"dkuform-horizontal\" [qa]=\"'eda-split-by-popover'\">\n            <form\n                [formGroup]=\"form\"\n                (ngSubmit)=\"save()\"\n            >\n                <div class=\"control-group\">\n                    <label class=\"control-label control-dropdown-label\">Split by</label>\n                    <div class=\"controls\">\n                        <single-variable-selector [variables]=\"variables$ | async\" [noVariableLabel]=\"'No split'\" [noneSelectedText]=\"'No split'\" formControlName=\"selectedVariable\"></single-variable-selector>\n                    </div>\n                </div>\n                <binning-config formControlName=\"binningConfig\" [isCategorical]=\"isCategorical\"\n                    *ngIf=\"form.controls.selectedVariable.value\">\n                </binning-config>\n                <div class=\"control-group\" *ngIf=\"form.controls.selectedVariable.value && allowGroupAll && form.controls.groupWithAll.enabled\">\n                    <label>\n                        <input\n                            formControlName=\"groupWithAll\"\n                            class=\"form__checkbox\"\n                            type=\"checkbox\"\n                        >\n                        Show additional group for all values\n                    </label>\n                </div>\n                <div class=\"split-by__button pull-right\">\n                    <button\n                        class=\"btn btn--primary\"\n                        [qa]=\"'eda-split-by-save-button'\"\n                        [disabled]=\"form.invalid\"\n                        (click)=\"save()\"\n                    >\n                        Save\n                    </button>\n                </div>\n            </form>\n        </div>\n    </dku-popover>\n</ng-template>\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { SplitBySpec, Variable, BinningMode } from 'src/generated-sources';\nimport { ChangeDetectionStrategy } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { DkuPopoverComponent } from '@app/widgets/dropdowns/dku-popover/dku-popover.component';\nimport { toggleFormControl } from '@utils/toggle-form-control';\nimport { CardWizardVariable } from '@features/eda/card-models';\nimport { SampleContextService } from '@features/eda/sample-context.service';\nimport { DEFAULT_SPLIT_BY_SPEC } from '@utils/dss-defaults';\n\n\n@Component({\n    selector: 'split-by-settings',\n    templateUrl: './split-by-settings.component.html',\n    styleUrls: [\n        '../../shared-styles/forms.less',\n        './split-by-settings.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SplitBySettingsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() splitBy: SplitBySpec | null;\n    @Input() allowGroupAll = true;\n    @Input() readOnly: boolean;\n    @Output() splitByChange = new EventEmitter<SplitBySpec | null>();\n    @ViewChild('splitByMenu') popover: DkuPopoverComponent;\n\n    variables$: Observable<Variable[]>;\n\n    form: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        private sampleContextService: SampleContextService\n    ) {\n        const selectedVariableControl = this.fb.control(null);\n        const enableFunction = (variable: CardWizardVariable | null) => !!variable;\n\n        this.form = this.fb.group({\n            selectedVariable: selectedVariableControl,\n            binningConfig: toggleFormControl(this.fb.control(null, [Validators.required]), selectedVariableControl, enableFunction, () => { this.patchBinningConfig(); }),\n            groupWithAll: toggleFormControl(this.fb.control(null), selectedVariableControl, enableFunction, () => { this.patchGroupWithAll(); })\n        });\n    }\n\n    ngOnInit() {\n        this.variables$ = this.sampleContextService.availableVariables();\n    }\n\n    patchBinningConfig(): void {\n        this.form.patchValue({\n            binningConfig: this.splitBy ? {\n                maxValues: this.splitBy.maxValues,\n                groupWithOthers: this.splitBy.groupWithOthers,\n                binningMode: this.splitBy.binningMode,\n                customBinningBoundaries: this.splitBy.customBinningBoundaries,\n            } : {...DEFAULT_SPLIT_BY_SPEC},\n        });\n    }\n\n    patchGroupWithAll(): void {\n        this.form.patchValue({\n            groupWithAll: this.splitBy ? this.splitBy.groupWithAll : true,\n        });\n\n    }\n\n    patchForm(): void {\n        this.form.patchValue({\n            selectedVariable: this.splitBy ? {\n                ...this.splitBy.groupingColumn\n            } : null,\n\n            binningConfig: this.splitBy ? {\n                maxValues: this.splitBy.maxValues,\n                groupWithOthers: this.splitBy.groupWithOthers,\n                binningMode: this.splitBy.binningMode,\n                customBinningBoundaries: this.splitBy.customBinningBoundaries,\n            } : {...DEFAULT_SPLIT_BY_SPEC},\n\n            groupWithAll: this.splitBy ? this.splitBy.groupWithAll : true,\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.splitBy) {\n            this.patchForm();\n        }\n    }\n\n    save() {\n        if (this.form.valid) {\n            this.changeSplitByColumn();\n        }\n\n        this.popover.hide();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    changeSplitByColumn() {\n        const form = this.form.value;\n\n        if (form.selectedVariable) {\n            this.splitByChange.next({\n                groupingColumn: form.selectedVariable,\n                maxValues: form.binningConfig.maxValues,\n                groupWithOthers: form.binningConfig.groupWithOthers,\n                binningMode: form.binningConfig.binningMode,\n                customBinningBoundaries: form.binningConfig.customBinningBoundaries,\n                groupWithAll: this.allowGroupAll && form.groupWithAll\n            });\n        } else {\n            this.splitByChange.next(null);\n        }\n    }\n\n    get isCategorical(): boolean {\n        return this.form.value.selectedVariable ? this.form.value.selectedVariable.type === Variable.Type.CATEGORICAL : false;\n    }\n}\n","<ng-container *ngIf=\"displayedResults && displayedParams\">\n    <div\n        class=\"h100\"\n        [qa]=\"{'eda-card-body': {'id': params.id,'type': params.type}}\"\n        *ngIf=\"!displayOverlay && displayedResults.type == 'unavailable'; else availableBody\"\n    >\n        <unavailable-card-body [results]=\"displayedResults\" [params]=\"displayedParams\"></unavailable-card-body>\n    </div>\n    <ng-template #availableBody>\n        <ng-container *ngIf=\"displayedParams.type == displayedResults.type\" [ngSwitch]=\"displayedParams.type\">\n            <div [qa]=\"{'eda-card-body': {id: params.id, type: params.type}}\" class=\"h100\">\n                <categorical-histogram-card-body *ngSwitchCase=\"'categorical_histogram'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" [hasFixedHeight]=\"hasFixedHeight\"\n                    (action)=\"propagateAction($event)\">\n                </categorical-histogram-card-body>\n\n                <ks-test-2samp-card-body *ngSwitchCase=\"'ks_test_2samp'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </ks-test-2samp-card-body>\n\n                <generic-nsamp-test-card-body *ngSwitchCase=\"'mood_nsamp'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </generic-nsamp-test-card-body>\n\n                <tztest1-samp-card-body *ngSwitchCase=\"'ttest_ztest_1samp'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </tztest1-samp-card-body>\n\n                <sign-test1-samp-card-body *ngSwitchCase=\"'sign_test_1samp'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </sign-test1-samp-card-body>\n\n                <generic-nsamp-test-card-body *ngSwitchCase=\"'ttest_2samp'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </generic-nsamp-test-card-body>\n\n                <generic-nsamp-test-card-body *ngSwitchCase=\"'mood_test_2samp'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </generic-nsamp-test-card-body>\n\n                <generic-nsamp-test-card-body *ngSwitchCase=\"'oneway_anova'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </generic-nsamp-test-card-body>\n\n                <generic-pairwise-test-card-body *ngSwitchCase=\"'pairwise_ttest'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </generic-pairwise-test-card-body>\n\n                <generic-pairwise-test-card-body *ngSwitchCase=\"'pairwise_mood'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </generic-pairwise-test-card-body>\n\n                <numerical-histogram-card-body *ngSwitchCase=\"'numerical_histogram'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" [hasFixedHeight]=\"hasFixedHeight\"\n                    (action)=\"propagateAction($event)\">\n                </numerical-histogram-card-body>\n\n                <generic-summary-stats-card-body *ngSwitchCase=\"'univariate_summary'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </generic-summary-stats-card-body>\n\n                <shapiro-normality-test-card-body *ngSwitchCase=\"'shapiro'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </shapiro-normality-test-card-body>\n\n                <quantiles-table-card-body *ngSwitchCase=\"'quantile_table'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </quantiles-table-card-body>\n\n                <univariate-frequency-table-card-body *ngSwitchCase=\"'univariate_frequency_table'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </univariate-frequency-table-card-body>\n\n                <bivariate-histogram-card-body *ngSwitchCase=\"'bivariate_histogram'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" [hasFixedHeight]=\"hasFixedHeight\"\n                    (action)=\"propagateAction($event)\">\n                </bivariate-histogram-card-body>\n\n                <bivariate-box-plot-card-body *ngSwitchCase=\"'bivariate_box_plot'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" [hasFixedHeight]=\"hasFixedHeight\"\n                    (action)=\"propagateAction($event)\">\n                </bivariate-box-plot-card-body>\n\n                <scatter-plot-card-body *ngSwitchCase=\"'scatter_plot'\" class=\"header-stat-card\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" [hasFixedHeight]=\"hasFixedHeight\" (action)=\"propagateAction($event)\">\n                </scatter-plot-card-body>\n\n                <mosaic-plot-card-body *ngSwitchCase=\"'mosaic_plot'\" class=\"header-stat-card\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" [hasFixedHeight]=\"hasFixedHeight\" (action)=\"propagateAction($event)\">\n                </mosaic-plot-card-body>\n\n                <generic-summary-stats-card-body *ngSwitchCase=\"'bivariate_summary'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </generic-summary-stats-card-body>\n\n                <bivariate-frequency-table-card-body *ngSwitchCase=\"'bivariate_frequency_table'\" class=\"header-stat-card\"\n                    [params]=\"displayedParams\" [results]=\"displayedResults\" [isTopLevel]=\"isTopLevel\"\n                    (action)=\"propagateAction($event)\">\n                </bivariate-frequency-table-card-body>\n\n                <fit-2d-distribution-card-body *ngSwitchCase=\"'fit_2d_distribution'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" [hasFixedHeight]=\"hasFixedHeight\" (action)=\"propagateAction($event)\">\n                </fit-2d-distribution-card-body>\n\n                <header-card-body *ngSwitchCase=\"'univariate_header'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" [readOnly]=\"readOnly\" [extendedActions]=\"extendedActions\" (action)=\"propagateAction($event)\">\n                </header-card-body>\n\n                <header-card-body *ngSwitchCase=\"'bivariate_header'\" [params]=\"displayedParams\" [results]=\"displayedResults\"\n                    [readOnly]=\"readOnly\" [extendedActions]=\"extendedActions\" (action)=\"propagateAction($event)\">\n                </header-card-body>\n\n                <fit-distribution-card-body *ngSwitchCase=\"'fit_distribution'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </fit-distribution-card-body>\n\n                <chi2-ind-test-card-body *ngSwitchCase=\"'chi2_independence_test'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" (action)=\"propagateAction($event)\">\n                </chi2-ind-test-card-body>\n\n                <fit-curve-card-body *ngSwitchCase=\"'fit_curve'\" [params]=\"displayedParams\" [results]=\"displayedResults\"\n                    (action)=\"propagateAction($event)\">\n                </fit-curve-card-body>\n\n                <correlation-matrix-card-body *ngSwitchCase=\"'correlation_matrix'\" [params]=\"displayedParams\"\n                    [results]=\"displayedResults\" [readOnly]=\"readOnly\" (action)=\"propagateAction($event)\">\n                </correlation-matrix-card-body>\n\n                <pca-card-body *ngSwitchCase=\"'pca'\" [params]=\"displayedParams\" [results]=\"displayedResults\"\n                    [readOnly]=\"readOnly\" (action)=\"propagateAction($event)\">\n                </pca-card-body>\n\n                <ng-container *ngSwitchDefault>\n                    NOT IMPLEMENTED: {{ displayedParams.type }}\n                </ng-container>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"displayedResults.type == 'groups'\">\n            <ng-container [ngSwitch]=\"displayedParams.type\">\n                <!-- Card has a custom/special grouped layout -->\n                <ng-container *ngSwitchCase=\"'univariate_header'\">\n                    <grouped-header-card-body [params]=\"displayedParams\" [results]=\"displayedResults\" [readOnly]=\"readOnly\" [extendedActions]=\"extendedActions\" (action)=\"propagateAction($event)\">\n                    </grouped-header-card-body>\n                </ng-container>\n\n                <ng-container *ngSwitchCase=\"'bivariate_header'\">\n                    <grouped-header-card-body [params]=\"displayedParams\" [results]=\"displayedResults\" [readOnly]=\"readOnly\" [extendedActions]=\"extendedActions\" (action)=\"propagateAction($event)\">\n                    </grouped-header-card-body>\n                </ng-container>\n\n                <!-- Most cards are using the generic grouped layout -->\n                <grouped-card-body *ngSwitchDefault [params]=\"displayedParams\" [results]=\"displayedResults\"\n                    [isTopLevel]=\"true\" [readOnly]=\"readOnly\" [extendedActions]=\"extendedActions\"[hasFixedHeight]=\"hasFixedHeight\" (action)=\"propagateAction($event)\"></grouped-card-body>\n            </ng-container>\n        </ng-container>\n\n        <div *ngFor=\"let warning of distinctWarnings; trackBy: trackByIndex\" class=\"alert alert-warning\">\n            <i class=\"icon-warning-sign\"></i>\n            {{ warning }}\n        </div>\n    </ng-template>\n    <div class=\"overlay\" *ngIf=\"displayOverlay\">\n        <div>\n            <span class=\"dku-loader icon-spin card-spinner\"></span>\n        </div>\n    </div>\n</ng-container>\n","import { Component, EventEmitter, Output, Input, OnInit, OnChanges, SimpleChanges, ChangeDetectionStrategy, ViewChild, ElementRef, OnDestroy, Optional } from '@angular/core';\nimport { Card, CardResult } from 'src/generated-sources';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\nimport deepEqual from 'fast-deep-equal';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { BehaviorSubject, asyncScheduler } from 'rxjs';\nimport { combineLatestObject } from 'dku-frontend-core';\nimport { subscribeOn } from 'rxjs/operators';\nimport { isFullyComputed } from '@features/eda/card-utils';\nimport { WorksheetContextService } from '@features/eda/worksheet-state/worksheet.context.service';\n\n@UntilDestroy()\n@Component({\n    selector: 'card-body',\n    templateUrl: './card-body.component.html',\n    styleUrls: [\n        '../../../shared-styles/card-spinner.less',\n        './card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardBodyComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() results: CardResult;\n    @Input() params: Card;\n    @Input() isTopLevel = false;\n    @Input() readOnly: boolean;\n    @Input() cardKey: string | undefined;\n    @Input() extendedActions: boolean;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    displayedResults$ = new BehaviorSubject<CardResult | undefined>(undefined);\n    displayedParams$ = new BehaviorSubject<Card | undefined>(undefined);\n    displayOverlay = false;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        @Optional() private worksheetContextService: WorksheetContextService\n    ) { }\n\n    get displayedResults() {\n        return this.displayedResults$.value;\n    }\n\n    get displayedParams() {\n        return this.displayedParams$.value;\n    }\n\n    ngOnInit() {\n        this.updateDisplayedState();\n\n        if (this.worksheetContextService) {\n            combineLatestObject({\n                focusedCardId: this.worksheetContextService.getFocusedCardId(),\n                displayedParams: this.displayedParams$,\n                displayedResults: this.displayedResults$\n            }).pipe(subscribeOn(asyncScheduler), untilDestroyed(this))\n                .subscribe(({ focusedCardId, displayedParams, displayedResults }) => {\n                    // Check if results are available and the current card is focused\n                    if (displayedParams && displayedParams.id === focusedCardId\n                        && displayedResults && isFullyComputed(displayedResults)) {\n                        // Scroll to the card\n                        this.elementRef.nativeElement.scrollIntoView();\n                        // Clear focused card once scrolled into\n                        this.worksheetContextService.resetFocusedCardTransition();\n                    }\n                });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results || changes.params) {\n            this.updateDisplayedState();\n        }\n    }\n\n    propagateAction(event: CardAction) {\n        if (!this.displayOverlay) {\n            this.action.emit(event);\n        }\n    }\n\n    trackByIndex(index: number) {\n        return index;\n    }\n\n    ngOnDestroy() {\n    }\n\n    updateDisplayedState() {\n        if (this.results.type === 'unavailable'\n            && this.results.reason === CardResult.UnavailabilityReason.NOT_COMPUTED\n            && this.displayedResults\n            && this.displayedResults.type !== 'unavailable') {\n            // Results are not available => display an overlay on top of the previous state\n            this.displayOverlay = true;\n        } else {\n            // Results are available => hide the overlay to show them\n            this.displayOverlay = false;\n\n            if (this.hasPossiblyChanged(this.displayedParams, this.params)) {\n                // Keep propagating the old reference if the params or results have not changed\n                // This avoids refreshing cards which have not been changed at all, especially\n                // if they contain expensive widgets like charts\n                this.displayedParams$.next(this.params);\n            }\n            if (this.hasPossiblyChanged(this.displayedResults, this.results)) {\n                // Same\n                this.displayedResults$.next(this.results);\n            }\n        }\n    }\n\n    hasPossiblyChanged(oldState: Card | CardResult | undefined, newState: Card | CardResult) {\n        if (oldState === newState) {\n            return false;\n        }\n        if (!oldState || oldState.type !== newState.type) {\n            return true;\n        }\n        switch (oldState.type) {\n            // Do not deep-check \"container-like\" cards/results because this is expensive\n            // and useless: leaf cards are recursively checked anyway\n            case 'bivariate_header':\n            case 'univariate_header':\n            case 'column_card':\n            case 'groups':\n                return true;\n        }\n        return !deepEqual(oldState, newState);\n    }\n\n    get distinctWarnings(): string[] {\n        if (!this.displayedResults || !this.displayedResults.warnings) {\n            return [];\n        }\n        return Array.from(new Set(this.displayedResults.warnings));\n    }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Injectable, OnDestroy, RendererFactory2 } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n\n@UntilDestroy()\n@Injectable({\n    providedIn: 'root'\n})\nexport class QaModeService implements OnDestroy {\n    // Enabled when DSS is running in Selenium\n    private enabled$ = new BehaviorSubject(false);\n\n    constructor(rendererFactory2: RendererFactory2) {\n        // Make toggleQaMode() globally available (called by Selenium test suite)\n        (window as any).toggleQaMode = (flag: boolean) => this.enabled$.next(!!flag);\n\n        // Create a new renderer (it cannot be injected)\n        const renderer = rendererFactory2.createRenderer(document.body, null);\n\n        this.enabled$\n            .pipe(distinctUntilChanged(), untilDestroyed(this))\n            .subscribe((flag) => {\n                if (flag) {\n                    console.warn('QA mode is enabled (Selenium)');\n                }\n\n                // Disable Angular 2+ animations\n                renderer.setProperty(document.body, '@.disabled', flag);\n\n                // Add a CSS selector on body to enable/disable custom animations\n                if (flag) {\n                    document.body.classList.add('qa-mode-enabled');\n                    document.body.classList.remove('qa-mode-disabled');\n                } else {\n                    document.body.classList.remove('qa-mode-enabled');\n                    document.body.classList.add('qa-mode-disabled');\n                }\n            });\n\n        // Enable QA mode by default if a special cookie is present\n        if (/\\bdisable_dku_fancy=true\\b/.test(document.cookie)) {\n            this.enabled$.next(true);\n        }\n    }\n\n    ngOnDestroy() {\n    }\n\n    isQaEnabled() {\n        return this.enabled$.pipe(distinctUntilChanged());\n    }\n}\n","import { AsyncPipe } from '@angular/common';\nimport { PipeTransform, Pipe, ChangeDetectorRef } from '@angular/core';\nimport { of, BehaviorSubject, Observable, combineLatest } from 'rxjs';\nimport { delay, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { QaModeService } from '@shared/directives/qa-mode/qa-mode.service';\n\n/**\n * This pipe can delay propagation of information in an Angular expression:\n * - Falsy values are delayed by 'delayInMs'\n * - Truthy values are forwarded transparently\n * - Initial value is always forwared transparently\n * - Delay is always disabled in QA mode (Selenium)\n *\n * Use case:\n *\n * Prevent a component from being destroy during :leave animation. Even if Angular doesn't clear the\n * DOM immediately, destroying a component can have side-effects (eg. echarts are cleared)\n *\n * This is a known Angular issue: https://github.com/angular/angular/issues/19826\n *\n * Usage:\n *\n * <div [@fadeInOut]=\"condition ? 'opened' : 'closed'\">\n *     <div *ngIf=\"condition | delayWhenFalse: 200\">\n *         <!--\n *              destroyed 200ms later so that opened->closed\n *              transition has enough time to complete\n *         -->\n *     </div>\n * </div>\n */\n@Pipe({\n    name: 'delayWhenFalse',\n    pure: false,\n})\nexport class DelayWhenFalsePipe extends AsyncPipe implements PipeTransform {\n    inputValue$ = new BehaviorSubject<any>(undefined);\n    delayInMs: number;\n    pipeValue$: Observable<any>;\n\n    constructor(cdRef: ChangeDetectorRef, qaModeService: QaModeService) {\n        super(cdRef);\n\n        this.pipeValue$ = combineLatest([\n            this.inputValue$.pipe(distinctUntilChanged()),\n            qaModeService.isQaEnabled()\n        ]).pipe(\n            switchMap(([value, qaMode], index) => (value || index === 0 || qaMode) ? of(value) : delay(this.delayInMs)(of(value)))\n        );\n    }\n\n    transform(value: any, delayInMs: number = 200) {\n        this.delayInMs = delayInMs;\n        this.inputValue$.next(value);\n        return super.transform(this.pipeValue$);\n    }\n}\n","<drag-scroll [dragEnabled]=\"params.type === 'univariate_header' || params.type === 'bivariate_header'\">\n    <div [id]=\"params.id\" class=\"card\"\n        [qa]=\"{'top-level-card': {id: params.id, type: params.type}}\"\n        *ngIf=\"cardCollapseState$ | async as cardCollapseState\">\n        <div class=\"card__inner vertical-flex\" *ngIf=\"helpCollapseState$ | async as helpCollapseState\">\n            <div class=\"card__header horizontal-flex\">\n                <div class=\"card__header-content\" cdkDragHandle>\n                    <h4 class=\"card__header-text\">\n                        <span (click)=\"toggleCard(!cardCollapseState.collapsed)\">\n                        <i *ngIf=\"showCollapsingControls\"\n                            \n                            class=\"icon-chevron-right chevron\"\n                            [class.chevron--collapsed]=\"cardCollapseState.collapsed\"\n                        ></i>\n                        &nbsp;\n                        {{ params | cardTitle: 'full' }}\n                        </span>\n                    </h4>\n    \n                    <div class=\"card__header-sub\">\n                        <span *ngIf=\"params.filter\" class=\"filter__title\" matTooltip=\"Filtered on {{ params.filter | filterName }}\">\n                            {{ params.filter | filterName }}\n                        </span>\n    \n                        <button\n                            *ngIf=\"showCollapsingControls && !cardCollapseState.collapsed && (helpIsAvailable$ | async)\"\n                            class=\"btn btn--icon btn--secondary help-button\"\n                            [qa]=\"'eda-card-help-toggle'\"\n                            [class.help-button--closed]=\"helpCollapseState.collapsed\"\n                            (click)=\"toggleHelp(!helpCollapseState.collapsed)\"\n                            [matTooltip]=\"helpCollapseState.collapsed ? 'Show help': 'Hide help'\">\n                            <i class=\"icon-dku-help\"></i>\n                        </button>\n    \n                        <!-- \"Split by\" is not possible on PCA card -->\n                        <ng-container *ngIf=\"!params.filter && params.type !== 'pca'\">\n                            <split-by-settings [splitBy]=\"params.splitBy\"\n                                (splitByChange)=\"changeSplitBy($event)\" [readOnly]=\"readOnly || cardCollapseState.collapsed\"\n                                [allowGroupAll]=\"true\"></split-by-settings>\n                        </ng-container>\n    \n                        <!-- PCA card has a special \"Group by\" menu which doesn't split the card -->\n                        <ng-container *ngIf=\"params.type === 'pca'\">\n                            <split-by-settings [splitBy]=\"params.groupBy\"\n                                [readOnly]=\"readOnly || cardCollapseState.collapsed\" (splitByChange)=\"changeGroupBy($event)\"\n                                [allowGroupAll]=\"false\"></split-by-settings>\n                        </ng-container>\n                    </div>\n    \n                    <card-menu class=\"pull-right\" [params]=\"params\" [readOnly]=\"readOnly\" [deletable]=\"true\"\n                            [extendedActions]=\"extendedActions\" (action)=\"handleAction($event)\"></card-menu>\n                    <div class=\"card__header-subtitle\" *ngIf=\"subtitle\">\n                        {{ subtitle }}\n                    </div>\n                </div>\n            </div>\n            <div [@fadeInOut]=\"cardCollapseState.collapsed ? 'closed' : 'opened'\">\n                <ng-container *ngIf=\"!cardCollapseState.collapsed | delayWhenFalse\">\n                    <ng-container *ngIf=\"helpIsAvailable$ | async\">\n                        <div [@fadeInOut]=\"helpCollapseState.collapsed ? 'closed' : 'opened'\">\n                            <div class=\"card__help\">\n                                <card-help\n                                    [params]=\"params\"\n                                    *ngIf=\"!helpCollapseState.collapsed | delayWhenFalse\"\n                                    [readOnly]=\"readOnly\"\n                                    (action)=\"handleAction($event)\"\n                                    [extendedActions]=\"extendedActions\">\n                                </card-help>\n                            </div>\n                        </div>\n                    </ng-container>\n    \n                    <div class=\"card__body\"\n                        [ngClass]=\"{'card__body--header': params.type === 'univariate_header' || params.type === 'bivariate_header'}\">\n                        <card-body\n                            [params]=\"params\"\n                            [results]=\"results\"\n                            [isTopLevel]=\"true\"\n                            [readOnly]=\"readOnly\"\n                            [extendedActions]=\"extendedActions\"\n                            [hasFixedHeight]=\"hasFixedHeight\"\n                            (action)=\"handleAction($event)\">\n                        </card-body>\n                    </div>\n                </ng-container>\n            </div>\n    \n        </div>\n    </div>                \n</drag-scroll>","import { Component, ChangeDetectionStrategy, Output, EventEmitter, Input, OnChanges, SimpleChanges, Inject, ChangeDetectorRef, ViewChild } from '@angular/core';\nimport { Card, Variable, CardResult, SplitBySpec } from 'src/generated-sources';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { CardActionType, CardAction } from '@features/eda/worksheet/cards/events';\nimport { fadeInOutHeight } from '@shared/animations/fade-in-out';\nimport { CollapsingService, CollapsibleTopLevelCard, UpdatableCollapsingService, CollapsibleHelp } from '@features/eda/collapsing.service';\nimport { map, switchMap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeleteDialogComponent } from '../../delete-dialog/delete-dialog.component';\nimport { CardHelpComponent } from '../card-help/card-help.component';\nimport { getCardSubtitle, getBasicCardTitle, noFilterIfAll } from '@features/eda/card-utils';\nimport { DOCUMENT } from '@angular/common';\nimport { SampleContextService } from '@features/eda/sample-context.service';\nimport { CdkDragHandle } from '@angular/cdk/drag-drop';\n\n\n@Component({\n    selector: 'top-level-card',\n    templateUrl: './top-level-card.component.html',\n    styleUrls: ['./top-level-card.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [fadeInOutHeight]\n})\nexport class TopLevelCardComponent implements OnChanges {\n    @Input() params: Card;\n    @Input() results: CardResult;\n    @Input() readOnly: boolean;\n    @Input() extendedActions = true;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    // Emit the element having the cdkDragHandle directive\n    // so that it can be used by parent component\n    @Output() remoteDragHandle = new EventEmitter<HTMLElement | undefined>(true);\n\n    @ViewChild(CdkDragHandle)\n    set emitRemoteDragHandle(v: CdkDragHandle | undefined) {\n        this.remoteDragHandle.emit(v && v.element.nativeElement);\n    }\n\n    variables$: Observable<Variable[]>;\n    helpIsAvailable$: Observable<boolean>;\n    cardCollapseState$: Observable<{ collapsed: boolean }>;\n    helpCollapseState$: Observable<{ collapsed: boolean }>;\n    params$ = new ReplaySubject<Card>(1);\n\n    showCollapsingControls: boolean;\n    subtitle = '';\n\n    scrollIntoViewOnResult: boolean;\n\n    constructor(\n        sampleContextService: SampleContextService,\n        private dialog: MatDialog,\n        private collapsingService: CollapsingService,\n        @Inject(DOCUMENT) private document: Document,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        this.variables$ = sampleContextService.availableVariables();\n        this.cardCollapseState$ = this.params$.pipe(\n            map(params => new CollapsibleTopLevelCard(params.id)),\n            switchMap(collapsible => collapsingService.watchIsCollapsed(collapsible)),\n            map(collapsed => ({ collapsed }))\n        );\n        this.helpCollapseState$ = this.params$.pipe(\n            map(params => new CollapsibleHelp(params.id)),\n            switchMap(collapsible => collapsingService.watchIsCollapsed(collapsible)),\n            map(collapsed => ({ collapsed }))\n        );\n        this.helpIsAvailable$ = this.params$.pipe(\n            map(params => CardHelpComponent.isAvailableForCard(params))\n        );\n        this.showCollapsingControls = this.collapsingService instanceof UpdatableCollapsingService;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.params$.next(this.params);\n            this.subtitle = getCardSubtitle(this.params);\n        }\n        if (changes.results) {\n            if (this.scrollIntoViewOnResult) {\n                const elem = this.document.getElementById(this.params.id);\n                if (elem) {\n                    // differ to let the updates be performed before scrolling\n                    setTimeout(() => {\n                        elem.scrollIntoView();\n                        this.changeDetectorRef.markForCheck();\n                        if (!CardResult.isUnavailableCardResult(this.results) || this.results.reason != \"NOT_COMPUTED\") {\n                            this.scrollIntoViewOnResult = false;\n                        }\n                    }, 1);\n                }\n            }\n        }\n    }\n\n    deleteCard() {\n        const dialogRef = this.dialog.open(DeleteDialogComponent, {\n            data: {\n                title: getBasicCardTitle(this.params),\n                type: this.params.type\n            },\n            restoreFocus: false,\n            panelClass: ['modal', 'modal3', 'dku-modal-panel-narrow']\n        });\n\n        dialogRef.afterClosed().subscribe((deleteCard: boolean) => {\n            if (deleteCard) {\n                this.action.emit({ type: CardActionType.DELETE });\n            }\n        });\n    }\n\n    changeSplitBy(newSplitBy: SplitBySpec | null) {\n        this.action.emit({\n            type: CardActionType.UPDATE,\n            newParams: { ...this.params, splitBy: newSplitBy }\n        });\n    }\n\n    toggleCard(newIsCollapsed: boolean) {\n        const collapsible = new CollapsibleTopLevelCard(this.params.id);\n        this.collapsingService.setIsCollapsed(collapsible, newIsCollapsed);\n    }\n\n    toggleHelp(newIsCollapsed: boolean) {\n        const collapsible = new CollapsibleHelp(this.params.id);\n        this.collapsingService.setIsCollapsed(collapsible, newIsCollapsed);\n    }\n\n    handleAction(action: CardAction) {\n        if (action.type === CardActionType.DEBUG || action.type === CardActionType.ADD) {\n            let card = action.card;\n            if (this.params.filter) {\n                card = { ...card, filter: this.params.filter };\n            }\n            this.action.emit({ ...action, card });\n        } else if (action.type === CardActionType.HIGHLIGHT) {\n            let newFilter = action.filter;\n            if (this.params.filter && action.filter) {\n                // Merge highlight filter + card's filter\n                newFilter = noFilterIfAll({\n                    type: 'and',\n                    filters: [this.params.filter, action.filter]\n                });\n            }\n            this.action.emit({ ...action, filter: newFilter });\n        } else {\n            this.action.emit(action);\n        }\n    }\n\n    changeGroupBy(newGroupBy: SplitBySpec | null) {\n        if (this.params.type === 'pca') {\n            this.action.emit({\n                type: CardActionType.UPDATE,\n                newParams: { ...this.params, groupBy: newGroupBy }\n            });\n        }\n    }\n}\n","<div cdkDropList [cdkDropListDisabled]=\"readOnly\" (cdkDropListDropped)=\"drop($event)\"\n    class=\"ws-cards-drag-boundary\">\n    <div *ngFor=\"let card of params.cards; let cardIndex = index; trackBy: trackByCardId\"\n        cdkDrag cdkDragBoundary=\".ws-cards-drag-boundary\">\n        <ng-container *ngIf=\"isCardCollapsible(card.id) | async as collapsed\">\n            <top-level-card\n                (remoteDragHandle)=\"discoverRemoteDragHandle(cardIndex, $event)\"\n                [params]=\"card\"\n                [results]=\"results.results[cardIndex]\"\n                [readOnly]=\"readOnly\"\n                [extendedActions]=\"true\"\n                [hasFixedHeight]=\"true\"\n                (action)=\"handleTopLevelCardAction(cardIndex, $event)\"\n            >\n            </top-level-card>\n            <ng-container *ngIf=\"!collapsed.v; else collapsedtoplevel\">\n                <div class=\"card card__inner card__header drag-drop-placeholder\" *cdkDragPlaceholder></div>\n            </ng-container>\n            <ng-template #collapsedtoplevel>\n                <div class=\"card card__inner card__header drag-drop-placeholder drag-drop-placeholder--collapsed\" *cdkDragPlaceholder></div>\n            </ng-template>\n        </ng-container>\n    </div>\n</div>","import { Component, Input, EventEmitter, Output, ChangeDetectionStrategy, OnDestroy, ViewChildren, QueryList } from '@angular/core';\nimport { WorksheetRootCard, Card } from 'src/generated-sources';\nimport { CardActionType, CardAction } from '@features/eda/worksheet/cards/events';\nimport { Observable } from 'rxjs';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { produce } from 'immer';\nimport { WorksheetContextService } from '@features/eda/worksheet-state/worksheet.context.service';\nimport { resetCardIds } from '@features/eda/card-utils';\nimport { WT1Service } from '@core/dataiku-wt1/wt1.service';\nimport { CdkDragDrop, CdkDrag, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CollapsingService, CollapsibleTopLevelCard } from '@features/eda/collapsing.service';\nimport { map } from 'rxjs/operators';\n\n@UntilDestroy()\n@Component({\n    selector: 'worksheet-root-card',\n    templateUrl: './worksheet-root-card.component.html',\n    styleUrls: ['./worksheet-root-card.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WorksheetRootCardComponent implements OnDestroy {\n    @Input() params: WorksheetRootCard;\n    @Input() results: WorksheetRootCard.WorksheetRootCardResult;\n    @Input() readOnly = false;\n    @Output() action = new EventEmitter<CardAction>();\n    @ViewChildren(CdkDrag, {}) cdkDragRefs: QueryList<CdkDrag>;\n\n    constructor(\n        private worksheetContextService: WorksheetContextService,\n        private wt1Service: WT1Service,\n        private collapsingService: CollapsingService\n    ) { }\n\n    discoverRemoteDragHandle(index: number, element: HTMLElement | undefined) {\n        const drag = this.cdkDragRefs.toArray()[index];\n        const dragRef = drag && drag._dragRef;\n        dragRef.withHandles(element ? [element] : []);\n    }\n\n    trackByCardId(index: number, card: Card) {\n        return card.id;\n    }\n\n    handleTopLevelCardAction(index: number, action: CardAction) {\n        if (action.type === CardActionType.UPDATE) {\n            this.action.emit({\n                type: CardActionType.UPDATE,\n                newParams: produce(this.params, draft => {\n                    draft.cards[index] = action.newParams;\n                })\n            });\n\n        } else if (action.type === CardActionType.DELETE) {\n            this.action.emit({\n                type: CardActionType.UPDATE,\n                newParams: produce(this.params, draft => {\n                    draft.cards.splice(index, 1);\n                })\n            });\n\n        } else if (action.type === CardActionType.ADD) {\n            this.action.emit({\n                type: CardActionType.ADD,\n                card: resetCardIds(action.card)\n            });\n        } else if (action.type === CardActionType.PUBLISH) {\n            this.action.emit(action);\n        } else if (action.type === CardActionType.DEBUG) {\n            this.worksheetContextService.debugCard(action.card);\n        } else if (action.type === CardActionType.HIGHLIGHT) {\n            this.wt1Service.event('statistics-worksheet-highlight-toggle', {\n                highlightEnabled: !!action.filter,\n                highlightType: action.filter && action.filter.type\n            });\n\n            this.action.emit({\n                type: CardActionType.UPDATE,\n                newParams: { ...this.params, highlightFilter: action.filter }\n            });\n        } else if (action.type === CardActionType.REORDER_HEADER_CARD) {\n            this.action.emit(action);\n        }\n    }\n    ngOnDestroy() { }\n\n    drop(event: CdkDragDrop<string[]>) {\n        const newCard = produce(this.params, draft => {\n            moveItemInArray(draft.cards, event.previousIndex, event.currentIndex);\n        });\n        this.action.emit({\n            type: CardActionType.UPDATE,\n            newParams: newCard,\n            immediate: true\n        });\n        this.wt1Service.event('statistics-drag-drop-reorder-cards', {});\n    }\n\n    isCardCollapsible(id: string): Observable<any> {\n        return this.collapsingService.watchIsCollapsed(new CollapsibleTopLevelCard(id))\n        .pipe(\n            untilDestroyed(this),\n            map(v => ({ v }))\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { CurrentRouteService } from '@core/nav/current-route.service';\nimport { ProjectsService as ProjectsServiceDTO } from 'src/generated-sources';\nimport { switchMap, shareReplay } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\nexport interface ProjectSummary {\n    object: ProjectsServiceDTO.UIProject;\n    objectsCounts: any | undefined;\n    timeline: any | undefined;\n    interest: any;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService {\n    public currentProjectSummary$ = this.currentRoute.projectKey$.pipe(\n        switchMap(projectKey => projectKey ?\n            this.DataikuAPI.projects.getSummary(projectKey)\n            : of(undefined)\n        ),\n        shareReplay(1)\n    );\n\n    constructor(\n        private currentRoute: CurrentRouteService,\n        private DataikuAPI: DataikuAPIService\n    ) { }\n}\n","import { Pipe, PipeTransform, ChangeDetectorRef } from '@angular/core';\nimport { Observable, Subscription, ReplaySubject } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport { ProjectsService } from '@shared/services/projects.service';\n\n\n/**\n * Evaluate the string piped to the pipe as a canXXX in UIProject\n *\n * If the string does not match any of them, false is returned. Else, the \n * value of the attribute is returned.\n */\n\n@Pipe({\n    name: 'dkuEvaluatePermissions',\n    pure: false // see https://angular.io/guide/pipes#the-impure-asyncpipe\n})\nexport class DkuEvaluatePermissionsPipe extends AsyncPipe implements PipeTransform {\n    evaluationResult = false;\n    subscription: Subscription;\n    private valueSubject = new ReplaySubject<string>(1);\n    private value$: Observable<boolean>;\n\n    constructor(cdr: ChangeDetectorRef, private projectsService: ProjectsService) {\n        super(cdr);\n        this.value$ = this.valueSubject.asObservable().pipe(\n            distinctUntilChanged(),\n            switchMap((permission: string) => this.projectsService.currentProjectSummary$\n                .pipe(\n                    map((currentProjectSummary) => {\n                        try {\n                            let evaluatedExpr = false;\n                            if (currentProjectSummary && permission in currentProjectSummary.object) {\n                                evaluatedExpr = (currentProjectSummary.object as any)[permission] as boolean;\n                            }\n                            return evaluatedExpr;\n                        } catch (e) {\n                            throw new Error(`Error while evaluating permission '${permission}': ${e}`);\n                        }\n                    })\n                ))\n        );\n    }\n    // takes no args, so second parameter omitted\n    transform(permissionValue: any): any {\n        this.valueSubject.next(permissionValue);\n        return super.transform(this.value$);\n    }\n}\n","<ng-container *ngIf=\"worksheet$ | async as worksheet\">\n    <div class=\"worksheet-header\">\n        <h4\n            class=\"worksheet-header__text\"\n            [matMenuTriggerFor]=\"worksheetMenu\"\n            [qa]=\"'worksheet-menu'\"\n            [wt1Click]=\"'worksheet-click'\"\n        >\n            {{ worksheet.name }}\n            <b class=\"caret\"></b>\n        </h4>\n\n        <mat-menu #worksheetMenu>\n            <ng-template [ngIf]=\"!readOnly\">\n                <button\n                    mat-menu-item\n                    (click)=\"createWorksheet()\"\n                    [wt1Click]=\"'worksheets_new-worksheet'\"\n                    [qa]=\"{'worksheet-menu-item': {action: 'new'}}\"\n                >\n                    <i class=\"icon-file-alt icon-fixed-width-small\"></i> New Worksheet\n                </button>\n                <button\n                    mat-menu-item\n                    (click)=\"renameWorksheet()\"\n                    [wt1Click]=\"'worksheets_rename-worksheet'\"\n                    [qa]=\"{'worksheet-menu-item': {action: 'rename'}}\"\n                >\n                    <i class=\"icon-pencil icon-fixed-width-small\"></i> Rename\n                </button>\n                <button\n                    mat-menu-item\n                    (click)=\"duplicateWorksheet()\"\n                    [wt1Click]=\"'worksheets_duplicate-worksheet'\"\n                    [qa]=\"{'worksheet-menu-item': {action: 'duplicate'}}\"\n                >\n                    <i class=\"icon-copy icon-fixed-width-small\"></i> Duplicate\n                </button>\n                <button\n                    mat-menu-item\n                    (click)=\"deleteWorksheet()\"\n                    [wt1Click]=\"'worksheets_delete-worksheet'\"\n                    [qa]=\"{'worksheet-menu-item': {action: 'delete'}}\"\n                >\n                    <i class=\"icon-trash icon-fixed-width-small\"></i> Delete\n                </button>\n                <mat-divider></mat-divider>\n            </ng-template>\n            <button\n                mat-menu-item\n                *ngFor=\"let listedWorksheet of worksheets$ | async\"\n                (click)=\"changeWorksheet(listedWorksheet.id)\"\n                [qa]=\"{'worksheet-menu-item': {\n                    action: 'select-worksheet',\n                    id: listedWorksheet.id,\n                    name: listedWorksheet.name\n                }}\"\n            >\n                <i\n                    class=\"icon-ok\"\n                    *ngIf=\"worksheet.id === listedWorksheet.id\"\n                ></i>\n                {{ listedWorksheet.name }}\n            </button>\n        </mat-menu>\n\n        <sample-settings\n            *ngIf=\"dataSpec$ | async as dataSpec\"\n            [dataSpec]=\"dataSpec\"\n            [projectKey]=\"worksheet.projectKey\"\n            [readOnly]=\"readOnly\"\n            (dataSpecChange)=\"updateDataSpec($event)\"\n        >\n        </sample-settings>\n\n        <edit-confidence-level-settings\n            *ngIf=\"rootCardParams$ | async as rootCardParams\"\n            [params]=\"rootCardParams\"\n            (action)=\"handleRootCardAction($event)\"\n            [canSave]=\"!readOnly\"\n        >\n        </edit-confidence-level-settings>\n\n        <highlight-settings\n            [params]=\"rootCardParams\"\n            (action)=\"handleRootCardAction($event)\"\n            [readOnly]=\"readOnly\"\n            *ngIf=\"rootCardParams$ | async as rootCardParams\">\n        </highlight-settings>\n\n        <container-settings\n            *ngIf=\"dataSpec$ | async as dataSpec\"\n            [dataSpec]=\"dataSpec\"\n            [readOnly]=\"readOnly\"\n            (dataSpecChange)=\"updateDataSpec($event)\">\n        </container-settings>\n\n        <div class=\"worksheet-header__buttons pull-right\" *ngIf=\"'canWriteProjectContent' | dkuEvaluatePermissions\">\n            <button\n                class=\"btn btn--primary\"\n                (click)=\"openAnalysisModal()\"\n                [wt1Click]=\"'worksheets_new-card'\"\n                [qa]=\"'eda-create-card-button'\"\n            >\n                + New Card\n                <ng-container #modal></ng-container>\n            </button>\n        </div>\n    </div>\n\n    <drag-scroll [dragEnabled]=\"true\" [height]=\"'calc(100% + -40px)'\">\n        <div class=\"worksheet\">\n            <div class=\"worksheet__content\">\n                <dataset-error-cta \n                    [apiError]=\"error$ | async\" \n                    [datasetFullInfo]=\"datasetFullInfo$ | async\"\n                ></dataset-error-cta>\n                <ng-container *ngIf=\"rootCardParams$ | async as rootCardParams\">\n                    <worksheet-root-card\n                        [params]=\"rootCardParams$ | async\"\n                        [results]=\"rootCardResults$ | async\"\n                        [readOnly]=\"!('canWriteProjectContent' | dkuEvaluatePermissions)\"\n                        (action)=\"handleRootCardAction($event)\"\n                        *ngIf=\"rootCardParams.cards.length > 0 else noCards\"\n                    >\n                    </worksheet-root-card>\n                    <ng-template #noCards>\n                        <div class=\"empty-list-cta\">\n                            <h1>Empty worksheet</h1>\n                            <a (click)=\"openAnalysisModal()\" class=\"btn btn--primary btn--large btn--dataset\" \n                                [wt1Click]=\"'worksheets_first-card'\" *ngIf=\"'canWriteProjectContent' | dkuEvaluatePermissions\">\n                                <span class=\"plus-icon\">+</span> Add a new card\n                            </a>\n                        </div>\n                    </ng-template>\n                </ng-container>\n            </div>\n        </div>\n    </drag-scroll>\n</ng-container>\n","import { Component, OnInit, Input, OnDestroy, ChangeDetectionStrategy, ViewContainerRef, SimpleChanges, OnChanges } from '@angular/core';\nimport { CardActionType, CardAction } from '@features/eda/worksheet/cards/events';\nimport { Observable } from 'rxjs';\nimport { Worksheet, WorksheetRootCard, DataSpec, Card, AnyLoc, WorksheetsService, isWorksheetRootCard } from 'src/generated-sources';\nimport { ModalsService, ModalShape } from '@shared/modals/modals.service';\nimport { map, filter, distinctUntilChanged, take } from 'rxjs/operators';\nimport { NewCardModalComponent } from './card-wizard/new-card-modal/new-card-modal.component';\nimport { EdaService } from '../eda.service';\nimport { CollapsingService, LocalStorageCollapsingService } from '../collapsing.service';\nimport { DeleteDialogComponent } from './delete-dialog/delete-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { getFullCardTitle } from '../card-utils';\nimport { DuplicateWorksheetDialogComponent } from './duplicate-worksheet-dialog/duplicate-worksheet-dialog.component';\nimport { RenameWorksheetDialogComponent } from './rename-worksheet-dialog/rename-worksheet-dialog.component';\nimport { SampleContextService } from '../sample-context.service';\nimport { WorksheetContextService } from '../worksheet-state/worksheet.context.service';\nimport { clearHighlightFilter } from '../utils';\n\n@UntilDestroy()\n@Component({\n    selector: 'worksheet',\n    templateUrl: './worksheet.component.html',\n    styleUrls: [\n        '../shared-styles/header-button.less',\n        './worksheet.component.less'\n    ],\n    providers: [WorksheetContextService,\n        {\n            provide: SampleContextService,\n            useExisting: WorksheetContextService\n        },\n        {\n            provide: CollapsingService,\n            useClass: LocalStorageCollapsingService,\n        }],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WorksheetComponent implements OnChanges, OnInit, OnDestroy {\n    @Input() worksheetLoc: AnyLoc;\n    @Input() readOnly = true;\n\n    // EDA-wide\n    worksheets$: Observable<WorksheetsService.WorksheetHead[]>;\n    datasetFullInfo$ = this.edaService.getDatasetFullInfo();\n    error$ = this.edaService.getError();\n\n    // Worksheet-wide\n    worksheet$: Observable<Worksheet | undefined>;\n    dataSpec$: Observable<DataSpec | undefined>;\n    rootCardParams$: Observable<WorksheetRootCard | undefined>;\n    rootCardResults$: Observable<WorksheetRootCard.WorksheetRootCardResult | undefined>;\n\n    constructor(\n        private modalsService: ModalsService,\n        private edaService: EdaService,\n        private worksheetContextService: WorksheetContextService,\n        private dialog: MatDialog,\n        public viewContainerRef: ViewContainerRef\n    ) {\n        this.worksheets$ = this.edaService.listWorksheets().pipe(map(worksheets=> worksheets || []));\n        this.dataSpec$ = worksheetContextService.getDataSpec();\n        this.rootCardParams$ = worksheetContextService.getRootCard();\n        this.rootCardResults$ = worksheetContextService.getRootCardResults();\n        this.worksheet$ = worksheetContextService.getWorksheet();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.worksheetLoc) {\n            this.worksheetContextService.loadWorksheet(\n                this.worksheetLoc.projectKey,\n                this.worksheetLoc.id\n            );\n        }\n    }\n\n    ngOnInit() {\n        this.worksheetContextService.getWorksheet().pipe(\n            map(worksheet => !!worksheet && worksheet.rootCard!.cards.length === 0),\n            filter(hasNoCard => hasNoCard),\n            distinctUntilChanged(),\n            untilDestroyed(this)\n        ).subscribe(() => this.openAnalysisModal());\n        this.worksheetContextService.getError().subscribe(\n            e => this.edaService.pushError(e)\n        );\n    }\n\n    handleRootCardAction(action: CardAction) {\n        if (this.readOnly) {\n            return;\n        }\n\n        if (action.type === CardActionType.UPDATE && isWorksheetRootCard(action.newParams)) {\n            this.worksheetContextService.editRootCard(action.newParams);\n        } else if (action.type === CardActionType.UPDATE && isWorksheetRootCard(action.newParams)) {\n            this.worksheetContextService.editRootCard(action.newParams, action.immediate);\n        } else if (CardActionType.REORDER_HEADER_CARD === action.type && !this.readOnly) {\n            this.worksheetContextService.swapHeaderCardColumns(action.cardId, action.previousIndex, action.currentIndex);\n        } else if (CardActionType.PUBLISH === action.type) {\n            this.worksheetContextService.createInsight(\n                clearHighlightFilter(action.card),\n                getFullCardTitle(action.card)\n            );\n        } else if (CardActionType.ADD === action.type && !this.readOnly) {\n            this.addCard(action.card);\n        }\n    }\n\n    resetError() {\n        this.worksheetContextService.pushError();\n    }\n\n    updateDataSpec(newDataSpec: DataSpec) {\n        this.worksheetContextService.editDataSpec(newDataSpec);\n    }\n\n    addCard(card: Card): void {\n        this.worksheetContextService.addTopLevelCard(card);\n    }\n\n    openAnalysisModal() {\n        this.modalsService.open(NewCardModalComponent,\n            { mode: 'NEW' }, ModalShape.NONE, this.viewContainerRef\n        ).then(({ card }) => {\n            this.addCard(card);\n        }, () => { });\n    }\n\n    createWorksheet() {\n        this.edaService.newWorksheet();\n    }\n\n    renameWorksheet() {\n        this.worksheet$.pipe(take(1)).subscribe(worksheet => {\n            if (worksheet) {\n                this.modalsService.open(RenameWorksheetDialogComponent,\n                    { name: worksheet.name }, ModalShape.NARROW, this.viewContainerRef\n                ).then((newName: string) => {\n                    this.worksheetContextService.editWorksheetName(newName);\n                }, () => { });\n            }\n        });\n    }\n\n    duplicateWorksheet() {\n        this.modalsService.open(DuplicateWorksheetDialogComponent,\n            {}, ModalShape.NARROW, this.viewContainerRef\n        ).then(({ projectKey, datasetName }) => {\n            this.worksheet$.pipe(take(1)).subscribe(worksheet => {\n                if (worksheet) {\n                    this.edaService.duplicateWorksheet(projectKey, datasetName, worksheet.rootCard!, worksheet.name || '');\n                }\n            });\n        }, () => { });\n    }\n\n    deleteWorksheet() {\n        this.worksheet$.pipe(take(1)).subscribe(worksheet => {\n            if (worksheet) {\n                const dialogRef = this.dialog.open(DeleteDialogComponent, {\n                    data: { title: worksheet.name },\n                    restoreFocus: false,\n                    panelClass: ['modal', 'modal3', 'dku-modal-panel-narrow']\n                });\n\n                dialogRef.afterClosed().subscribe(() => {\n                    if (worksheet) {\n                        this.edaService.deleteWorksheet(worksheet);\n                    }\n                });\n            }\n        });\n    }\n\n    changeWorksheet(id: string) {\n        this.edaService.changeWorksheetId(id);\n    }\n\n    ngOnDestroy() {\n    }\n}\n","import { Component, ChangeDetectionStrategy, Inject, Input } from '@angular/core';\nimport { fairAny } from 'dku-frontend-core';\n\n@Component({\n  selector: 'doclink-wrapper',\n  templateUrl: './doclink-wrapper.component.html',\n  styleUrls: ['./doclink-wrapper.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DoclinkWrapperComponent {\n    @Input() page: string;\n\n    get url() {\n        return this.$rootScope.versionDocRoot + this.page + '.html';\n    }\n\n    constructor(\n        @Inject('$rootScope') private $rootScope: fairAny,\n    ) { }\n}\n","<a [href]=\"url\" target=\"_blank\">\n    <ng-content></ng-content>\n</a>","<api-error-alert\n    [apiError]=\"error$ | async\"\n    (resetError)=\"resetError()\"\n    [closable]=\"true\"\n></api-error-alert>\n\n<worksheet\n    *ngIf=\"worksheetId && projectKey\"\n    [worksheetLoc]=\"{projectKey: projectKey, id: worksheetId}\"\n    [readOnly]=\"!('canWriteProjectContent' | dkuEvaluatePermissions)\">\n</worksheet>\n\n<ng-container *ngIf=\"worksheetsIfAvailable$ | async as worksheets\">\n    <div *ngIf=\"worksheets && worksheets.length == 0\" class=\"worksheet-intro empty-list-cta\">\n        <h1>No worksheets for this dataset</h1>\n        <p>\n            Worksheets allow you to generate in-depth statistical reports of your data\n        </p>\n        <p class=\"small\">\n            <doclink-wrapper [page]=\"'statistics/index'\">Read the documentation</doclink-wrapper> to learn more\n        </p>\n        <a (click)=\"newWorksheet()\" class=\"btn btn--primary btn--large btn--dataset\"\n            *ngIf=\"('canWriteProjectContent' | dkuEvaluatePermissions)\">\n            <span class=\"plus-icon\">+</span> Create your first worksheet\n        </a>\n        <p class=\"small\" *ngIf=\"!('canWriteProjectContent' | dkuEvaluatePermissions)\">No worksheet is currently available for this dataset</p>\n        <img class=\"worksheet-intro__image\" src=\"/static/dataiku/images/eda/intro.png\">\n    </div>\n</ng-container>","import { Component, ChangeDetectionStrategy, Input, OnChanges } from '@angular/core';\nimport { EdaService } from './eda.service';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\n\n@Component({\n    selector: 'stats',\n    templateUrl: './eda.component.html',\n    styleUrls: ['./eda.component.less'],\n    providers: [EdaService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EdaComponent implements OnChanges {\n    worksheetsIfAvailable$ = this.edaService.listWorksheets();\n    error$ = this.edaService.getError();\n\n    @Input() datasetName: string;\n    @Input() projectKey: string;\n    @Input() worksheetId: string | undefined;\n\n    constructor(\n        private edaService: EdaService,\n        public apiService: DataikuAPIService\n    ) { }\n\n    ngOnChanges() {\n        this.edaService.setWorksheetLoc(this.projectKey, this.datasetName, this.worksheetId);\n    }\n\n    newWorksheet() {\n        this.edaService.newWorksheet();\n    }\n\n    resetError() {\n        this.edaService.pushError();\n    }\n}\n","import { SampleContextService } from '../sample-context.service';\nimport { BehaviorSubject, Subject, Observable, EMPTY, merge, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { Card, CardResult, DataSpec, Insight, Variable, Sample, TaggableObjectsService } from 'src/generated-sources';\nimport { switchMap, map, shareReplay, filter, distinctUntilChanged, tap, take, startWith } from 'rxjs/operators';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { catchAPIError, ErrorContext, APIError } from '@core/dataiku-api/api-error';\nimport { OnDestroy, Injectable } from '@angular/core';\nimport { getInsightObjectRef, resolveSmartName } from '../utils';\nimport { ComputeService } from '../compute.service';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { columnsToVariables } from '../schema-utils';\nimport { auditMap, FutureWatcherService } from 'dku-frontend-core';\nimport { WaitingService } from '@core/overlays/waiting.service';\nimport deepEqual from 'fast-deep-equal';\n\ninterface InsightData {\n    params: Card;\n    results: CardResult;\n    dataSpec: DataSpec;\n    insight: Insight;\n}\n\n@UntilDestroy()\n@Injectable()\nexport class InsightContextService extends SampleContextService implements ErrorContext, OnDestroy {\n    private insight$ = new Subject<Insight>();\n    private updateRequests$ = new Subject<{ params: Card, dataSpec: DataSpec }>();\n    private updateDataSpecRequests$ = new ReplaySubject<{ dataSpec: DataSpec, refreshOnDataSpecChange: boolean }>(1);\n    private error$ = new BehaviorSubject<APIError | undefined>(undefined);\n\n    private insightRef: TaggableObjectsService.TaggableObjectRef;\n\n    private insightData$ = this.insight$.pipe(\n        switchMap(insight => {\n            this.insightRef = getInsightObjectRef(insight);\n            return this.DataikuAPI.dashboards.getInsightWithPayload(insight.projectKey, insight.id!)\n                .pipe(\n                    map(insightWithPayload => ({\n                        insight,\n                        params: insightWithPayload.insight.params.card,\n                        results: JSON.parse(insightWithPayload.payload),\n                        dataSpec: insightWithPayload.insight.params.dataSpec\n                    })),\n                    catchAPIError(this)\n                );\n        }),\n        shareReplay(1)\n    );\n\n    private sample$: Observable<Sample> = this.updateDataSpecRequests$.pipe(\n        distinctUntilChanged((prev, cur) => deepEqual(prev.dataSpec, cur.dataSpec)),\n    ).pipe(\n        // Sample needs to be retrieved or rebuilt\n        switchMap(curRequest => {\n            return this.DataikuAPI.statistics.currentSample(this.insightRef!, curRequest.dataSpec!)\n                .pipe(\n                    switchMap(currentSampleResponse => {\n                        // Sample was already built\n                        if (currentSampleResponse) {\n                            return of(currentSampleResponse);\n                        }\n\n                        // Otherwise build a new sample\n                        return this.DataikuAPI.statistics.rebuildSample(this.insightRef!, curRequest.dataSpec!)\n                            .pipe(\n                                this.waitingService.bindOverlayAndWaitForResult<Sample>(),\n                            );\n                    }),\n                    this.waitingService.bindStaticOverlay('Preparing sample...'),\n                    tap(() => {\n                        if (curRequest.refreshOnDataSpecChange) {\n                            this.insightData$.pipe(take(1)).subscribe(\n                                insightData => this.updateInsight({\n                                    params: insightData.params,\n                                    dataSpec: curRequest.dataSpec\n                                })\n                            );\n                        }\n                    }\n                    )\n                );\n        }),\n        catchAPIError(this),\n        untilDestroyed(this),\n        shareReplay(1)\n    );\n\n    private availableVariables$ = combineLatest([this.insightData$.pipe(\n        filter(insightData => !!insightData),\n        switchMap(insightData => {\n            if (!insightData) {\n                return EMPTY;\n            }\n            const datasetLoc = resolveSmartName(\n                insightData.insight.projectKey,\n                insightData.dataSpec.inputDatasetSmartName\n            );\n            return this.DataikuAPI.datasets.get(\n                datasetLoc.projectKey,\n                datasetLoc.id,\n                insightData.insight.projectKey\n            ).pipe(catchAPIError(this));\n        })), this.sample$.pipe(startWith(undefined))]).pipe(\n        map(([dataset, sample]) => {\n            const schemaSource = (sample === undefined) ? dataset : sample;\n            if (!schemaSource) {\n                return [];\n            }\n            return columnsToVariables(schemaSource.schema!.columns || []);\n        }),\n        startWith([]),\n        shareReplay(1)\n    );\n\n    private noComputationUpdated$ = new Subject<{ card: Card, result: CardResult, dataSpec: DataSpec }>();\n    private updated$ = merge(combineLatest([this.updateRequests$, this.sample$, this.updateDataSpecRequests$]).pipe(\n        filter(([updateReq, sample, updateDataSpecRequest]) => deepEqual(updateReq.dataSpec, sample.dataSpec) && deepEqual(updateDataSpecRequest.dataSpec, sample.dataSpec)),\n        auditMap(([changes, sample]) => {\n                return this.DataikuAPI.statistics.fixCard(changes.params!)\n                    .pipe(\n                        switchMap(fixedCard =>\n                            this.computeService.computeCard(fixedCard, sample.id, false\n                            ).pipe(\n                                map(result => ({ card: fixedCard, result, dataSpec: changes.dataSpec }))\n                            )\n                        ),\n                        catchAPIError(this)\n                    );\n        })), this.noComputationUpdated$.asObservable())\n        .pipe(\n            shareReplay(1)\n        );\n\n    constructor(\n        DataikuAPI: DataikuAPIService,\n        futureWatcherService: FutureWatcherService,\n        private computeService: ComputeService,\n        private waitingService: WaitingService,\n    ) {\n        super(DataikuAPI, futureWatcherService);\n\n        // Tie observables lifetime to service lifetime\n        // Note: do not start availableVariables$ by default because it may be unnecessary (in view only mode)\n        merge(this.updated$, this.insightData$)\n            .pipe(untilDestroyed(this)).subscribe();\n    }\n\n    getError() {\n        return this.error$;\n    }\n\n    getUpdatedInsight() {\n        return this.updated$;\n    }\n\n    pushError(error?: APIError) {\n        this.error$.next(error);\n    }\n\n    forceLoadSample() {\n        this.insightData$.pipe(\n            take(1)\n        ).subscribe(insightData => {\n                this.updateDataSpec({ dataSpec: insightData.dataSpec, refreshOnDataSpecChange: false })\n            });\n    }\n\n    setInsight(insight: Insight) {\n        this.insight$.next(insight);\n    }\n\n    getInsightData(): Observable<InsightData | undefined> {\n        return this.insightData$;\n    }\n\n    getSample(): Observable<Sample> {\n        return this.sample$;\n    }\n\n    getDataSpecRequest(): Observable<DataSpec> {\n        return this.updateDataSpecRequests$.pipe(\n            map((d) => d.dataSpec)\n        );\n    }\n\n    availableVariables(): Observable<Variable[]> {\n        return this.availableVariables$;\n    }\n\n    updateDataSpec(changes: { dataSpec: DataSpec, refreshOnDataSpecChange: boolean }) {\n        console.log('Requesting changes', changes);\n        this.updateDataSpecRequests$.next(changes);\n    }\n\n    updateInsight(changes: { params: Card, dataSpec: DataSpec }) {\n        this.updateRequests$.next(changes);\n    }\n\n    updateInsightParamsResults(changes: { card: Card, result: CardResult, dataSpec: DataSpec }) {\n        this.noComputationUpdated$.next(changes);\n    }\n\n    ngOnDestroy() {\n    }\n}\n","<ng-container *ngIf=\"!readOnly else readOnlyTemplate\">\n    <div class=\"global-header\">\n        <sample-settings\n            *ngIf=\"dataSpec\"\n            [projectKey]=\"insight.projectKey\"\n            [dataSpec]=\"dataSpec\"\n            [readOnly]=\"false\"\n            (dataSpecChange)=\"updateDataSpec($event)\"\n        >\n        </sample-settings>\n        <edit-confidence-level-settings\n            *ngIf=\"params && hasConfidenceLevel\"\n            [params]=\"params\"\n            (action)=\"handleCardAction($event)\"\n            [canSave]=\"!readOnly\"\n        >\n        </edit-confidence-level-settings>\n        <container-settings\n            *ngIf=\"dataSpec\"\n            [dataSpec]=\"dataSpec\"\n            [readOnly]=\"false\"\n            (dataSpecChange)=\"updateDataSpec($event)\"\n        ></container-settings>\n    </div>\n\n    <api-error-alert\n        *ngIf=\"error$ | async as error\"\n        [apiError]=\"error\"\n        [closable]=\"true\"\n        (resetError)=\"resetError()\"\n    >\n    </api-error-alert>\n\n    <top-level-card\n        *ngIf=\"params && results\"\n        [params]=\"params\"\n        [results]=\"results\"\n        [readOnly]=\"false\"\n        [extendedActions]=\"false\"\n        [hasFixedHeight]=\"false\"\n        (action)=\"handleCardAction($event)\"\n    >\n    </top-level-card>\n</ng-container>\n\n<ng-template #readOnlyTemplate>\n    <api-error-alert\n        *ngIf=\"error$ | async as error else noErrorTemplate\"\n        [apiError]=\"error\"\n        [closable]=\"false\"\n    >\n    </api-error-alert>\n\n    <ng-template #noErrorTemplate>\n        <card-body\n            class=\"standalone-card-body\"\n            *ngIf=\"params && results\"\n            [params]=\"params\"\n            [results]=\"results\"\n            [isTopLevel]=\"true\"\n            [readOnly]=\"true\"\n            [extendedActions]=\"false\"\n            [hasFixedHeight]=\"false\"\n        >\n        </card-body>\n    </ng-template>\n</ng-template>\n","import { Component, Input, Output, OnChanges, SimpleChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { Insight, DataSpec, Card, CardResult, AbstractHeaderCard, GroupedCompiledCardWrapper } from 'src/generated-sources';\nimport { CollapsingService, NoopCollapsingService } from '@features/eda/collapsing.service';\nimport { CardAction, CardActionType } from '../events';\nimport { EventEmitter } from '@angular/core';\nimport { InsightContextService } from '@features/eda/insight-state/insight-context.service';\nimport { SampleContextService } from '@features/eda/sample-context.service';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { hasConfidenceLevel } from '@features/eda/utils';\nimport _ from 'lodash';\nimport deepEqual from 'fast-deep-equal';\nimport { Subject, of, concat, interval } from 'rxjs';\nimport { takeUntil, first } from 'rxjs/operators';\nimport produce from 'immer';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\n\n@UntilDestroy()\n@Component({\n    selector: 'insight-card',\n    templateUrl: './insight-card.component.html',\n    styleUrls: ['./insight-card.component.less'],\n    providers: [\n        InsightContextService,\n        {\n            provide: SampleContextService,\n            useExisting: InsightContextService\n        },\n        {\n            provide: CollapsingService,\n            useClass: NoopCollapsingService\n        }\n    ]\n})\nexport class InsightCardComponent implements OnChanges, OnDestroy {\n    @Input() insight: Insight;\n    @Input() readOnly: boolean;\n    @Output() updated = new EventEmitter<any>();\n\n    error$ = this.insightContextService.getError();\n    params?: Card;\n    results?: CardResult;\n    dataSpec?: DataSpec;\n\n    constructor(\n        private insightContextService: InsightContextService,\n        changeDetectorRef: ChangeDetectorRef\n    ) {\n        insightContextService.getInsightData()\n            .pipe(untilDestroyed(this))\n            .subscribe(insightData => {\n                if (insightData) {\n                    this.params = insightData.params;\n                    this.results = insightData.results;\n                    this.dataSpec = this.adjustDataSpec(insightData.dataSpec);\n\n                    changeDetectorRef.markForCheck();\n                }\n            });\n\n        insightContextService.getUpdatedInsight()\n            .pipe(untilDestroyed(this))\n            .subscribe(update => this.updated.emit(update));\n    }\n\n    adjustDataSpec(param: DataSpec): DataSpec {\n        const newParam = _.cloneDeep(param);\n        if (!newParam.datasetSelection.latestPartitionsN) {\n            newParam.datasetSelection.latestPartitionsN = 1;\n        }\n        return newParam;\n    }\n\n    resetError() {\n        this.insightContextService.pushError();\n    }\n\n    get hasConfidenceLevel() {\n        return this.params && hasConfidenceLevel(this.params);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.insight) {\n            this.insightContextService.setInsight(this.insight);\n        }\n    }\n\n    updateDataSpec(newDataSpec: DataSpec) {\n        this.insightContextService.updateDataSpec({ dataSpec: newDataSpec, refreshOnDataSpecChange: true });\n    }\n\n    handleCardAction(action: CardAction) {\n        if (action.type === CardActionType.UPDATE) {\n            const unsubscribe$ = new Subject<void>();\n            // let's wait for the right sample to be available\n            this.insightContextService.getSample()\n                .pipe(takeUntil(unsubscribe$))\n                .subscribe(\n                    // when sample is available, update insight\n                    sample => {\n                        if (deepEqual(sample.dataSpec, this.dataSpec)) {\n                            this.insightContextService.updateInsight({ params: action.newParams, dataSpec: this.dataSpec! });\n                            unsubscribe$.next();\n                            unsubscribe$.complete();\n                        }\n                    });\n\n            concat(this.insightContextService.getDataSpecRequest().pipe(takeUntil(interval(10))), of(this.dataSpec))\n                .pipe(first())\n                .subscribe(\n                    dataSpec => this.insightContextService.updateDataSpec({ dataSpec: dataSpec!, refreshOnDataSpecChange: false })\n                );\n        } else if (action.type === CardActionType.REORDER_HEADER_CARD) {\n            this.insightContextService.getInsightData()\n                .pipe(untilDestroyed(this), first())\n                .subscribe(insightData => {\n                    if (insightData) {\n                        this.params = insightData.params;\n                        this.results = insightData.results;\n                        this.dataSpec = this.adjustDataSpec(insightData.dataSpec);\n\n                        const newState = produce(insightData, draft => {\n                            const draftCard = draft.params as AbstractHeaderCard;\n                            moveItemInArray(draftCard.cards, action.previousIndex, action.currentIndex);\n                            moveItemInArray(draftCard.xColumns, action.previousIndex, action.currentIndex);\n\n                            const draftResults = draft.results;\n                            if (AbstractHeaderCard.isAbstractHeaderCardResult(draftResults)) {\n                                moveItemInArray(draftResults.results, action.previousIndex, action.currentIndex);\n                            } else if (GroupedCompiledCardWrapper.isGroupedCardResult(draftResults)) {\n                                for (const c of draftResults.results) {\n                                    if (AbstractHeaderCard.isAbstractHeaderCardResult(c)) {\n                                        moveItemInArray(c.results, action.previousIndex, action.currentIndex);\n                                    }\n                                }\n                            }\n                        });\n\n                        // immediatly update what is displayed\n                        this.insightContextService.updateInsightParamsResults({ card: newState.params, result: newState.results, dataSpec: this.dataSpec! })\n                        // update with save\n                        this.insightContextService.updateInsight({ params: newState.params, dataSpec: this.dataSpec! });\n                    }\n                });\n        }\n    }\n\n    ngOnDestroy() {\n    }\n}\n","import { Component, Input, forwardRef } from '@angular/core';\nimport { EditableListBase } from '../editable-list/editable-list.component';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'connection-properties-list',\n    templateUrl: './connection-properties-list.component.html',\n    styleUrls: ['./connection-properties-list.component.less'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ConnectionPropertiesListComponent),\n            multi: true\n        }\n    ]\n})\n\n/**\n * List of connection properties.\n * Uses CredentialsListComponent with a dedicated template.\n * \n * @example\n * <connection-properties-list items=\"connection.properties\"></connection-properties-list>\n */\nexport class ConnectionPropertiesListComponent extends EditableListBase {\n    @Input() addLabel: string = 'Add Property';\n    @Input() keyPlaceholder: string = 'Property name';\n    @Input() valuePlaceholder: string = 'Property value';\n    @Input() canBeFinal: boolean = false;\n    @Input() keyRequired: boolean = true;\n    @Input() valueRequired: boolean = true;\n    @Input() required: boolean = true;\n    @Input() keyIdentifier: string = 'name';\n    @Input() valueIdentifier: string = 'value';\n\n    constructor() {\n        super();\n    }\n}\n","<credentials-list \n    [ngModel]=\"items\" \n    (ngModelChange)=\"onChange($event)\" \n    [addLabel]=\"addLabel\" \n    [sortable]=\"sortable\"\n    [keyPlaceholder]=\"keyPlaceholder\" \n    [valuePlaceholder]=\"valuePlaceholder\"\n    [keyIdentifier]=\"keyIdentifier\" \n    [valueIdentifier]=\"valueIdentifier\" \n    [keyRequired]=\"keyRequired\" \n    [valueRequired]=\"valueRequired\" \n    [required]=\"required\"\n    [canBeFinal]=\"canBeFinal\"\n    (onAdd)=\"onAdd.emit($event)\" \n    (onDelete)=\"onDelete.emit($event)\"\n    (onValidityChange)=\"onValidityChange.emit($event)\" >\n</credentials-list>\n","import { Component, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { IScope } from 'angular';\n\n@Component({\n    selector: 'downgraded-connection-properties-list',\n    templateUrl: './downgraded-connection-properties-list.component.html',\n})\n\n/**\n * Bridge between Angular and AngularJS to use connection properties lists in the later.\n * Simply provides proper inputs and outputs, adapts ControlValueAccessor structure and propagates changes.\n * \n * @example\n * // In AngularJS code\n * <ng2-connection-properties-list [(items)]=\"items\"></ng2-connection-properties-list>\n */\nexport class DowngradedConnectionPropertiesListComponent {\n    @Input() items: Array<Object>;\n    @Input() sortable: boolean;\n    @Output() onAdd = new EventEmitter<number>();\n    @Output() onDelete = new EventEmitter<number>();\n    @Output() onChange = new EventEmitter<Array<Object>>();\n    @Output() itemsChange = new EventEmitter<Array<Object>>();\n    @Output() onValidityChange = new EventEmitter<boolean>();\n    @Input() addLabel: string = 'Add Property';\n    @Input() hasDivider: boolean = true;\n    @Input() focusOnEnter: boolean = true;\n    @Input() keyPlaceholder: string = 'Property name';\n    @Input() valuePlaceholder: string = 'Property value';\n    @Input() canBeFinal: boolean = false;\n    @Input() keyRequired: boolean = true;\n    @Input() valueRequired: boolean = true;\n    @Input() required: boolean = true;\n    @Input() keyIdentifier: string = 'name';\n    @Input() valueIdentifier: string = 'value';\n\n    constructor(@Inject('$rootScope') private $rootScope: IScope) { \n        this.onValidityChange.subscribe(() => $rootScope.$applyAsync());\n    }\n\n    handleChange(items: Array<Object>) {\n        this.$rootScope.$applyAsync();\n        this.itemsChange.emit(items);\n        this.onChange.emit(items);\n    }\n}\n","<connection-properties-list \n    [ngModel]=\"items\"\n    (ngModelChange)=\"handleChange($event)\" \n    [keyPlaceholder]=\"keyPlaceholder\"\n    [valuePlaceholder]=\"valuePlaceholder\"\n    [keyIdentifier]=\"keyIdentifier\"\n    [valueIdentifier]=\"valueIdentifier\"\n    [keyRequired]=\"keyRequired\"\n    [valueRequired]=\"valueRequired\"\n    [required]=\"required\"\n    [addLabel]=\"addLabel\" \n    [sortable]=\"sortable\" \n    [hasDivider]=\"hasDivider\"\n    [focusOnEnter]=\"focusOnEnter\"\n    [canBeFinal]=\"canBeFinal\"\n    (onAdd)=\"onAdd.emit($event)\" \n    (onDelete)=\"onDelete.emit($event)\"\n    (onValidityChange)=\"onValidityChange.emit($event)\">\n</connection-properties-list>\n","<api-error-alert *ngIf=\"error\" [apiError]=\"error\" [closable]=\"false\"></api-error-alert>","import { Component, OnInit, Inject } from '@angular/core';\nimport { DataikuAPIService } from '@core/dataiku-api/dataiku-api.service';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { resolveSmartName } from '@features/eda/utils';\nimport { catchAPIError, ErrorContext, APIError } from '@core/dataiku-api/api-error';\n\n/**\n * Fake page which redirects to the real worksheet page from (projectKey, worksheetId)\n * Used to implement a ui-router state which works even without knowing dataset name\n */\n@UntilDestroy()\n@Component({\n    selector: 'worksheet-redirection-page',\n    templateUrl: './worksheet-redirection-page.component.html',\n    styleUrls: ['./worksheet-redirection-page.component.less']\n})\nexport class WorksheetRedirectionPageComponent implements OnInit, ErrorContext {\n    error?: APIError;\n\n    constructor(\n        private DataikuAPI: DataikuAPIService,\n        @Inject('$state') private $state: any\n    ) { }\n\n    ngOnInit() {\n        this.DataikuAPI.statistics.get(this.$state.params.projectKey, this.$state.params.worksheetId)\n            .pipe(catchAPIError(this), untilDestroyed(this))\n            .subscribe(worksheet => {\n                const datasetSmartName = worksheet.dataSpec.inputDatasetSmartName;\n                const resolvedDatasetName = resolveSmartName(worksheet.projectKey, datasetSmartName);\n\n                if (resolvedDatasetName.projectKey === worksheet.projectKey) {\n                    this.$state.go('projects.project.datasets.dataset.statistics.worksheet', {\n                        projectKey: worksheet.projectKey,\n                        datasetName: resolvedDatasetName.id,\n                        worksheetId: worksheet.id\n                    }, { location: 'replace' });\n                } else {\n                    this.$state.go('projects.project.foreigndatasets.dataset.statistics.worksheet', {\n                        projectKey: worksheet.projectKey,\n                        datasetFullName: datasetSmartName,\n                        worksheetId: worksheet.id\n                    }, { location: 'replace' });\n                }\n            });\n    }\n\n    pushError(error: APIError): void {\n        this.error = error;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stripHtml'\n})\n\nexport class StripHtmlPipe implements PipeTransform {\n    transform(value: string | null): any {\n        if (!value) {\n            return \"\";\n        }\n        const doc = new DOMParser().parseFromString(value , 'text/html');\n        return doc.body.innerText || \"\";\n    }\n}\n","<div class=\"editable-list__input-group\">\n    <mat-form-field>\n        <input\n            type=\"text\"\n            matInput\n            [(ngModel)]=\"value\"\n            [matAutocomplete]=\"auto\"\n            class=\"editable-list__input\"\n            placeholder=\"{{placeholder}}\"\n            (focus)=\"handleFocus($event)\"\n            (blur)=\"handleBlur()\"\n            [required]=\"required\"\n            [matTooltip]=\"computedTooltip|async|stripHtml\"\n        >\n        <mat-autocomplete #auto=\"matAutocomplete\" [disableRipple]=\"true\" [displayWith]=\"computeDisplay\" [panelWidth]=\"autocompletePanelWidth\">\n            <mat-option *ngFor=\"let suggestion of filteredSuggestions | async\" [value]=\"computeValue(suggestion)\"\n                (onSelectionChange)=\"onSelectionChange($event)\" (click)=\"onSelectionClick($event)\"\n                [innerHtml]=\"computeDisplay(suggestion)\">\n            </mat-option>\n        </mat-autocomplete>\n\n    </mat-form-field>\n</div>\n","import { ObservableInput } from 'observable-input';\nimport { startWith, map } from 'rxjs/operators';\nimport { Observable, Subject, combineLatest, BehaviorSubject } from 'rxjs';\nimport { Component, Input, Output, HostListener, EventEmitter, ViewChild, OnDestroy, forwardRef, SimpleChanges, OnChanges, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatAutocompleteTrigger, MatAutocomplete, AUTOCOMPLETE_PANEL_HEIGHT } from '@angular/material/autocomplete';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange } from '@angular/material/core';\n\n\n/**\n * Input with typeahead. Meant for downgrade in angularjs.\n */\n@UntilDestroy()\n@Component({\n    selector: 'edit-typeahead',\n    templateUrl: './edit-typeahead-input.component.html',\n    styleUrls: ['./edit-typeahead-input.component.less'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => EditTypeaheadComponent),\n            multi: true\n        }\n    ]\n})\nexport class EditTypeaheadComponent implements ControlValueAccessor, OnDestroy, OnInit {\n    @Input() type: string = 'text';\n    @Input() name: string;\n    @Input() placeholder: string;\n    @Input() required: boolean = false;\n    @Input() displayFn?: (option: any) => string;\n    @Input() valueFn?: (option: any) => any;\n    @Input() autocompletePanelWidth?: number;\n    @Input() noMatchTooltip: string | null = null;\n\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n    @Output() onEnter: EventEmitter<any> = new EventEmitter();\n    @Output() inputChange: EventEmitter<string> = new EventEmitter();\n    // suggestions for mat-autocomplete\n    @Input() @ObservableInput() suggestions: Observable<Object[]>;\n    @ViewChild(MatAutocomplete) matAutocompleteEl: MatAutocomplete;\n    @ViewChild(MatAutocompleteTrigger) matAutocompleteTrigger: MatAutocompleteTrigger;\n\n    // whether or not user selected item in autocomplete suggestion list\n    selectedAutocompleteItemViaEnter: boolean = false;\n\n    values = new BehaviorSubject<string>('');\n\n    filteredSuggestions: Observable<Object[]>;\n    computedTooltip: Observable<string|null>;\n\n    onChange: Function = () => { };\n\n    onTouched: Function = () => { };\n\n    val = null;\n\n    ngAfterViewInit() {\n        this.fixAutocompleteScroll();\n    }\n\n    ngOnDestroy(): void {\n    }\n\n    ngOnInit() {\n        this.filteredSuggestions = combineLatest([this.values, this.suggestions])\n            .pipe(untilDestroyed(this),\n                map(([value, suggestions]) => {\n                    if (!value) {\n                        return suggestions;\n                    }\n                    const filterValue = value.toLowerCase();\n                    return suggestions?suggestions.filter(suggestion =>\n                        this.computeValue(suggestion).toLowerCase().includes(filterValue)\n                        || this.computeDisplay(suggestion).toLowerCase().includes(filterValue)\n                        ):[];\n                })\n            );\n\n        this.computedTooltip = combineLatest([this.values, this.suggestions])\n            .pipe(untilDestroyed(this),\n                map(([value, suggestions]) => {\n                    if ((null == value) || (undefined == value) || !suggestions || !this.valueFn || !this.displayFn) {\n                        return null;\n                    }\n                    for (let sug of suggestions) {\n                        if (this.valueFn(sug) === value) {\n                            return this.displayFn(sug);\n                        }\n                    }\n                    return this.noMatchTooltip;\n                })\n            );\n    }\n\n    handleFocus($event: FocusEvent) {\n        this.onFocus.emit($event);\n    }\n\n    handleBlur() {\n        this.onBlur.emit();\n    }\n\n    /*\n        Whenever an autocomplete item is selected, set\n        flag to true. If item was selected via click,\n        it will be reset (see onSelectionClick).\n\n        This flag is used to prevent the editable list from\n        creating a new entry after selecting a suggestion.\n    */\n    onSelectionChange(event: MatOptionSelectionChange) {\n        this.selectedAutocompleteItemViaEnter = true;\n    }\n\n    /*\n        Fires after onSelectionChange.\n        If selected autocomplete item was not done via enter key,\n        reset flag.\n    */\n    onSelectionClick(event: any) {\n        this.selectedAutocompleteItemViaEnter = false;\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    handleEnter(event: KeyboardEvent) {\n        if (!this.selectedAutocompleteItemViaEnter) {\n            this.onEnter.emit(event);\n        }\n\n        this.matAutocompleteTrigger.closePanel();\n        this.selectedAutocompleteItemViaEnter = false;\n    }\n\n    /*\n        https://github.com/angular/components/issues/3419\n\n        When using the up/down arrows to scroll through a select or autocomplete\n        list with custom height mat-option elements, the selected item becomes\n        out of sync because the mat-option height is hard coded in the\n        autocomplete code.\n\n        This workaround recalculates the scroll amount using the actual height\n        of mat-option.\n    */\n    fixAutocompleteScroll() {\n        this.matAutocompleteTrigger['_scrollToOption'] = () => {\n            const optionHeight = this.matAutocompleteEl.options.first._getHostElement().clientHeight;\n            const index: number = this.matAutocompleteEl['_keyManager'].activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.matAutocompleteEl.options, this.matAutocompleteEl.optionGroups);\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, optionHeight, this.matAutocompleteEl._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n\n            this.matAutocompleteEl._setScrollTop(newScrollPosition);\n        };\n    }\n\n\n    get value() {\n        return this.val;\n    }\n\n    set value(val: any){  // this value is updated by programmatic changes if( val !== undefined && this.val !== val){\n        this.val = val;\n        this.onChange(val);\n        this.onTouched(val);\n        this.values.next(<string><unknown>this.val);\n    }\n\n    writeValue(obj: any): void {\n        this.val = obj;\n        this.values.next(<string><unknown>this.val);\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    computeDisplay(obj: any): string {\n        return this.displayFn?this.displayFn(obj):obj;\n    }\n\n    computeValue(obj: any): string {\n        return this.valueFn?this.valueFn(obj):obj;\n    }\n}\n","import { Observable } from 'rxjs';\nimport { ObservableInput } from 'observable-input';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Component, Input, Output, EventEmitter, Inject, forwardRef } from '@angular/core';\nimport { IScope } from 'angular';\n\n@Component({\n    selector: 'downgraded-edit-typeahead-input',\n    templateUrl: './downgraded-edit-typeahead-input.component.html'\n})\n\n/**\n * Bridge between Angular and AngularJS to use editable input with typeahead in the later.\n * Simply provides proper inputs and outputs, adapts ControlValueAccessor structure and propagates changes.\n * Should be used in complex cases, when displayed label is different from the value.\n *\n * @example\n * // In AngularJS code\n * <ng2-typeahead [(value)]=\"myChoice\" [suggestions]=\"suggestions\"></ng2-typeahead>\n *\n * suggestions being an array of string.\n *\n * Note: this simple example has no advantage over:\n *\n * <input type=\"text\" bs-typeahead=\"suggestions\" ng-model=\"myChoice\" />\n *\n * and, so, this later should be prefered.\n *\n * @example\n * // In AngularJS code\n * <ng2-typeahead [(value)]=\"desc.modelVersionId\" [suggestions]=\"modelVersions\"\n *      [display-fn]=\"versionDisplayFn\" [value-fn]=\"versionValueFn\"\n *      autocomplete-panel-width=\"600\"\n *      no-match-tooltip=\"(current input does not match a suggestion)\"></ng2-typeahead>\n *\n *  with modelVersions = [{\n *      versionId: \"\",\n *      label: \"Active version\"\n *  },{\n *      versionId: \"123456789\",\n *      label: \"Random Forest blah blah - 123456789\"\n *  }]\n *\n *\n *   and\n *\n *  $scope.versionDisplayFn = function(version) {\n *      return version.label;\n *  }\n *\n *  $scope.versionValueFn = function(version) {\n *      return version.versionId;\n *  }\n *\n * will display an input text with typeahead, suggestions being displayed by label, and a tooltip being displayed over current value, if it matches a suggestion\n*/\nexport class DowngradedEditTypeaheadInputComponent {\n    @Input() value: string;\n    @Input() name: string;\n    @Input() placeholder: string;\n    @Input() required: boolean = false;\n    // suggestions for mat-autocomplete\n    @Input() @ObservableInput() suggestions: Observable<Object[]>;\n    @Input() displayFn?: (option: any) => string;\n    @Input() valueFn?: (option: any) => any;\n    @Input() autocompletePanelWidth?: number;\n    @Input() noMatchTooltip?: string;\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n    @Output() onEnter: EventEmitter<any> = new EventEmitter();\n    @Output() onValidityChange = new EventEmitter<boolean>();\n    @Output() valueChange = new EventEmitter<string>();\n\n    constructor(@Inject('$rootScope') private $rootScope: IScope) {\n    }\n\n    handleChange(value: string) {\n        this.$rootScope.$applyAsync();\n        this.valueChange.emit(value);\n    }\n}\n","<edit-typeahead [ngModel]=\"value\"\n    (ngModelChange)=\"handleChange($event)\"\n    [name]=\"name\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [suggestions]=\"suggestions|async\"\n    [displayFn]=\"displayFn\"\n    [valueFn]=\"valueFn\"\n    [autocompletePanelWidth]=\"autocompletePanelWidth\"\n    [noMatchTooltip]=\"noMatchTooltip\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onEnter)=\"onBlur.emit($event)\">\n</edit-typeahead>\n","// In this file, we make Angular components available to AngularJS\n//\n// - ! - WARNING - ! -\n//\n// - You have to redeclare the selector for directives, with the AngularJS convention:\n// ex: for myDirective to match my-directive markup.\n// The selector metadata of the downgraded Angular component is ignored.\n// For simplicity, make sure what you write corresponds to the component definition,\n// In the Component file:\n//     selector: 'my-directive',\n// here:\n//  angular.module(...).directive('myDirective', ...)\n\nimport { Type } from '@angular/core';\nimport { DowngradedCredentialsListComponent } from '@app/widgets/lists/credentials-list/downgraded/downgraded-credentials-list.component';\nimport { DowngradedValuesListComponent } from '@app/widgets/lists/values-list/downgraded/downgraded-values-list.component';\nimport { DowngradedKeyValuesListComponent } from '@app/widgets/lists/key-values-list/downgraded/downgraded-key-values-list.component';\nimport { downgradeComponent } from '@angular/upgrade/static';\nimport { fairAny, LazyEchartComponent } from 'dku-frontend-core';\nimport { EdaComponent } from '@features/eda/eda.component';\nimport { InsightCardComponent } from '@features/eda/worksheet/cards/insight-card/insight-card.component';\nimport { DowngradedConnectionPropertiesListComponent } from '@app/widgets/lists/connection-properties-list/downgraded/downgraded-connection-properties-list.component';\nimport { WorksheetRedirectionPageComponent } from '@features/eda/pages/worksheet-redirection-page/worksheet-redirection-page.component';\nimport { DowngradedEditTypeaheadInputComponent } from '@app/widgets/inputs/edit-typeahead-input/downgraded/downgraded-edit-typeahead-input.component';\n\nfunction directive(ajsDirective: string, component: Type<any>, inputs?: string[], outputs?: string[]): Type<any> {\n    const angularJS = (window as fairAny).angular;\n    angularJS.module('dataiku').directive(ajsDirective, downgradeComponent({ component, inputs, outputs, propagateDigest: false }));\n    return component;\n}\n\nexport function downgradeComponents(): Array<Type<any>> {\n    return [\n        directive('ng2KeyValuesList', DowngradedKeyValuesListComponent),\n        directive('ng2ValuesList', DowngradedValuesListComponent),\n        directive('ng2CredentialsList', DowngradedCredentialsListComponent),\n        directive('ng2ConnectionPropertiesList', DowngradedConnectionPropertiesListComponent),\n        directive('ng2Eda', EdaComponent),\n        directive('ng2EdaWorksheetRedirectionPage', WorksheetRedirectionPageComponent),\n        directive('ng2EdaInsight', InsightCardComponent, ['insight', 'readOnly'], ['updated']),\n        directive('ng2LazyEchart', LazyEchartComponent),\n        directive('ng2Typeahead', DowngradedEditTypeaheadInputComponent)\n    ];\n}\n","import { FutureResponse, SerializedError } from 'dku-frontend-core';\nimport { Dict, fairAny } from 'dku-frontend-core';\nimport { EnrichedPromise } from '@core/dataiku-api/utils/enriched-promise';\nimport { BackendResponse } from '@core/requests/dku-legacy-http.service';\n\n// This file groups all the Providers (in particular for Services) defined in AngularJS but used in Angular\n// If possible, move those providers to Angular and downgrade them to keep them accessible in AngularJS if necessary\n\n//\n// ** WARNING **\n//\n// Need to export factories for prod compilation (make sure ng buid --prod works if you change this)\n\nexport function stateUtilsFactory($injector: { get: Function }) {\n    return $injector.get('StateUtils');\n}\n\nconst stateUtilsProvider = {\n    provide: 'StateUtils',\n    useFactory: stateUtilsFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function APIXHRServiceFactory($injector: { get: Function }) {\n    return $injector.get('APIXHRService');\n}\n\nconst APIXHRServiceProvider = {\n    provide: 'APIXHRService',\n    useFactory: APIXHRServiceFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function DataikuAPIFactory($injector: { get: Function }) {\n    return $injector.get('DataikuAPI');\n}\n\nconst DataikuAPIProvider = {\n    provide: 'DataikuAPI',\n    useFactory: DataikuAPIFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function GraphZoomTrackerServiceFactory($injector: { get: Function }) {\n    return $injector.get('GraphZoomTrackerService');\n}\n\nconst GraphZoomTrackerServiceProvider = {\n    provide: 'GraphZoomTrackerService',\n    useFactory: GraphZoomTrackerServiceFactory,\n    deps: ['$injector']\n};\n\n\n// -----------------\n\nexport function DatasetUtilsFactory($injector: { get: Function }) {\n    return $injector.get('DatasetUtils');\n}\n\nconst DatasetUtilsProvider = {\n    provide: 'DatasetUtils',\n    useFactory: DatasetUtilsFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function CachedAPICallsFactory($injector: { get: Function }) {\n    return $injector.get('CachedAPICalls');\n}\n\nconst CachedAPICallsProvider = {\n    provide: 'CachedAPICalls',\n    useFactory: CachedAPICallsFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function FutureWatcherFactory($injector: { get: Function }) {\n    return $injector.get('FutureWatcher');\n}\n\nconst FutureWatcherProvider = {\n    provide: 'FutureWatcher',\n    useFactory: FutureWatcherFactory,\n    deps: ['$injector']\n};\nexport interface FutureWatcherType {\n    watchJobId(jobId: string): EnrichedPromise<BackendResponse<FutureResponse>>;\n}\n\n// -----------------\n\nexport function FutureProgressModalFactory($injector: { get: Function }) {\n    return $injector.get('FutureProgressModal');\n}\n\nconst FutureProgressModalProvider = {\n    provide: 'FutureProgressModal',\n    useFactory: FutureProgressModalFactory,\n    deps: ['$injector']\n};\nexport interface FutureProgressModalType {\n    showPeekOnlyIfRunning(parentScope: fairAny, jobId: string, modalTitle: string): Promise<BackendResponse<FutureResponse>>;\n    show(parentScope: fairAny, data: fairAny, modalTitle: string): fairAny;\n}\n\n// -----------------\n\nexport function FutureWaitingFactory($injector: { get: Function }) {\n    return $injector.get('futureWaiting');\n}\n\nconst FutureWaitingProvider = {\n    provide: 'futureWaiting',\n    useFactory: FutureWaitingFactory,\n    deps: ['$injector', 'DataikuAPI']\n};\n\n// -----------------\n\nexport function ProgressStackMessageBuilderFactory($injector: { get: Function }) {\n    return $injector.get('ProgressStackMessageBuilder');\n}\n\nconst ProgressStackMessageBuilderProvider = {\n    provide: 'ProgressStackMessageBuilder',\n    useFactory: ProgressStackMessageBuilderFactory,\n    deps: ['$injector',]\n};\n\n// -----------------\n\nexport function DKUConstantsFactory($injector: { get: Function }) {\n    return $injector.get('DKUConstants');\n}\n\nconst DKUConstantsProvider = {\n    provide: 'DKUConstants',\n    useFactory: DKUConstantsFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function LegacyDialogsFactory($injector: { get: Function }) {\n    return $injector.get('Dialogs');\n}\n\nconst LegacyDialogsProvider = {\n    provide: 'legacyDialogs',\n    useFactory: LegacyDialogsFactory,\n    deps: ['$injector', 'CreateModalFromTemplate', '$state', 'DKUConstants']\n};\n\nexport interface LegacyDialogs {\n    displaySerializedError($scope: any, e: SerializedError): void;\n}\n// -----------------\n\nexport function $stateFactory($injector: { get: Function }) {\n    return $injector.get('$state');\n}\n\nconst $stateProvider = {\n    provide: '$state',\n    useFactory: $stateFactory,\n    deps: ['$injector']\n};\nexport type $stateType = { current: { name: string, url:string }, go: Function, href: Function, params: Dict<string> };\n\n\n// -----------------\n\nexport function $locationFactory($injector: { get: Function }) {\n    return $injector.get('$location');\n}\n\nconst $locationProvider = {\n    provide: '$location',\n    useFactory: $locationFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function StringUtilsFactory($injector: { get: Function }) {\n    return $injector.get('StringUtils');\n}\n\nconst StringUtilsProvider = {\n    provide: 'StringUtils',\n    useFactory: StringUtilsFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function TopNavFactory($injector: { get: Function }) {\n    return $injector.get('TopNav');\n}\n\nconst TopNavProvider = {\n    provide: 'TopNav',\n    useFactory: TopNavFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function WT1Factory($injector: { get: Function }) {\n    return $injector.get('WT1');\n}\n\nconst WT1Provider = {\n    provide: 'WT1',\n    useFactory: WT1Factory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function $dkuSanitizeFactory($injector: { get: Function }) {\n    return $injector.get('$dkuSanitize');\n}\n\nconst $dkuSanitizeProvider = {\n    provide: '$dkuSanitize',\n    useFactory: $dkuSanitizeFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function ThrottleFactory($injector: { get: Function }) {\n    return $injector.get('Throttle');\n}\n\nconst ThrottleProvider = {\n    provide: 'Throttle',\n    useFactory: ThrottleFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function $rootScopeFactory($injector: { get: Function }) {\n    return $injector.get('$rootScope');\n}\n\nconst $rootScopeProvider = {\n    provide: '$rootScope',\n    useFactory: $rootScopeFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function ExportUtilsFactory($injector: { get: Function }) {\n    return $injector.get('ExportUtils');\n}\n\nconst ExportUtilsProvider = {\n    provide: 'ExportUtils',\n    useFactory: ExportUtilsFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function ExpressionsFactory($injector: { get: Function }) {\n    return $injector.get('Expressions');\n}\n\nconst ExpressionsProvider = {\n    provide: 'Expressions',\n    useFactory: ExpressionsFactory,\n    deps: ['$injector']\n};\n// -----------------\n\nexport function UpgradedFiltersFactory($injector: { get: Function }) {\n    return $injector.get('UpgradedFilters');\n}\n\nconst UpgradedFiltersProvider = {\n    provide: 'UpgradedFilters',\n    useFactory: UpgradedFiltersFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function localStorageServiceFactory($injector: { get: Function }) {\n    return $injector.get('localStorageService');\n}\n\nconst localStorageServiceProvider = {\n    provide: 'localStorageService',\n    useFactory: localStorageServiceFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function SamplingDataFactory($injector: { get: Function }) {\n    return $injector.get('SamplingData');\n}\n\nconst SamplingDataProvider = {\n    provide: 'SamplingData',\n    useFactory: SamplingDataFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function LoggerFactory($injector: { get: Function }) {\n    return $injector.get('Logger');\n}\n\nconst LoggerProvider = {\n    provide: 'Logger',\n    useFactory: LoggerFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function CreateModalFromTemplateFactory($injector: { get: Function }) {\n    return $injector.get('CreateModalFromTemplate');\n}\n\nconst CreateModalFromTemplateProvider = {\n    provide: 'CreateModalFromTemplate',\n    useFactory: CreateModalFromTemplateFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function SpinnerServiceFactory($injector: { get: Function }) {\n    return $injector.get('SpinnerService');\n}\n\nconst SpinnerServiceProvider = {\n    provide: 'SpinnerService',\n    useFactory: SpinnerServiceFactory,\n    deps: ['$injector']\n};\n\n// -----------------\n\nexport function upgradedProviders() {\n    return [\n        // Long term imports, to be removed when we totally remove AngularJS\n        $stateProvider,\n        $locationProvider,\n\n        // Services kept here until they are moved to Angular\n        stateUtilsProvider,\n        APIXHRServiceProvider,\n        DataikuAPIProvider,\n        DatasetUtilsProvider,\n        TopNavProvider,\n        WT1Provider,\n        FutureWatcherProvider,\n        FutureProgressModalProvider,\n        FutureWaitingProvider,\n        ProgressStackMessageBuilderProvider,\n        ThrottleProvider,\n        $rootScopeProvider,\n        CachedAPICallsProvider,\n        $dkuSanitizeProvider,\n        ExportUtilsProvider,\n        UpgradedFiltersProvider,\n        localStorageServiceProvider,\n        GraphZoomTrackerServiceProvider,\n        LoggerProvider,\n        CreateModalFromTemplateProvider,\n        SpinnerServiceProvider,\n        DKUConstantsProvider,\n        LegacyDialogsProvider,\n        StringUtilsProvider,\n        ExpressionsProvider,\n        SamplingDataProvider\n    ];\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DkuBsSelectComponent} from './selection/dku-bs-select/dku-bs-select.component';\nimport {AngularjsDkuBsSelectDirective} from '@app/widgets/selection/dku-bs-select/angularjs-dku-bs-select.directive';\nimport { DkuPopoverTriggerDirective } from './dropdowns/dku-popover-trigger.directive';\nimport { DkuPopoverComponent } from './dropdowns/dku-popover/dku-popover.component';\nimport { DkuBsSelectFormControlComponent } from '@shared/dku-bs-select-form-control/dku-bs-select-form-control.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { AngularjsDatasetSelectionOrderingDirective } from '@shared/components/dataset-selection-ordering-fields/angularjs-dataset-selection-ordering.directive';\nimport { DatasetSelectionOrderingFieldsComponent } from '@shared/components/dataset-selection-ordering-fields/dataset-selection-ordering-fields.component';\nimport { DatasetSelectorComponent } from './selection/dataset-selector/dataset-selector.component';\nimport { AngularjsDatasetSelectorDirective } from './selection/dataset-selector/angularjs-dataset-selector.directive';\nimport { DatasetSelectorFormControlComponent } from './selection/dataset-selector/dataset-selector-form-control.component';\n\n@NgModule({\n    declarations: [\n        DkuBsSelectComponent,\n        AngularjsDkuBsSelectDirective,\n        AngularjsDatasetSelectionOrderingDirective,\n        AngularjsDatasetSelectorDirective,\n        DkuPopoverTriggerDirective,\n        DkuPopoverComponent,\n        DkuBsSelectFormControlComponent,\n        DatasetSelectionOrderingFieldsComponent,\n        DatasetSelectorComponent,\n        DatasetSelectorFormControlComponent\n    ],\n    imports: [\n        CommonModule,\n        OverlayModule\n    ],\n    exports: [\n        DkuBsSelectComponent,\n        DkuPopoverTriggerDirective,\n        DkuPopoverComponent,\n        DkuBsSelectFormControlComponent,\n        DatasetSelectionOrderingFieldsComponent,\n        DatasetSelectorComponent,\n        DatasetSelectorFormControlComponent\n    ]\n})\nexport class WidgetsModule {\n}\n","import { NgModule } from '@angular/core';\nimport { EditableListInputComponent } from './editable-list-input.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatOptionModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    declarations: [\n        EditableListInputComponent\n    ],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MatAutocompleteModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatOptionModule\n    ],\n    exports: [\n        EditableListInputComponent\n    ]\n})\nexport class EditableListInputModule { }\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { EditableListComponent, EditableListArrowComponent, EditableListTemplateComponent, EditableListDeleteComponent, EditableListDragComponent } from './editable-list.component';\nimport { EditableListInputComponent } from '../editable-list-input/editable-list-input.component';\nimport { EditableListInputModule } from '../editable-list-input/editable-list-input.module';\n\n@NgModule({\n    declarations: [\n        EditableListComponent,\n        EditableListTemplateComponent,\n        EditableListArrowComponent,\n        EditableListDeleteComponent,\n        EditableListDragComponent\n    ],\n    imports: [\n        BrowserModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DragDropModule,\n        EditableListInputModule\n    ],\n    exports: [\n        EditableListComponent,\n        EditableListTemplateComponent,\n        EditableListArrowComponent,\n        EditableListDeleteComponent,\n        EditableListDragComponent,\n        EditableListInputComponent\n    ]\n})\nexport class EditableListModule { }\n","import { NgModule } from '@angular/core';\nimport { EditableListModule } from '../editable-list/editable-list.module';\nimport { KeyValuesListComponent } from './key-values-list.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { DowngradedKeyValuesListComponent } from './downgraded/downgraded-key-values-list.component';\n\n\n@NgModule({\n    declarations: [  \n        KeyValuesListComponent, \n        DowngradedKeyValuesListComponent \n    ],\n    imports: [\n        EditableListModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    exports: [ KeyValuesListComponent ],\n    entryComponents: [ DowngradedKeyValuesListComponent ]\n})\nexport class KeyValuesListModule { }\n","import { NgModule } from '@angular/core';\nimport { EditableListModule } from '../editable-list/editable-list.module';\nimport { ValuesListComponent } from './values-list.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DowngradedValuesListComponent } from './downgraded/downgraded-values-list.component';\n\n\n@NgModule({\n    declarations: [ \n        ValuesListComponent, \n        DowngradedValuesListComponent \n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        EditableListModule\n    ],\n    exports: [ ValuesListComponent ],\n    entryComponents: [ DowngradedValuesListComponent ]\n})\nexport class ValuesListModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { EditableListModule } from '../editable-list/editable-list.module';\nimport { CredentialsListComponent } from './credentials-list.component';\nimport { DowngradedCredentialsListComponent } from './downgraded/downgraded-credentials-list.component';\n\n\n@NgModule({\n    declarations: [ \n        CredentialsListComponent, \n        DowngradedCredentialsListComponent \n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        EditableListModule\n    ],\n    exports: [ CredentialsListComponent ],\n    entryComponents: [ DowngradedCredentialsListComponent ]\n})\nexport class CredentialsListModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CredentialsListModule } from '../credentials-list/credentials-list.module';\nimport { ConnectionPropertiesListComponent } from './connection-properties-list.component';\nimport { DowngradedConnectionPropertiesListComponent } from './downgraded/downgraded-connection-properties-list.component';\n\n\n@NgModule({\n    declarations: [ ConnectionPropertiesListComponent, DowngradedConnectionPropertiesListComponent ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CredentialsListModule\n    ],\n    exports: [ ConnectionPropertiesListComponent ],\n    entryComponents: [ DowngradedConnectionPropertiesListComponent ]\n})\nexport class ConnectionPropertiesListModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ModalHeaderComponent } from '@shared/modals/modal-header/modal-header.component';\nimport { ConfirmModalComponent } from '@shared/modals/confirm-modal/confirm-modal.component';\nimport { AckModalComponent } from '@shared/modals/ack-modal/ack-modal.component';\nimport { PromptModalComponent } from '@shared/modals/prompt-modal/prompt-modal.component';\nimport { SelectModalComponent } from '@shared/modals/select-modal/select-modal.component';\n\n@NgModule({\n    imports: [\n        CommonModule, FormsModule\n    ],\n    declarations: [\n        ModalHeaderComponent,\n        ConfirmModalComponent,\n        AckModalComponent,\n        PromptModalComponent,\n        SelectModalComponent,\n    ],\n    exports: [\n        ModalHeaderComponent,\n        ConfirmModalComponent,\n        AckModalComponent,\n        PromptModalComponent,\n        SelectModalComponent,\n    ],\n    entryComponents: [\n        ConfirmModalComponent,\n        AckModalComponent,\n        PromptModalComponent,\n        SelectModalComponent,\n    ]\n})\nexport class ModalsModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SmartLogTailComponent } from './components/smart-log-tail/smart-log-tail.component';\nimport { ErrorFixability } from './components/error-fixability/error-fixability.component';\nimport { APIErrorAlertComponent } from './components/api-error-alert/api-error-alert.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ErrorFixability,\n        SmartLogTailComponent,\n        APIErrorAlertComponent\n    ],\n    exports: [\n        ErrorFixability,\n        SmartLogTailComponent,\n        APIErrorAlertComponent\n    ]\n})\nexport class DataikuAPIModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ]\n})\nexport class RequestsModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: []\n})\nexport class NavModule { \n    \n}\n","import {NgModule, Optional, SkipSelf} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport { DataikuAPIModule } from '@core/dataiku-api/dataiku-api.module';\nimport { RequestsModule } from '@core/requests/requests.module';\nimport { NavModule } from '@core/nav/nav.module';\nimport { WaitingOverlayComponent } from './overlays/waiting-overlay/waiting-overlay.component';\n\n/*\n* This module and all sub-modules gather all Services that should be singletons and that will be loaded at startup\n* by AppModule. This module should not contain anything else\n*\n* For Components, Pipes and Services that don't need to be singletons and don't need to be loaded at all time\n* please use \"Shared\" (or Feature if there is no need to import from another Feature module)\n*\n*/\n@NgModule({\n    imports: [\n        CommonModule,\n        DataikuAPIModule,\n        NavModule,\n        RequestsModule,\n    ],\n    declarations: [\n        WaitingOverlayComponent\n    ],\n    providers: [],\n    entryComponents: [WaitingOverlayComponent]\n})\nexport class CoreModule {\n    // make sure CoreModule is imported only by the AppModule\n    constructor(\n        @Optional() @SkipSelf() parentModule: CoreModule\n    ) {\n        if (parentModule) {\n            throw new Error('CoreModule is already loaded. Import only in AppModule');\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { realAny } from 'dku-frontend-core';\n\n@Pipe({\n    name: 'entries'\n})\nexport class EntriesPipe implements PipeTransform {\n    transform(object?: object): {key: string, value: realAny}[] {\n        if (!object) {\n            return [];\n        }\n        if (Array.isArray(object)) {\n            throw new Error(\"Cannot compute the entries of an array\"); // We could but it's specific the following loop iterates over keys as string\n        }\n        let kv = [];\n        for (let key in object) {\n            if (object.hasOwnProperty(key)) {\n                let value = (<any>object)[key];\n                kv.push({key, value});\n            }\n        }\n        return kv;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'niceConst'\n})\nexport class NiceConstPipe implements PipeTransform {\n\n    transform(input: string): string {\n        if (!input || !input.length) {\n            return '';\n        }\n        input = input.replace(/[\\s_]+|([a-z])(?=[A-Z])/g, '$1 ').trim();\n        let nice = input.charAt(0).toUpperCase() + input.substr(1).toLowerCase();\n        if (nice == 'Lambda service') {\n            nice = 'API service';\n        }\n        if (nice == 'Sql notebook') {\n            nice = 'SQL notebook';\n        }\n        return nice;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Dict } from 'dku-frontend-core';\n\n@Pipe({\n    name: 'infoMessageAlertClass'\n})\nexport class InfoMessageAlertClassPipe implements PipeTransform {\n\n    transform(infoMessage: InfoMessage) {\n        return dict[infoMessage.severity];\n    }\n\n}\n\nconst dict: Dict<string> = {\n    'ERROR': 'alert-danger',\n    'WARNING': 'alert-warning',\n    'INFO': 'alert-info'\n};\n\ninterface InfoMessage { //TODO move\n    severity: string;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { fairAny } from 'dku-frontend-core';\n\ndeclare let d3: fairAny;\n\n@Pipe({\n    name: 'pluralize'\n})\nexport class PluralizePipe implements PipeTransform {\n\n    transform(num: number, singular?: string, plural?: string, d3Formatter?: (n: number|any) => string, no?: boolean): string {\n        if (no && num == 0) {\n            return no === true ? 'no ' + plural : no;\n        }\n        let quantity = no && num == 0 ? 'no' : (d3Formatter ? d3.format(d3Formatter)(num) : num);\n        let noun = num > 1 ? plural : singular;\n        return quantity + ' ' + noun;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'replace'\n})\nexport class ReplacePipe implements PipeTransform { //TODO rename\n\n    // input | replace:search_str:replacement\n    // input | replace:search_regexp:flags:replacement\n    transform(input: any, first: string): any {\n        let nFirst = parseInt(first, 10);\n        let out: any[] = [];\n        if (nFirst >= input.length) {\n            return out;\n        }\n        for (let i = nFirst; i < input.length; i++) {\n            out.push(input[i]);\n        }\n        return out;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Dict } from 'dku-frontend-core';\n\n@Pipe({\n    name: 'escapeHtml'\n})\nexport class EscapeHtmlPipe implements PipeTransform {\n\n    private chars = /[<>&'\"`]/g;\n    private map: Dict<string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '&': '&amp;',\n        '\"': '&quot;',\n        \"'\": '&apos;',\n        \"`\": '&#96;',\n    };\n\n    transform(s: string): string {\n        return s.replace(this.chars, x => this.map[x]);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'percentage'\n})\nexport class PercentagePipe implements PipeTransform {\n    transform(numerator?: number, denominator?: number): string|undefined {\n        if (numerator == undefined || denominator == undefined) {\n            return undefined;\n        }\n        if (!denominator) {\n            if (numerator) {\n                return undefined;\n            } else {\n                return '0%';\n            }\n        }\n        return Math.round(numerator / denominator * 100) + '%';\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport d3 from 'd3';\n\n@Pipe({\n  name: 'smartNumber'\n})\nexport class SmartNumberPipe implements PipeTransform {\n\n  transform(d: number|undefined): string {\n    let expFormatter = d3.format(\".2e\");\n    let siFormatter = d3.format(\".2s\");\n    let digitFormatters : ((n: number)=>string)[] = [];\n    for (var i = 0; i < 6; i++) {\n        digitFormatters.push(d3.format(\".\" + i + \"f\"));\n    }\n    if (typeof d != \"number\") {\n        return \"NA\";\n    }\n    var abs = Math.abs(d);\n    if (abs >= 1e12) {\n        return expFormatter(d);\n    } else if (abs >= 100000) {\n        return siFormatter(d);\n    } else if (abs >= 100) {\n        return digitFormatters[0](d);\n    } else if (abs >= 1) {\n        if (abs % 1 === 0) return digitFormatters[0](d);\n        return digitFormatters[2](d);\n    } else if (abs === 0) {\n        return digitFormatters[0](d);\n    } else if (abs < 0.00001) {\n        return d.toPrecision(3);\n    } else {\n        var x = Math.min(5, 2 - (Math.log10(abs) | 0));\n        return digitFormatters[x](d);\n    }\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'smartPercentage'\n})\nexport class SmartPercentagePipe implements PipeTransform {\n\n    transform(ratio: number, precision: number, spaces: number) {\n        precision = Math.max(+(precision || 0), 0);\n        let tens = Math.pow(10, precision);\n        let min = 1 / tens / 100; // e.g. precision = 2 =>  0.01\n        let max = 1 - min;        //                    => 99.99\n        let out = [];\n        if (ratio < 1 && ratio > max) {\n            ratio = max;\n            out.push('>');\n        } else if (ratio > 0 && ratio < min) {\n            ratio = min;\n            out.push('<');\n        }\n        out.push((Math.round(ratio * 100 * tens) / tens).toFixed(precision), '%');\n        return out.join(spaces ? '\\u00A0' : '');\n    }\n\n}\n","export let now = new Date().getTime();\nconst NOW_REFRESH_INTERVAL = 5 * 1000;\n\n// We don't want \"now\" to be recomupted constantly or it will cause frequent DOM refresh\nsetInterval(function() {\n    now = new Date().getTime();\n}, NOW_REFRESH_INTERVAL);\n\nexport function friendlyDuration(diffInSeconds: number) {\n    let sec = Math.floor((diffInSeconds >= 60 ? diffInSeconds % 60 : diffInSeconds));\n    let min = Math.floor((diffInSeconds = (diffInSeconds / 60)) >= 60 ? diffInSeconds % 60 : diffInSeconds);\n    let hrs = Math.floor((diffInSeconds = (diffInSeconds / 60)) >= 24 ? diffInSeconds % 24 : diffInSeconds);\n    let days = Math.floor( (diffInSeconds = (diffInSeconds / 24)) >= 30 ? diffInSeconds % 30 : diffInSeconds);\n    let months = Math.floor( (diffInSeconds = (diffInSeconds / 30)) >= 12 ? diffInSeconds % 12 : diffInSeconds);\n    let years = Math.floor( (diffInSeconds = (diffInSeconds / 12)));\n    let sb = \"\";\n    if (years > 0) {\n        if (years == 1) {\n            sb += (\"1 year\");\n        } else {\n            sb += (years + \" years\");\n        }\n        if (years <= 6 && months > 0) {\n            if (months == 1) {\n                sb += (\" and one month\");\n            } else {\n                sb += (\" and \" + months + \" months\");\n            }\n        }\n    } else if (months > 0) {\n        if (months == 1) {\n            sb += (\"one month\");\n        } else {\n            sb += (months + \" months\");\n        }\n        if (months <= 6 && days > 0) {\n            if (days == 1) {\n                sb += (\" and a day\");\n            } else {\n                sb += (\" and \" + days + \" days\");\n            }\n        }\n    } else if (days > 0) {\n        if (days == 1) {\n            sb += (\"one day\");\n        } else {\n            sb += (days + \" days\");\n        }\n        if (days <= 3 && hrs > 0) {\n            if (hrs == 1) {\n                sb += (\" and one hour\");\n            } else {\n                sb += (\" and \" + hrs + \" hours\");\n            }\n        }\n    } else if (hrs > 0) {\n        if (hrs == 1) {\n            sb += (\"one hour\");\n        } else {\n            sb += (hrs + \" hours\");\n        }\n        if (min > 1) {\n            sb += (\" and \" + min + \" minutes\");\n        }\n    } else if (min > 0) {\n        if (min == 1) {\n            sb += (\"one minute\");\n        } else {\n            sb += (min + \" minutes\");\n        }\n        if (sec > 1) {\n            sb += (\" and \" + sec + \" seconds\");\n        }\n    } else {\n        if (sec <= 1) {\n            sb += (\"about a second\");\n        } else {\n            sb += (\"about \" + sec + \" seconds\");\n        }\n    }\n    return sb;\n}\n\nexport function durationHHMMSS(diffInSeconds: number) {\n    let sec = Math.floor((diffInSeconds >= 60 ? diffInSeconds % 60 : diffInSeconds));\n    let min = Math.floor((diffInSeconds = (diffInSeconds / 60)) >= 60 ? diffInSeconds % 60 : diffInSeconds);\n    let hours = Math.floor( diffInSeconds / 60);\n    let sb = \"\";\n    if (hours > 0) {\n        sb += (hours + \"h \");\n    }\n    if (min > 0) {\n        sb += (min + \"m \");\n    }\n    sb += (sec + \"s\");\n    return sb;\n}\n\nexport function durationHHMMSSPadded(diffInSeconds: number) {\n    if (diffInSeconds == 0) {\n        diffInSeconds = 1;\n    }\n    let sec = Math.floor((diffInSeconds >= 60 ? diffInSeconds % 60 : diffInSeconds));\n    let min = Math.floor((diffInSeconds = (diffInSeconds / 60)) >= 60 ? diffInSeconds % 60 : diffInSeconds);\n    let hours = Math.floor( diffInSeconds / 60);\n\n    function pad(number: number) {\n        if (number < 10) {\n            return \"0\" + number;\n        } else {\n            return number;\n        }\n    }\n    return pad(hours) + \"h\" + pad(min) + \"m\" + pad(sec) + \"s\";\n}\n\n\nexport function friendlyDurationShort(seconds: number, ref?: string, noSeconds = false) {\n    let sec    = Math.floor(seconds >= 60 ? seconds % 60 : seconds),\n        min    = Math.floor((seconds = (seconds / 60)) >= 60 ? seconds % 60 : seconds),\n        hours  = Math.floor((seconds = (seconds / 60)) >= 24 ? seconds % 24 : seconds),\n        days   = Math.floor((seconds = (seconds / 24)) >= 30 ? seconds % 30 : seconds),\n        months = Math.floor((seconds = (seconds / 30)) >= 12 ? seconds % 12 : seconds),\n        years  = Math.floor((seconds = (seconds / 12))),\n        sb = \"\";\n\n    if (years > 0) {\n        sb = (years + \" year\" + (years > 1 ? \"s\" : \"\"));\n    } else if (months > 0) {\n        sb = (months + \" month\" + (months > 1 ? \"s\" : \"\"));\n    } else if (days > 0) {\n        sb = (days + \" day\" + (days > 1 ? \"s\" : \"\"));\n    } else if (hours > 0) {\n        sb = (hours + \" hour\" + (hours > 1 ? \"s\" : \"\"));\n    } else if (min > 0) {\n        sb = (min + \" minute\" + (min > 1 ? \"s\" : \"\"));\n    } else if (!noSeconds && sec > 0) {\n        sb = (sec + \" second\" + (sec > 1 ? \"s\" : \"\"));\n    }\n\n    switch (ref) {\n        case 'ago':   return sb ? sb + \" ago\"   : \"just now\";\n        case 'in':    return sb ? \"in \" + sb    : \"immediately\";\n        default:      return sb ? sb            : \"< 1 \" + (noSeconds ? \"minute\" : \"second\");\n    }\n}\n\nexport function dateDayDiff(date1: number, date2: number) {\n    let d1 = new Date(date1);\n    let d2 = new Date(date2);\n    d1.setHours(0);\n    d1.setMinutes(0);\n    d1.setSeconds(0);\n    d1.setMilliseconds(0);\n    d2.setHours(0);\n    d2.setMinutes(0);\n    d2.setSeconds(0);\n    d2.setMilliseconds(0);\n    let dayLength = 24 * 60 * 60 * 1000;\n    return Math.floor(d1.getTime() / dayLength) - Math.floor(d2.getTime() / dayLength);\n}\n\nexport function gentleTruncate(str: string, len: number) {\n    /**\n     * Truncate a string to make sure it takes at most\n     * n characters.\n     * Whenever possible truncates on special chars.\n     *\n     * If str is not a string, returns str unchanged.\n     */\n    if ((typeof str != \"string\") || (str.length <= len)) {\n        return str;\n    }\n\n    let cutOn = /[ ,\\.,;\\-\\\\\\\"\\n\\?\\!\\|]/g;\n    let truncated = str.substring(0, len - 1);\n    let lastSeparatorIdx = regexLastIndexOf(cutOn, truncated);\n\n    // we don't want to cut more too much.\n    if (lastSeparatorIdx > len / 2) {\n        truncated = str.substring(0, lastSeparatorIdx);\n    }\n    return truncated + '…';\n}\n\nfunction regexLastIndexOf(ptn: RegExp, str: string) {\n    /* Same as lastIndexOf, but for regexp.\n     * Returns -1 if not found.\n     */\n    let res = -1;\n    let m = null;\n    do {\n        m = ptn.exec(str);\n        if (m) {\n            res = m.index;\n        }\n    } while (m);\n    return res;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { now, friendlyDurationShort } from '@shared/pipes/date-pipes/date-pipes-common';\n\n@Pipe({\n    name: 'friendlyTimeDeltaShort'\n})\nexport class FriendlyTimeDeltaShortPipe implements PipeTransform {\n\n    transform(input: string|number, reference?: number): string {\n        reference = reference || now;\n        if (typeof input == 'string') {\n            input = parseInt(input, 10);\n        }\n        let diffInSeconds = (reference - input) / 1000;\n        return friendlyDurationShort(diffInSeconds, 'ago', true);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({\n    name: 'friendlyDateTime'\n})\nexport class FriendlyDateTimePipe implements PipeTransform {\n\n    transform(time: number): string {\n        function sameDay(date1: Date, date2: Date) {\n            return date1.getFullYear() === date2.getFullYear() &&\n                   date1.getMonth() === date2.getMonth() &&\n                   date1.getDate() === date2.getDate();\n        }\n\n        let today = new Date(),\n            yesterday = new Date(),\n            tomorrow = new Date();\n        yesterday.setDate(yesterday.getDate() - 1);\n        tomorrow.setDate(tomorrow.getDate() + 1);\n\n        let datePipe = new DatePipe(\"en-US\");\n        let date = new Date(time);\n        let datePart;\n        if (sameDay(date, today)) {\n            datePart = 'Today';\n        } else if (sameDay(date, yesterday)) {\n            datePart = 'Yesterday';\n        } else if (sameDay(date, tomorrow)) {\n            datePart = 'Tomorrow';\n        } else {\n            datePart = datePipe.transform(date, 'EEEE, d MMMM');\n        }\n\n        return datePart + ' at ' + datePipe.transform(date, 'HH:mm');\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { friendlyDuration } from '@shared/pipes/date-pipes/date-pipes-common';\n\n@Pipe({\n    name: 'friendlyDuration'\n})\nexport class FriendlyDurationPipe implements PipeTransform {\n\n    transform(input: string|number): string {\n        if (typeof input == 'string') {\n            input = parseInt(input, 10);\n        }\n        return friendlyDuration(input / 1000);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { durationHHMMSS } from '@shared/pipes/date-pipes/date-pipes-common';\n\n@Pipe({\n    name: 'durationHHMMSS'\n})\nexport class DurationHHMMSSPipe implements PipeTransform {\n\n    transform(input: string|number) {\n        if (typeof input == 'string') {\n            input = parseInt(input, 10);\n        }\n        return durationHHMMSS(input / 1000);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'sliceList'\n})\nexport class SliceListPipe implements PipeTransform {\n\n    transform<T>(list: T[], from: number, to: number): T[] {\n        if (!list || list.length <= from) {\n            return [];\n        }\n        return list.slice(from, to);\n    }\n\n}\n","import { Pipe, PipeTransform, Inject } from '@angular/core';\nimport { fairAny } from 'dku-frontend-core';\n\n@Pipe({\n    name: 'orderBy'\n})\nexport class OrderByPipe implements PipeTransform {\n\n    constructor(\n      @Inject('UpgradedFilters') private upgradedFilters: fairAny\n    ) {}\n\n    transform<T>(input: T[], orders: string|string[]): T[] {\n        return this.upgradedFilters.orderBy(input, orders);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'filesize'\n})\nexport class FilesizePipe implements PipeTransform {\n\n    transform(size: number) {\n        if (size >= 1024 * 1024 * 1024) {\n            return Math.round(size / 1024 / 1024 / 1024 * 100) / 100 + ' GB';\n        } else if (size >= 1024 * 1024) {\n            return Math.round(size / 1024 / 1024 * 100) / 100 + ' MB';\n        } else {\n            return Math.round(size / 1024 * 100) / 100 + ' KB';\n        }\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'nicePrecision'\n})\nexport class NicePrecisionPipe implements PipeTransform {\n\n    transform(val: any, p: any): any {\n        if (val == undefined) {\n            return undefined;\n        }\n        if (val < Math.pow(10, p)) {\n            if (Math.round(val) == val) {\n                /* Don't add stuff to integers */\n                return val.toFixed(0);\n            } else {\n                return val.toPrecision(p);\n            }\n        } else {\n            return val.toFixed(0);\n        }\n\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { friendlyDurationShort } from '@shared/pipes/date-pipes/date-pipes-common';\nimport { fairAny } from 'dku-frontend-core';\n\n@Pipe({\n    name: 'friendlyDurationShort'\n})\nexport class FriendlyDurationShortPipe implements PipeTransform {\n\n    transform(input: string, ref?: fairAny, noSeconds?: boolean): string {\n        return friendlyDurationShort(parseInt(input, 10) / 1000, ref, noSeconds);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'mlTaskTypeToIcon'\n})\nexport class MlTaskTypeToIconPipe implements PipeTransform {\n\n    transform(taskType: string, predictionType?: string): any {\n        if (!taskType || !predictionType) {\n            return;\n        }\n        if (taskType.toLowerCase() == 'clustering') {\n            return 'icon-clustering';\n        }\n        return 'icon-prediction-' + predictionType.toLowerCase();\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'backendTypeToIcon'\n})\nexport class BackendTypeToIconPipe implements PipeTransform {\n\n    transform(backendType: string, _args?: string): any {\n        if (!backendType) {\n            return;\n        }\n\n        return 'icon-ml icon-ml-' + backendType.toLowerCase();\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * `[n] | range`        => 0 .. (n-1)\n * `[from, to] | range` => from .. to (inclusive)\n */\n@Pipe({\n    name: 'range'\n})\nexport class RangePipe implements PipeTransform {\n    getArray(min: number, max: number) {\n        let arr = [];\n        if (max < min) {\n            [max, min] = [min, max]; //swapping variables\n        }\n        for (let i = min; i < max; i++) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    transform(value: Array<number>): Array<number> {\n        if (value.length >= 2) {\n            let min = value[0];\n            let max = value[value.length - 1] + 1; // +1 so that it's inclusive\n            return this.getArray(min, max);\n        } else if (value.length == 1) {\n            return this.getArray(0, value[0]);\n        }\n        return [];\n    }\n}\n","import { StripHtmlPipe } from './text-pipes/strip-html.pipe';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EntriesPipe } from './entries.pipe';\nimport { NiceConstPipe } from './nice-const.pipe';\nimport { InfoMessageAlertClassPipe } from './info-message-alert-class.pipe';\n\nimport { CapitalizePipe } from './capitalize.pipe';\nimport { PluralizePipe } from './pluralize.pipe';\nimport { ReplacePipe } from './replace.pipe';\nimport { EscapeHtmlPipe } from './escaping/escape-html.pipe';\n\nimport { PercentagePipe } from './number-pipes/percentage.pipe';\nimport { SmartNumberPipe } from './number-pipes/smart-number.pipe';\nimport { SmartPercentagePipe } from './smart-percentage.pipe';\n\nimport { FriendlyTimeDeltaShortPipe } from './date-pipes/friendly-time-delta-short.pipe';\nimport { FriendlyDateTimePipe } from './date-pipes/friendly-date-time.pipe';\nimport { FriendlyDurationPipe } from './date-pipes/friendly-duration.pipe';\nimport { DurationHHMMSSPipe } from './date-pipes/duration-hhmmss.pipe';\n\nimport { SliceListPipe } from './list-pipes/slice-list.pipe';\nimport { OrderByPipe } from '@shared/pipes/list-pipes/order-by.pipe';\nimport { FormatModalityPipe } from '@shared/pipes/list-pipes/format-modality.pipe';\n\nimport { FilesizePipe } from './filesize.pipe';\nimport { NicePrecisionPipe } from '@shared/pipes/number-pipes/nice-precision.pipe';\nimport { FriendlyDurationShortPipe } from '@shared/pipes/date-pipes/friendly-duration-short.pipe';\nimport { MlTaskTypeToIconPipe } from '@shared/pipes/visualization/ml-task-type-to-icon.pipe';\nimport { BackendTypeToIconPipe } from '@shared/pipes/visualization/backend-type-to-icon.pipe';\nimport { PlurifyPipe } from '@shared/pipes/text-pipes/plurify.pipe';\nimport { RangePipe } from '@shared/pipes/list-pipes/range.pipe';\nimport { FilterPipe } from '@shared/pipes/filter.pipe';\nimport { DkuEvaluatePermissionsPipe } from './dku-evaluate-permissions.pipe';\nimport { DelayWhenFalsePipe } from './delay-when-false.pipe';\nimport { SmarterNumberPipe } from './number-pipes/smarter-number.pipe';\n\nconst allPipes = [\n    EntriesPipe,\n    NiceConstPipe,\n    InfoMessageAlertClassPipe,\n\n    CapitalizePipe,\n    PluralizePipe,\n    ReplacePipe,\n    EscapeHtmlPipe,\n\n    PercentagePipe,\n    SmartPercentagePipe,\n    SmartNumberPipe,\n    SmarterNumberPipe,\n\n    FriendlyTimeDeltaShortPipe,\n    FriendlyDateTimePipe,\n    FriendlyDurationPipe,\n    DurationHHMMSSPipe,\n    FriendlyDurationShortPipe,\n\n    SliceListPipe,\n    OrderByPipe,\n    FormatModalityPipe,\n    RangePipe,\n    NicePrecisionPipe,\n    FilesizePipe,\n    PlurifyPipe,\n    FilterPipe,\n    StripHtmlPipe,\n\n    MlTaskTypeToIconPipe,\n    BackendTypeToIconPipe,\n\n    DkuEvaluatePermissionsPipe,\n    DelayWhenFalsePipe\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: allPipes,\n    exports: allPipes\n})\nexport class PipesModule {\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StandaloneWT1Service, LegacyWT1Service, WT1Service } from './wt1.service';\nimport { Wt1ClickDirective } from './wt1-click.directive';\n\n@NgModule({\n    declarations: [Wt1ClickDirective],\n    imports: [\n        CommonModule\n    ],\n    exports: [Wt1ClickDirective]\n})\nexport class DataikuWT1Module {\n    static standalone(): ModuleWithProviders<DataikuWT1Module> {\n        return {\n            ngModule: DataikuWT1Module,\n            providers: [{ provide: WT1Service, useClass: StandaloneWT1Service }]\n        };\n    }\n    static legacy(): ModuleWithProviders<DataikuWT1Module> {\n        return {\n            ngModule: DataikuWT1Module,\n            providers: [{ provide: WT1Service, useClass: LegacyWT1Service }]\n        };\n    }\n}\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { Observable, Subscriber, interval, from } from 'rxjs';\nimport { publish, refCount, switchMapTo, filter, distinctUntilChanged } from 'rxjs/operators';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n\n/**\n * Reading/writing the size of a lot of elements can trigger a lot of forced browser reflows\n *\n * In order to alleviate this, we carefully control the order of operations with a master clock\n * - TICK: read height of all elements\n * - TOCK: write new height of all elements if it has changed\n */\nconst TICK = 1;\nconst TOCK = 2;\nconst MASTER_CLOCK_INTERVAL = 300;\n\n@UntilDestroy()\n@Injectable({\n    providedIn: 'root'\n})\nexport class HeightService implements OnDestroy {\n    items: Map<string, Map<Subscriber<number | undefined>, number | undefined>> = new Map();\n    readClock$: Observable<number>;\n\n    constructor(private ngZone: NgZone) {\n        this.ngZone.runOutsideAngular(() => {\n            const masterClock$ = interval(MASTER_CLOCK_INTERVAL)\n                .pipe(switchMapTo(from([TICK, TOCK])), publish(), refCount());\n\n            this.readClock$ = masterClock$.pipe(filter(type => type === TICK), publish(), refCount());\n            masterClock$.pipe(filter(type => type === TOCK)).pipe(untilDestroyed(this)).subscribe(() => {\n                this.items.forEach(map => {\n                    // Compute max height\n                    let maxHeight: number | undefined;\n                    map.forEach(height => {\n                        if (maxHeight !== undefined && height !== undefined) {\n                            maxHeight = Math.max(maxHeight, height);\n                        } else {\n                            maxHeight = height;\n                        }\n                    });\n                    // Broadcast max height\n                    if (maxHeight !== undefined) {\n                        map.forEach((_, observer) => observer.next(maxHeight));\n                    }\n                });\n            });\n        });\n    }\n\n    registerHeight(key: string, heightReader: () => number | undefined): Observable<number> {\n        return this.ngZone.runOutsideAngular(() => {\n            return new Observable<number>(observer => {\n                const subscription = this.readClock$.subscribe(() => {\n                    if (!this.items.has(key)) {\n                        this.items.set(key, new Map());\n                    }\n                    this.items.get(key)!.set(observer, heightReader());\n                });\n\n                return () => {\n                    subscription.unsubscribe();\n\n                    if (this.items.has(key)) {\n                        this.items.get(key)!.delete(observer);\n                        if (!this.items.get(key)!.size) {\n                            this.items.delete(key);\n                        }\n                    }\n                };\n            }).pipe(distinctUntilChanged());\n        });\n    }\n\n    ngOnDestroy() { }\n}\n","import { ElementRef, OnInit, Input, OnDestroy, Component, ViewChild, ChangeDetectionStrategy, NgZone, OnChanges } from '@angular/core';\nimport { HeightService } from './height-equalizer.service';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'height-equalizer',\n    templateUrl: './height-equalizer.component.html',\n    styleUrls: ['./height-equalizer.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeightEqualizerComponent implements OnInit, OnDestroy {\n    @ViewChild('child', { static: true }) child: ElementRef;\n\n    key$ = new ReplaySubject<string>(1);\n    subscription: Subscription;\n\n    constructor(\n        private heightService: HeightService,\n        private elementRef: ElementRef,\n        private ngZone: NgZone\n    ) { }\n\n    getChildHeight(): number | undefined {\n        if (this.child && this.child.nativeElement) {\n            return this.child.nativeElement.offsetHeight;\n        }\n        return undefined;\n    }\n\n    setParentHeight(height: number) {\n        if (this.elementRef && this.elementRef.nativeElement) {\n            // Directly update the DOM element without Angular\n            this.elementRef.nativeElement.style.height = height + 'px';\n        }\n    }\n\n    @Input() set key(newKey: string) {\n        this.key$.next(newKey);\n    }\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.subscription = this.key$.pipe(\n                switchMap(key => this.heightService.registerHeight(key, () => this.getChildHeight())),\n            ).subscribe(height => this.setParentHeight(height));\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n","<div #child>\n    <ng-content></ng-content>\n</div>\n","<!-- Note about qa-selectors:\n\n    Most card bodies don't need to add 'eda-card-body' because they \n    are almost always embedded within a <card-body> component. This component \n    is an exception because it is always used directly \n    (outside of any <card-body> wrapper) -->\n\n<div\n    class=\"card-column\"\n    [qa]=\"{'eda-card-body': {'id': params.id, 'type': params.type}}\"\n    *ngIf=\"collapseStates$ | async as collapseStates\"\n>\n    <div\n        *ngFor=\"let card of params.cards; let index = index; trackBy: trackByCardId\"\n        class=\"stat-card\"\n        [qa]=\"{'eda-stat-card': {id: params.id, type: params.type}}\"\n    >\n        <div class=\"stat-card__title\">\n            <span\n                (click)=\"toggleStatCard(card, !collapseStates[index])\"\n                class=\"stat-card__collapse\"\n            >\n                <i\n                    *ngIf=\"showCollapsingControls\"\n                    class=\"icon-chevron-right chevron\"\n                    [class.chevron--collapsed]=\"collapseStates[index]\"\n                ></i>\n                &nbsp;\n                {{ card | cardTitle: 'basic' }}\n            </span>\n            <card-menu\n                [params]=\"card\"\n                [columnParams]=\"params\"\n                [readOnly]=\"readOnly\"\n                [extendedActions]=\"extendedActions\"\n                (action)=\"handleStatCardAction(index, $event)\"\n                [deletable]=\"false\"\n                class=\"pull-right eda__header-menu\"\n            ></card-menu>\n        </div>\n        <div [@fadeInOut]=\"collapseStates[index] ? 'closed' : 'opened'\">\n            <div *ngIf=\"!collapseStates[index] | delayWhenFalse\">\n                <height-equalizer [key]=\"getCardKey(card)\">\n                    <card-body\n                        class=\"stat-card__body\"\n                        [params]=\"card\"\n                        [results]=\"results.results[index]\"\n                        [readOnly]=\"readOnly\"\n                        [extendedActions]=\"extendedActions\"\n                        [hasFixedHeight]=\"true\"\n                        (action)=\"handleStatCardAction(index, $event)\"\n                    ></card-body>\n                </height-equalizer>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, SimpleChanges, OnChanges } from '@angular/core';\nimport { ColumnCard, Card, AbstractHeaderCard } from 'src/generated-sources';\nimport { CardActionType, CardAction } from '@features/eda/worksheet/cards/events';\nimport { combineLatest, Observable, ReplaySubject } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\nimport { fadeInOutHeight } from '@shared/animations/fade-in-out';\nimport { CollapsingService, CollapsibleStatCard, UpdatableCollapsingService } from '@features/eda/collapsing.service';\n\n@Component({\n    selector: 'column-card-body',\n    templateUrl: './column-card-body.component.html',\n    styleUrls: ['./column-card-body.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [fadeInOutHeight]\n})\nexport class ColumnCardBodyComponent implements OnChanges {\n    @Input() params: ColumnCard;\n    @Input() results: ColumnCard.ColumnCardResult;\n    @Output() action = new EventEmitter<CardAction>();\n\n    @Input() headerParams: AbstractHeaderCard;\n    @Output() headerAction = new EventEmitter<CardAction>();\n\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n\n    showCollapsingControls: boolean;\n\n    private params$ = new ReplaySubject<ColumnCard>(1);\n    private headerParams$ = new ReplaySubject<AbstractHeaderCard>(1);\n    collapseStates$: Observable<boolean[]>;\n\n    constructor(public collapsingService: CollapsingService) {\n        this.collapseStates$ = combineLatest([this.params$, this.headerParams$]).pipe(\n            map(([params, headerParams]) => {\n                return params.cards\n                    .map(card => new CollapsibleStatCard(headerParams, params.column, card.type))\n                    .map(collapsible => this.collapsingService.watchIsCollapsed(collapsible))\n            }),\n            switchMap((watchers) => combineLatest(watchers))\n        );\n        this.showCollapsingControls = this.collapsingService instanceof UpdatableCollapsingService;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.params$.next(this.params);\n        }\n        if (changes.headerParams) {\n            this.headerParams$.next(this.headerParams);\n        }\n    }\n\n    handleStatCardAction(index: number, action: CardAction) {\n        if (action.type === CardActionType.UPDATE) {\n\n            if (action.updateSiblings) {\n                const newColumnCards = this.headerParams.cards.map((columnCard) => {\n                    if (columnCard.type !== 'column_card') {\n                        // Never happen (typechecking purpose)\n                        return columnCard;\n                    }\n                    if (columnCard.column.type !== this.params.column.type) {\n                        // Only update siblings having the same type (categorical, numerical)\n                        return columnCard;\n                    }\n                    const existingStatCard = this.params.cards[index];\n                    return {\n                        ...columnCard,\n                        cards: columnCard.cards.map(statCard => {\n                            if (statCard.type !== existingStatCard.type) {\n                                // Only update stat cards having the same type (histogram, quantiles, etc)\n                                return statCard;\n                            }\n                            // Override existing card with new stat card:\n                            // - Referenced columns will be incorrect: they are fixed by the backend\n                            // - The ID shouldn't be modified: we preserve it\n                            return {\n                                ...action.newParams,\n                                id: statCard.id\n                            };\n                        })\n                    };\n                });\n\n                const newHeaderParams = {\n                    ...this.headerParams,\n                    cards: newColumnCards\n                };\n\n                this.headerAction.emit({ type: CardActionType.UPDATE, newParams: newHeaderParams });\n            } else {\n                const newParams: ColumnCard = {\n                    ...this.params,\n                    cards: [...this.params.cards!]\n                };\n\n                newParams.cards![index] = action.newParams;\n\n                this.action.emit({ type: CardActionType.UPDATE, newParams });\n            }\n        }\n        else if ([CardActionType.ADD, CardActionType.DEBUG, CardActionType.PUBLISH, CardActionType.HIGHLIGHT]\n            .includes(action.type)) {\n            this.action.emit(action);\n        }\n    }\n\n    toggleStatCard(statCard: Card, newIsCollapsed: boolean) {\n        const collapsible = new CollapsibleStatCard(this.headerParams, this.params.column, statCard.type);\n        this.collapsingService.setIsCollapsed(collapsible, newIsCollapsed);\n    }\n\n    getCardKey(statCard: Card) {\n        const collapsible = new CollapsibleStatCard(this.headerParams, this.params.column, statCard.type);\n        return collapsible.persistenceKey();\n    }\n\n    trackByCardId(index: number, card: Card) {\n        return card.id;\n    }\n\n    trackByIndex(index: number) {\n        return index;\n    }\n}\n","<h4 class=\"column-title\" [title]=\"(response ? response.name + ' by ' : '') + column.name + (splitBy ? ' split by ' + splitBy.groupingColumn.name : '')\" [class.column-title--bivariate]=\"response\" [class.column-title--split]=\"splitBy\" [class.column-title--collapsed]=\"collapsed\">\n    <i\n        *ngIf=\"showCollapsingControls\"\n        class=\"icon-chevron-right chevron\"\n        [class.chevron--collapsed]=\"collapsed\"\n    ></i>\n    <ng-container *ngIf=\"response\">\n        <span\n            [class.categorical]=\"response.type === Variable.Type.CATEGORICAL\"\n            [class.continuous]=\"response.type === Variable.Type.CONTINUOUS\"\n        >\n            {{ response.name }}\n        </span>\n        <span class=\"text-weak\">by</span>\n    </ng-container>\n    <span\n        [class.categorical]=\"column.type === Variable.Type.CATEGORICAL\"\n        [class.continuous]=\"column.type === Variable.Type.CONTINUOUS\"\n    >\n        {{ column.name }}\n    </span>\n    <span *ngIf=\"splitBy\">\n        <span class=\"text-weak\">split by&nbsp;</span>\n        <span *ngIf=\"splitBy\">{{ splitBy.groupingColumn.name }}</span>\n    </span>\n</h4>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Variable, SplitBySpec } from 'src/generated-sources';\n\n@Component({\n    selector: 'column-title',\n    templateUrl: './column-title.component.html',\n    styleUrls: ['./column-title.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ColumnTitleComponent {\n    @Input() column: Variable;\n    @Input() response?: Variable;\n    @Input() collapsed: boolean;\n    @Input() splitBy?: SplitBySpec;\n    @Input() showCollapsingControls: boolean;\n    Variable = Variable;\n}\n","<div\n    class=\"vertical-flex\"\n    *ngIf=\"columnCollapseStates$ | async as columnCollapseStates\"\n>\n    <div class=\"horizontal-flex card-container column-card-drag-drop-boundary\" cdkDropList [cdkDropListDisabled]=\"readOnly\" cdkDropListOrientation=\"horizontal\"\n        (cdkDropListDropped)=\"dropColumn($event)\">\n        <ng-container *ngFor=\"let columnCard of params.cards; let columnIndex = index; trackBy: trackByColumnName\">\n            <div\n                cdkDrag\n                class=\"card--column-card\"\n                [class.card--collapsed]=\"columnCollapseStates[columnIndex]\"\n                [class.card--column-wide]=\"params.type === 'bivariate_header'\"\n                [qa]=\"{\n                    'eda-column-card': {\n                        'id': columnCard.id,\n                        'column-name': columnCard.column.name\n                    }\n                }\"\n            >\n                <ng-container *ngIf=\"!columnCollapseStates[columnIndex]; else dragcollapsed\">\n                    <div class=\"card--column-card drag-drop-placeholder\" *cdkDragPlaceholder></div>\n                </ng-container>\n                <ng-template #dragcollapsed>\n                    <div class=\"card--column-card drag-drop-placeholder drag-drop-placeholder--collapsed\" *cdkDragPlaceholder></div>\n                </ng-template>\n                <div\n                    cdkDragHandle\n                    class=\"column-card__title\"\n                    [class.column-card__title--collapsed]=\"columnCollapseStates[columnIndex]\"\n                >\n                    <column-title\n                        (click)=\"toggleColumn(columnCard.column, !columnCollapseStates[columnIndex])\"\n                        class=\"column-card__title-content\"\n                        [class.column-card__title-content--collapsed]=\"columnCollapseStates[columnIndex]\"\n                        [column]=\"columnCard.column\"\n                        [response]=\"isBivariateHeaderCard(params) ? params['yColumn'] : ''\"\n                        [collapsed]=\"columnCollapseStates[columnIndex]\"\n                        [splitBy]=\"params.splitBy\"\n                        [showCollapsingControls]=\"showCollapsingControls\"\n                    ></column-title>\n\n                    <card-menu\n                        *ngIf=\"!columnCollapseStates[columnIndex]\"\n                        class=\"pull-right eda__header-menu\"\n                        [params]=\"columnCard\"\n                        [readOnly]=\"readOnly\"\n                        [deletable]=\"true\"\n                        [extendedActions]=\"extendedActions\"\n                        (action)=\"handleColumnCardAction(columnIndex, $event)\"\n                    >\n                    </card-menu>\n                </div>\n                <lazy-render\n                    class=\"column-card__body\"\n                    *ngIf=\"!columnCollapseStates[columnIndex] | delayWhenFalse\"\n                    [class.column-card__body--wide]=\"params.type === 'bivariate_header'\"\n                    [class.column-card__body--collapsed]=\"columnCollapseStates[columnIndex]\"\n                    [visibleTemplate]=\"visible\"\n                    [trackData]=\"columnCard\"\n                    [passThrough]=\"params.cards.length < 20\">\n                    <ng-template #visible>\n                        <column-card-body\n                            [params]=\"params.cards[columnIndex]\"\n                            [results]=\"results.results[columnIndex]\"\n                            [headerParams]=\"params\"\n                            (headerAction)=\"action.emit($event)\"\n                            [readOnly]=\"readOnly\"\n                            [extendedActions]=\"extendedActions\"\n                            (action)=\"handleColumnCardAction(columnIndex, $event)\"\n                        ></column-card-body>\n                    </ng-template>\n                </lazy-render>\n            </div>\n        </ng-container>\n\n        <div *ngIf=\"!readOnly\"\n            class=\"card--column-card-placeholder card--column-card\"\n        >\n            <div\n                class=\"column-card--placeholder column-card__body\"\n                (click)=\"configureAnalysis()\"\n            >\n                + Add another variable\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input, EventEmitter, Output, ChangeDetectionStrategy, SimpleChanges, OnChanges, ViewContainerRef } from '@angular/core';\nimport { AbstractHeaderCard, Variable, ColumnCard, isBivariateHeaderCard } from 'src/generated-sources';\nimport { CardActionType, CardAction, UpdateCardAction, DebugCardAction, AddCardAction, PublishCardAction } from '@features/eda/worksheet/cards/events';\nimport { switchMap, map } from 'rxjs/operators';\nimport { Observable, ReplaySubject, combineLatest } from 'rxjs';\nimport { CollapsibleColumnCard, CollapsingService, UpdatableCollapsingService } from '@features/eda/collapsing.service';\nimport { ModalsService, ModalShape } from '@shared/modals/modals.service';\nimport { EditCardModalComponent } from '../../../card-wizard/edit-card-modal/edit-card-modal.component';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { WT1Service } from '@core/dataiku-wt1/wt1.service';\n\n@Component({\n    selector: 'header-card-body',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './header-card-body.component.html',\n    styleUrls: ['./header-card-body.component.less'],\n    animations: []\n})\nexport class HeaderCardBodyComponent implements OnChanges {\n    @Input() params: AbstractHeaderCard;\n    @Input() results: AbstractHeaderCard.AbstractHeaderCardResult;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n    projectKey: string;\n    datasetName: string;\n\n    Variable = Variable;\n    isBivariateHeaderCard = isBivariateHeaderCard;\n\n    showCollapsingControls: boolean;\n\n    private params$ = new ReplaySubject<AbstractHeaderCard>(1);\n    private results$ = new ReplaySubject<AbstractHeaderCard.AbstractHeaderCardResult>(1);\n    columnCollapseStates$: Observable<boolean[]>;\n\n    constructor(\n        private collapsingService: CollapsingService,\n        private modalsService: ModalsService,\n        private viewContainerRef: ViewContainerRef,\n        private wt1Service: WT1Service\n    ) {\n        this.columnCollapseStates$ = this.params$.pipe(\n            map(params => params.xColumns\n                .map(column => new CollapsibleColumnCard(params.id, column))\n                .map(collapsible => this.collapsingService.watchIsCollapsed(collapsible))),\n            switchMap(observables => combineLatest(observables))\n        );\n        this.showCollapsingControls = this.collapsingService instanceof UpdatableCollapsingService;\n    }\n\n    toggleColumn(column: Variable, newIsCollapsed: boolean) {\n        this.collapsingService.setIsCollapsed(\n            new CollapsibleColumnCard(this.params.id, column),\n            newIsCollapsed\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.params$.next(this.params);\n        }\n        if (changes.results) {\n            this.results$.next(this.results);\n        }\n    }\n\n    handleColumnCardUpdate(index: number, action: UpdateCardAction) {\n        if (action.newParams.type === 'column_card') {\n            const newParams = {\n                ...this.params,\n                cards: [...this.params.cards],\n                xColumns: [...this.params.xColumns]\n            };\n            newParams.cards[index] = action.newParams;\n            newParams.xColumns[index] = action.newParams.column;\n            this.action.emit({ type: CardActionType.UPDATE, newParams });\n        }\n    }\n\n    handleColumnCardDelete(columnIndex: number) {\n        this.action.emit({\n            type: CardActionType.UPDATE,\n            newParams: {\n                ...this.params,\n                // cards are fixed up by the backend\n                xColumns: this.params.xColumns.filter((_, xColumnIndex) => xColumnIndex !== columnIndex)\n            }\n        });\n    }\n\n    handleColumnCardExport(columnIndex: number, action: AddCardAction | DebugCardAction | PublishCardAction) {\n        let exportedCard;\n        if (action.card.type === 'column_card') {\n            // Export the column card itself by converting it into a regular header card\n            exportedCard = {\n                ...this.params,\n                xColumns: [action.card.column],\n                cards: [{ ...action.card }]\n            };\n        } else {\n            // Export a card *within* a column card\n            exportedCard = {\n                ...action.card,\n                splitBy: this.params.splitBy,\n                filter: this.params.filter\n            };\n        }\n\n        this.action.emit({ type: action.type, card: exportedCard });\n    }\n\n    configureAnalysis() {\n        this.modalsService.open(EditCardModalComponent,\n            {\n                params: this.params\n            },\n            ModalShape.NONE,\n            this.viewContainerRef\n        ).then(({ card }) => {\n            this.action.emit({ type: CardActionType.UPDATE, newParams: card });\n        }, () => { });\n    }\n\n    handleColumnCardAction(columnIndex: number, action: CardAction) {\n        switch (action.type) {\n            case CardActionType.UPDATE:\n                this.handleColumnCardUpdate(columnIndex, action);\n                break;\n            case CardActionType.DELETE:\n                this.handleColumnCardDelete(columnIndex);\n                break;\n            case CardActionType.ADD:\n            case CardActionType.DEBUG:\n            case CardActionType.PUBLISH:\n                this.handleColumnCardExport(columnIndex, action);\n                break;\n            case CardActionType.HIGHLIGHT:\n                this.action.emit(action);\n                break;\n        }\n    }\n\n    trackByColumnName(index: number, card: ColumnCard) {\n        return card.column.name;\n    }\n\n    dropColumn(event: CdkDragDrop<string[]>) {\n        this.action.emit({\n            type: CardActionType.REORDER_HEADER_CARD,\n            cardId: this.params.id,\n            previousIndex: event.previousIndex,\n            currentIndex: event.currentIndex\n        });\n        this.wt1Service.event('statistics-drag-drop-header-card-column', {});\n    }\n}\n","import { Injectable } from '@angular/core';\nimport d3 from 'd3';\n\n/**\n * A global registry of colors assigned to certain variables.\n *\n * Colors are cycled from 'categoryColorPalette', even indexes first, odd colors next, for higher contrast.\n *\n * Components using an independent palette should use getColorFromIndex, providing their own offsets starting from 0.\n * Components using a palette shared with other components should use getColorForVariable,\n *  providing the name of the color to share as parameter\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ColorsService {\n    private categoryColorPalette: string[];\n    private categoryColorMap: Map<string, string> = new Map<string, string>();\n    private nextCategoryColorIndex = 0;\n\n    constructor() {\n        this.categoryColorPalette = d3.scale.category20().range().concat(d3.scale.category20b().range());\n    }\n\n    private getNextNamedColor(): string {\n        const ret = this.categoryColorPalette[this.nextCategoryColorIndex];\n        this.nextCategoryColorIndex += 2;\n        if (this.nextCategoryColorIndex >= this.categoryColorPalette.length) {\n            // toggling even/odd color indexes\n            this.nextCategoryColorIndex = (this.nextCategoryColorIndex - this.categoryColorPalette.length + 1) % 2;\n        }\n        return ret;\n    }\n\n    public getColorForVariable(name: string): string {\n        let ret = this.categoryColorMap.get(name);\n        if (!ret) {\n            ret = this.getNextNamedColor();\n            this.categoryColorMap.set(name, ret);\n        }\n        return ret;\n    }\n\n    public getColorFromIndex(index: number): string {\n        const offset = Math.floor(index / this.categoryColorPalette.length) % 2;\n        return this.categoryColorPalette[(index * 2 + offset) % this.categoryColorPalette.length];\n    }\n}\n","import { Injectable } from '@angular/core';\n\nconst PATTERN_CANVAS_SIDE_LENGTH = 10;\nconst PATTERN_WIDTH = PATTERN_CANVAS_SIDE_LENGTH;\nconst PATTERN_HEIGHT = PATTERN_CANVAS_SIDE_LENGTH;\nconst PATTERN_DIVISIONS = 6;\n\n/**\n * ECharts accepts a pattern wherever a color is expected\n *\n * Undocumented in ECharts, but possibly documented in 'zrender'.\n * I don't speak chinese so I can't check.\n */\ninterface EChartPattern {\n    type: 'pattern';\n    image: HTMLCanvasElement;\n    repeat: 'repeat' | 'repeat-x' | 'repeat-y';\n}\n\n/**\n * Generate color patterns (such as stripes)\n * A pattern a small image which can be repeated to create the desired effect\n */\n@Injectable({ providedIn: 'root' })\nexport class PatternsService {\n    patternCache: Map<string, EChartPattern> = new Map();\n\n    // Re-use a cache pattern or generate a new one\n    // Beware: it can create memory leaks if a lot of different colors are requested (cache never expires)\n    public getStripePattern(stripeColor: string, backgroundColor?: string): EChartPattern {\n        const cacheKey = stripeColor + '-' + backgroundColor;\n        let pattern = this.patternCache.get(cacheKey);\n        if (!pattern) {\n            pattern = this.generateStripePattern(stripeColor, backgroundColor);\n            this.patternCache.set(cacheKey, pattern);\n        }\n        return pattern;\n    }\n\n    // Derived from https://stackoverflow.com/a/47288427\n    public generateStripePattern(stripeColor: string, backgroundColor?: string): EChartPattern {\n        const patternCanvas = document.createElement('canvas');\n        patternCanvas.width = PATTERN_WIDTH;\n        patternCanvas.height = PATTERN_HEIGHT;\n\n        const pctx = patternCanvas.getContext('2d')!;\n        pctx.imageSmoothingEnabled = true;\n\n        // Fill background if a color is provided (otherwise, it is transparent)\n        if (backgroundColor) {\n            pctx.fillStyle = backgroundColor;\n            pctx.fillRect(0, 0, patternCanvas.width, patternCanvas.height);\n        }\n\n        // Draw the stripes\n        pctx.fillStyle = stripeColor;\n\n        // Top line\n        pctx.beginPath();\n        pctx.moveTo(0, PATTERN_HEIGHT * (1 / PATTERN_DIVISIONS));\n        pctx.lineTo(PATTERN_WIDTH * (1 / PATTERN_DIVISIONS), 0);\n        pctx.lineTo(0, 0);\n        pctx.lineTo(0, PATTERN_HEIGHT * (1 / PATTERN_DIVISIONS));\n        pctx.fill();\n\n        // Middle line\n        pctx.beginPath();\n        pctx.moveTo(PATTERN_WIDTH, PATTERN_HEIGHT * (1 / PATTERN_DIVISIONS));\n        pctx.lineTo(PATTERN_WIDTH * (1 / PATTERN_DIVISIONS), PATTERN_HEIGHT);\n        pctx.lineTo(0, PATTERN_HEIGHT);\n        pctx.lineTo(0, PATTERN_HEIGHT * ((PATTERN_DIVISIONS - 1) / PATTERN_DIVISIONS));\n        pctx.lineTo(PATTERN_WIDTH * ((PATTERN_DIVISIONS - 1) / PATTERN_DIVISIONS), 0);\n        pctx.lineTo(PATTERN_WIDTH, 0);\n        pctx.lineTo(PATTERN_WIDTH, PATTERN_HEIGHT * (1 / PATTERN_DIVISIONS));\n        pctx.fill();\n\n        // Bottom line\n        pctx.beginPath();\n        pctx.moveTo(PATTERN_WIDTH, PATTERN_HEIGHT * ((PATTERN_DIVISIONS - 1) / PATTERN_DIVISIONS));\n        pctx.lineTo(PATTERN_WIDTH * ((PATTERN_DIVISIONS - 1) / PATTERN_DIVISIONS), PATTERN_HEIGHT);\n        pctx.lineTo(PATTERN_WIDTH, PATTERN_HEIGHT);\n        pctx.lineTo(PATTERN_WIDTH, PATTERN_HEIGHT * ((PATTERN_DIVISIONS - 1) / PATTERN_DIVISIONS));\n        pctx.fill();\n\n        return { type: 'pattern', image: patternCanvas, repeat: 'repeat' };\n    }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { CategoricalHistogramCard } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport { CardAction, CardActionType } from '@features/eda/worksheet/cards/events';\nimport { ColorsService } from '@shared/graphics/colors.service';\nimport { encodeHTML } from 'entities';\nimport { filterName } from '@features/eda/pipes/filter-name.pipe';\nimport d3 from 'd3';\nimport { PatternsService } from '@shared/graphics/patterns.service';\n\n\n@Component({\n    selector: 'categorical-histogram-card-body',\n    templateUrl: './categorical-histogram-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/chart.less',\n        './categorical-histogram-card-body.component.less'\n    ],\n})\nexport class CategoricalHistogramCardBodyComponent implements OnChanges {\n    @Input() results: CategoricalHistogramCard.CategoricalHistogramCardResult;\n    @Input() params: CategoricalHistogramCard;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    chartOptions: EChartOption;\n\n    constructor(\n        private colorsService: ColorsService,\n        private patternsService: PatternsService) { }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.buildChart();\n        }\n    }\n\n    chartClicked(event: any) {\n        if (event.componentType === 'series'\n            && event.componentSubType === 'bar') {\n            const index: number = event.dataIndex;\n            const filter = this.results.histogram.filters[index];\n            this.action.emit({\n                type: CardActionType.HIGHLIGHT,\n                filter: { ...filter, name: this.params.column.name + ': ' + filterName(filter) }\n            });\n        }\n    }\n\n    buildChart() {\n        const labels = this.results.histogram.filters.map(filter => filterName(filter));\n        const data = this.results.histogram.counts!;\n        const highlightData = this.results.histogram.highlightedCounts;\n        const series: EChartOption.Series[] = [];\n\n        if (highlightData) {\n            series.push({\n                type: 'bar',\n                stack: 'stack',\n                data: highlightData.map((val, i) => {\n                    const itemColor = this.colorsService.getColorForVariable(labels[i]);\n                    const borderColor = d3.rgb(itemColor).darker(2).toString();\n                    const stripedPattern = this.patternsService.getStripePattern(borderColor, itemColor);\n                    return {\n                        value: val,\n                        itemStyle: {\n                            color: stripedPattern,\n                            barBorderColor: borderColor,\n                            barBorderWidth: 1\n                        }\n                    };\n                })\n            });\n        }\n\n        series.push({\n            type: 'bar',\n            stack: 'stack',\n            data: data.map((val, i) => {\n                const color = this.colorsService.getColorForVariable(labels[i]);\n                if (highlightData) {\n                    val = val - highlightData[i];\n                }\n                return {\n                    value: val,\n                    emphasis: { itemStyle: { color } },\n                    itemStyle: { color }\n                };\n            })\n        });\n\n        this.chartOptions = {\n            grid: { left: 0, top: 10, right: 0, bottom: 0, containLabel: true },\n            tooltip: {\n                formatter: (value: any) => {\n                    const dataIndex = value.dataIndex;\n                    let tooltip = encodeHTML(this.params.column.name)\n                        + ': <b>'\n                        + encodeHTML(labels[dataIndex])\n                        + '</b>';\n                    tooltip += '<br>Count: <b>' + encodeHTML('' + data[dataIndex]) + '</b>';\n                    if (this.results.histogram.highlightedCounts) {\n                        tooltip += '<br>Selected count: <b>' + encodeHTML('' + highlightData![dataIndex]) + '</b>';\n                    }\n\n                    return tooltip;\n                },\n                confine: true,\n                trigger: 'item',\n                axisPointer: { type: 'none' }\n            },\n            xAxis: {\n                type: 'category',\n                data: labels,\n                axisLabel: { color: '#999999' },\n                axisTick: { show: true },\n                axisLine: { show: true }\n            },\n            yAxis: {\n                type: 'value',\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { color: '#999999' }\n            },\n            series,\n            animation: false\n        };\n    }\n\n}\n","<lazy-echart class=\"chart\" [class.chart--fixed-height]=\"hasFixedHeight\"\n    [options]=\"chartOptions\"\n    (chartClick)=\"chartClicked($event)\"\n></lazy-echart>\n","<span\n    class=\"pvalue pvalue--rejected\"\n    *ngIf=\"pvalue <= significanceLevel else inconclusive\"\n    [matTooltip]=\"'𝘱-value &le; significance level (&le; '\n        + (significanceLevel | smarterNumber)\n        + ')\\nHypothesis rejected'\"\n>\n    {{ label }} {{ pvalue | smarterNumber }}\n</span>\n\n<ng-template #inconclusive>\n    <span\n        class=\"pvalue\"\n        [matTooltip]=\"'𝘱-value &gt; significance level (&gt; '\n        + (significanceLevel | smarterNumber)\n        + ')\\nTest is inconclusive'\"\n    >\n        {{ label }} {{ pvalue | smarterNumber }}\n    </span>\n</ng-template>\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n    selector: 'colored-pvalue',\n    templateUrl: './colored-pvalue.component.html',\n    styleUrls: ['./colored-pvalue.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ColoredPValueComponent {\n    @Input() pvalue: number;\n    @Input() significanceLevel: number;\n    @Input() showLabel: boolean;\n\n    get label() {\n        return this.showLabel ? '𝘱-value:' : ''\n    }\n}\n","<table class=\"stats-table\">\n    <tbody>\n        <ng-container *ngFor=\"let stat of results.stats; let index = index; trackBy: trackByIndex\">\n            <tr class=\"stats-table__row\">\n                <th class=\"stats-table__head\">\n                    <span [matTooltip]=\"stat.fullLabel\">{{ stat.shortLabel }}</span>\n                </th>\n                <td class=\"stats-table__cell\">\n                    <div *ngIf=\"stat.warning\" class=\"pull-right stat-warning\">\n                        <i class=\"icon-warning-sign\" [matTooltip]=\"stat.warning\"></i>\n                    </div>\n\n                    <span *ngIf=\"stat.type == 'INT' && stat.intValue != null\" [matTooltip]=\"stat.intValue\">\n                        {{ stat.intValue }}\n                    </span>\n\n                    <span *ngIf=\"stat.type == 'FAILURE'\" [matTooltip]=\"stat.failureMessage\">\n                        N/A\n                    </span>\n\n                    <span *ngIf=\"stat.type == 'NOT_COMPUTED'\">\n                        <span class=\"dku-loader icon-spin card-spinner card-spinner__stats-table\"></span>\n                    </span>\n\n                    <span *ngIf=\"stat.type == 'FLOAT' && stat.floatValue != null\" [matTooltip]=\"stat.floatValue\">\n                        {{ stat.floatValue | smarterNumber }}\n                    </span>\n\n                    <span *ngIf=\"stat.type == 'FILTERS' && stat.filterValues != null\">\n                        <ng-container *ngFor=\"let filter of stat.filterValues; let first = first\">\n                            {{ first ? '' : ',' }}\n                            {{ filter | filterName | slice:0:100 }}<ng-container *ngIf=\"(filter | filterName).length > 100\">...</ng-container>\n                        </ng-container>\n                    </span>\n                </td>\n            </tr>\n\n            <ng-container *ngIf=\"stat.pvalue != null\">\n                <tr class=\"stats-table__row--invisible\">\n                    <!-- Fake row to temporarily skip alternate color -->\n                </tr>\n                <tr class=\"stats-table__row\">\n                    <th class=\"stats-table__head stats-table__head--derived\">𝘱-value</th>\n                    <td class=\"stats-table__cell stats-table__cell--derived\">\n                        <colored-pvalue [pvalue]=\"stat.pvalue\" [significanceLevel]=\"1 - params.confidenceLevel\">\n                        </colored-pvalue>\n                    </td>\n                </tr>\n            </ng-container>\n\n            <ng-container *ngIf=\"stat.lower != null && stat.upper != null\">\n                <tr class=\"stats-table__row--invisible\">\n                    <!-- Fake row to temporarily skip alternate color -->\n                </tr>\n                <tr class=\"stats-table__row\">\n                    <th class=\"stats-table__head stats-table__head--derived\" [matTooltip]=\"'Confidence interval'\">Conf. int.</th>\n                    <td class=\"stats-table__cell stats-table__cell--derived\">\n                        [<span [matTooltip]=\"stat.lower\">{{ stat.lower | smarterNumber }}</span>,\n                        <span [matTooltip]=\"stat.upper\">{{ stat.upper | smarterNumber }}</span>]\n                    </td>\n                </tr>\n            </ng-container>\n        </ng-container>\n    </tbody>\n</table>","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport { UnivariateSummaryStatsCard, BivariateSummaryStatsCard } from 'src/generated-sources';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\n\ntype SupportedParams = UnivariateSummaryStatsCard | BivariateSummaryStatsCard;\ntype SupportedResults = UnivariateSummaryStatsCard.UnivariateSummaryStatsCardResult\n    | BivariateSummaryStatsCard.BivariateSummaryStatsCardResult;\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'generic-summary-stats-card-body',\n    templateUrl: './generic-summary-stats-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-spinner.less',\n        '../../../../shared-styles/stats-table.less',\n        '../../../../shared-styles/test-conclusion.less',\n        './generic-summary-stats-card-body.component.less'\n    ]\n})\nexport class GenericSummaryStatsCardBodyComponent {\n    @Input() results: SupportedResults;\n    @Input() params: SupportedParams;\n    @Output() action = new EventEmitter<CardAction>();\n\n    trackByIndex(index: number) {\n        return index;\n    }\n}\n","<table class=\"stats-table\">\n    <thead>\n        <tr>\n            <th class=\"stats-table__head\">%</th>\n            <th class=\"stats-table__head\">Value</th>\n        </tr>\n    </thead>\n    <tbody>\n        <ng-container *ngFor=\"let quantile of results.quantiles; let index = index; trackBy: trackByIndex\">\n            <tr class=\"stats-table__row\">\n                <th class=\"stats-table__head\">{{ quantile.freq | percent: '1.0-4' }}</th>\n                <td class=\"stats-table__cell\">{{ quantile.quantile | smarterNumber }}</td>\n            </tr>\n            <ng-container *ngIf=\"params.showConfidenceInterval && quantile.lower != null && quantile.upper != null\">\n                <tr></tr>\n                <tr class=\"stats-table__row\">\n                    <th class=\"stats-table__head stats-table__head--derived\" [matTooltip]=\"'Confidence interval'\">Conf. int.</th>\n                    <td class=\"stats-table__cell stats-table__cell--derived\">[{{ quantile.lower | smarterNumber }}, {{ quantile.upper | smarterNumber }}]</td>\n                </tr>\n            </ng-container>\n        </ng-container>\n    </tbody>\n</table>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { QuantilesTableCard } from 'src/generated-sources';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'quantiles-table-card-body',\n    templateUrl: './quantiles-table-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/stats-table.less',\n        './quantiles-table-card-body.component.less'\n    ]\n})\nexport class QuantilesTableCardBodyComponent {\n    @Input() params: QuantilesTableCard;\n    @Input() results: QuantilesTableCard.QuantilesTableCardResult;\n\n    trackByIndex(index: number) {\n        return index;\n    }\n}\n","// @ts-ignore\nimport IntervalScale from 'echarts/src/scale/Interval';\n\n\nexport function getNumericalChartAxisTicks(splitXAxis: number, minVal: number, maxVal: number): number[] {\n    const interval = new IntervalScale();\n    interval.setExtent(minVal, maxVal);\n    interval.niceExtent({\n        fixMin: true,\n        fixMax: true,\n        splitXAxis\n    });\n    return interval.getTicks();\n}","import { Component, SimpleChanges, OnChanges, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport { NumericalHistogramCard, IntervalFilter, BinningMode } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport { encodeHTML } from 'entities';\nimport _ from 'lodash';\nimport d3 from 'd3';\nimport { CardAction, CardActionType } from '@features/eda/worksheet/cards/events';\nimport { filterName } from '@features/eda/pipes/filter-name.pipe';\nimport { ColorsService } from '@shared/graphics/colors.service';\nimport { getNumericalChartAxisTicks } from '@features/eda/echarts-utils';\nimport { PatternsService } from '@shared/graphics/patterns.service';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\nconst BAR_COLOR = '#c4dffe';\n\n@Component({\n    selector: 'numerical-histogram-card-body',\n    templateUrl: './numerical-histogram-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/chart.less',\n        './numerical-histogram-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumericalHistogramCardBodyComponent implements OnChanges {\n    @Input() results: NumericalHistogramCard.NumericalHistogramCardResult;\n    @Input() params: NumericalHistogramCard;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    histogramOptions: EChartOption | undefined;\n\n    constructor(\n        private colorsService: ColorsService,\n        private patternsService: PatternsService\n    ) { }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results || changes.params) {\n            if (this.params.showHistogram && this.params.binningMode === BinningMode.CUSTOM) {\n                this.histogramOptions = this.buildBarChartOptions();\n            } else {\n                this.histogramOptions = this.buildChartOptions(this.results);\n            }\n        }\n    }\n\n    buildBarChartOptions(): EChartOption | undefined {\n        const labels = this.results.histogram!.bins.map(b => filterName(b));\n        const data = this.results.histogram!.counts!;\n        const series = [];\n        const highlightData = this.results.histogram!.highlightedCounts;\n\n        const tooltipFormatter = (value: any) => {\n            const dataIndex = value.dataIndex;\n            let tooltip = encodeHTML(this.params.column.name)\n                + ': <b>'\n                + encodeHTML(labels[dataIndex])\n                + '</b>';\n            tooltip += '<br>Count: <b>' + encodeHTML('' + data[dataIndex]) + '</b>';\n            if (highlightData) {\n                tooltip += '<br>Selected count: <b>' + encodeHTML('' + highlightData![dataIndex]) + '</b>';\n            }\n\n            return tooltip;\n        };\n\n        if (highlightData) {\n            series.push({\n                type: 'bar',\n                stack: 'stack',\n                data: highlightData.map((val, i) => {\n                    const itemColor = this.colorsService.getColorForVariable(labels[i]);\n                    const borderColor = d3.rgb(itemColor).darker(2).toString();\n                    const stripedPattern = this.patternsService.getStripePattern(borderColor, itemColor);\n                    return {\n                        value: val,\n                        itemStyle: {\n                            color: stripedPattern,\n                            barBorderColor: borderColor,\n                            barBorderWidth: 1\n                        }\n                    };\n                }),\n                tooltip: { formatter: tooltipFormatter },\n            });\n        }\n\n        series.push({\n            type: 'bar',\n            stack: 'stack',\n            data: data.map((val, i) => {\n                const color = this.colorsService.getColorForVariable(labels[i]);\n                if (highlightData) {\n                    val = val - highlightData[i];\n                }\n                return {\n                    value: val,\n                    itemStyle: { color },\n                    emphasis: { itemStyle: { color } }\n                };\n            }),\n            tooltip: { formatter: tooltipFormatter }\n        });\n\n        return {\n            grid: { left: 0, top: 10, right: 0, bottom: 0, containLabel: true },\n            tooltip: {\n                confine: true,\n                trigger: 'item',\n                axisPointer: { type: 'none' }\n            },\n            xAxis: {\n                type: 'category',\n                data: labels,\n                axisLabel: { color: '#999999' },\n                axisTick: { show: true },\n                axisLine: { show: true }\n            },\n            yAxis: {\n                type: 'value',\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { color: '#999999' }\n            },\n            series,\n            animation: false\n        };\n    }\n\n    chartClicked(event: any) {\n        if (event.componentType === 'series'\n            && (event.componentSubType === 'custom' || event.componentSubType === 'bar')\n            && this.results.histogram) {\n            const index: number = event.dataIndex;\n            let filter = this.results.histogram.bins[index];\n            if (event.event.event.shiftKey\n                && filter.type === 'interval'\n                && this.params.highlightFilter\n                && this.params.highlightFilter.type === 'interval'\n                && this.params.highlightFilter.column === this.params.column.name) {\n                filter = {\n                    column: this.params.column.name,\n                    type: 'interval',\n                    closed: IntervalFilter.ClosedMode.LEFT,\n                    left: Math.min(filter.left, this.params.highlightFilter.left),\n                    right: Math.max(filter.right, this.params.highlightFilter.right)\n                };\n            }\n\n            this.action.emit({\n                type: CardActionType.HIGHLIGHT,\n                filter: { ...filter, name: this.params.column.name + ': ' + filterName(filter) }\n            });\n        }\n    }\n\n    buildChartOptions(results: NumericalHistogramCard.NumericalHistogramCardResult): EChartOption | undefined {\n        const series: EChartOption.Series[] = [];\n        let maxCount = 1;\n        let minVal = Number.MAX_VALUE;\n        let maxVal = -Number.MAX_VALUE;\n        let boxPlotInverseRatio = 1;\n\n        if (!results.histogram && !results.boxPlot) {\n            // Nothing to show\n            return;\n        }\n\n        if (results.histogram) {\n            // Boxplot take 1/6 of vertical space\n            boxPlotInverseRatio = 6;\n        }\n\n        if (results.histogram) {\n            // Format [min, max, count, label, highlightedCount?][]\n            type HistogramBar = [number, number, number, string, number | undefined | null];\n            const histogramData: HistogramBar[] = [];\n            for (let i = 0; i < results.histogram.bins.length; i++) {\n                const bin = results.histogram.bins[i] as IntervalFilter;\n                const count = results.histogram.counts[i];\n                const highlightedCount = results.histogram.highlightedCounts && results.histogram.highlightedCounts[i];\n                histogramData.push([bin.left, bin.right, count, filterName(bin), highlightedCount]);\n            }\n\n            maxCount = _.chain(histogramData).map(2).max().value() * (1 + 1 / boxPlotInverseRatio) + 1;\n            minVal = _.chain(histogramData).map(0).min().value();\n            maxVal = _.chain(histogramData).map(1).max().value();\n\n            const tooltipFormatter = ({ value }: { value: HistogramBar }) => {\n                let tooltip = encodeHTML(this.params.column.name)\n                    + ': <b>'\n                    + encodeHTML(value[3])\n                    + '</b>';\n                tooltip += '<br>Count: <b>' + encodeHTML('' + value[2]) + '</b>';\n                if (this.results.histogram!.highlightedCounts) {\n                    tooltip += '<br>Selected count: <b>' + encodeHTML('' + value[4]) + '</b>';\n                }\n\n                return tooltip;\n            };\n\n            const normalStyle = { fill: BAR_COLOR, borderWidth: 0 };\n            const darkenedBarColor = d3.rgb(BAR_COLOR).darker(2).toString();\n            const highlightedStyle = {\n                borderWidth: 0,\n                fill: this.patternsService.getStripePattern(darkenedBarColor, BAR_COLOR)\n            };\n\n            series.push({\n                type: 'custom',\n                tooltip: { formatter: tooltipFormatter },\n                yAxisIndex: 0,\n                renderItem: (params: any, api: any) => {\n                    const yValue = api.value(2);\n                    const highlightedHValue = api.value(4);\n                    const start = api.coord([api.value(0), yValue]);\n                    const size = api.size([api.value(1) - api.value(0), results.histogram!.highlightedCounts ? yValue - highlightedHValue : yValue]);\n\n                    return {\n                        type: 'rect',\n                        shape: {\n                            x: start[0],\n                            y: start[1],\n                            width: size[0],\n                            height: size[1]\n                        },\n                        style: api.style(normalStyle),\n                        styleEmphasis: api.styleEmphasis(normalStyle)\n                    };\n                },\n                data: histogramData\n            } as EChartOption.Series);\n\n            if (results.histogram!.highlightedCounts) {\n                // \"Augmented\" area of the highlighted zone (to create borders)\n                series.push({\n                    type: 'custom',\n                    yAxisIndex: 0,\n                    silent: true,\n                    renderItem: (params: any, api: any) => {\n                        const highlightedHValue = api.value(4);\n                        const highlightedStart = api.coord([api.value(0), highlightedHValue]);\n                        const highlightedSize = api.size([api.value(1) - api.value(0), highlightedHValue]);\n\n                        return {\n                            type: 'rect',\n                            shape: {\n                                x: highlightedStart[0] - 1,\n                                y: highlightedStart[1],\n                                width: highlightedSize[0] + 2,\n                                height: highlightedSize[1]\n                            },\n                            style: api.style({ fill: darkenedBarColor, borderWidth: 0 })\n                        };\n                    },\n                    data: histogramData\n                } as EChartOption.Series);\n\n                // Highlighted (striped) area\n                series.push({\n                    tooltip: { formatter: tooltipFormatter },\n                    type: 'custom',\n                    yAxisIndex: 0,\n                    renderItem: (params: any, api: any) => {\n                        const highlightedHValue = api.value(4);\n                        const highlightedStart = api.coord([api.value(0), highlightedHValue]);\n                        const highlightedSize = api.size([api.value(1) - api.value(0), highlightedHValue]);\n\n                        return {\n                            type: 'rect',\n                            shape: {\n                                x: highlightedStart[0],\n                                y: highlightedStart[1] + 1,\n                                width: highlightedSize[0],\n                                height: highlightedSize[1] - 1\n                            },\n                            style: api.style(highlightedStyle),\n                            styleEmphasis: api.styleEmphasis(highlightedStyle)\n                        };\n\n                    },\n                    data: histogramData\n                } as EChartOption.Series);\n            }\n        }\n\n        if (results.boxPlot) {\n            minVal = Math.min(results.boxPlot.min!, minVal);\n            maxVal = Math.max(results.boxPlot.max!, maxVal);\n\n            series.push({\n                tooltip: {\n                    formatter: (param: { data: number[] }) => {\n                        return encodeHTML(this.params.column.name)\n                            + ':<br>' + [\n                                '&bull; 1st percentile: ' + encodeHTML(smarterNumber(param.data[1])),\n                                '&bull; 1st quartile: ' + encodeHTML(smarterNumber(param.data[2])),\n                                '&bull; Median: ' + encodeHTML(smarterNumber(param.data[3])),\n                                '&bull; 3rd quartile: ' + encodeHTML(smarterNumber(param.data[4])),\n                                '&bull; 99th percentile: ' + encodeHTML(smarterNumber(param.data[5]))\n                            ].join('<br/>');\n                    }\n                },\n                type: 'boxplot',\n                coordinateSystem: 'cartesian2d',\n                yAxisIndex: 1,\n                data: [\n                    // Fake data to position/size the boxplot according to requested ratio\n                    ..._.fill(new Array(boxPlotInverseRatio - 1), []),\n                    [\n                        results.boxPlot.pc01 || 0,\n                        results.boxPlot.pc25 || 0,\n                        results.boxPlot.median || 0,\n                        results.boxPlot.pc75 || 0,\n                        results.boxPlot.pc99 || 0\n                    ]\n                ]\n            });\n        }\n\n        const splitXAxis = 5;\n        const ticks: number[] = getNumericalChartAxisTicks(splitXAxis, minVal, maxVal);\n        const maxTickLen: number = Math.max(...ticks.map(v => ('' + v).length));\n        let rotate = 0;\n        if (maxTickLen > 4) {\n            rotate = 45;\n        }\n\n        return {\n            tooltip: {\n                confine: true\n            },\n            color: ['#3398DB'],\n            animation: false,\n            grid: { left: 0, top: 5, right: 0, bottom: 0, containLabel: true },\n            xAxis: [{\n                type: 'value',\n                scale: false,\n                min: minVal,\n                max: maxVal,\n                splitNumber: splitXAxis,\n                axisTick: { show: true },\n                axisLine: { show: true },\n                axisLabel: {\n                    color: '#999999',\n                    rotate,\n                    formatter: (value: number) => {\n                        let stringRepr = '' + value;\n                        if (stringRepr.length > 6) {\n                            stringRepr = value.toPrecision(5);\n                        }\n                        return stringRepr;\n                    }\n                }\n            }],\n            yAxis: [\n                {\n                    type: 'value',\n                    min: 0,\n                    max: maxCount,\n                    axisLine: { show: false },\n                    axisTick: { show: false },\n                    axisLabel: {\n                        color: '#999999',\n                        formatter: (value: number) => {\n                            if (value === maxCount) {\n                                return '';\n                            }\n\n                            let stringRepr = '' + value;\n                            if (stringRepr.length > 6) {\n                                stringRepr = value.toPrecision(5);\n                            }\n                            return stringRepr;\n                        }\n                    },\n                    show: !!results.histogram\n                }, {\n                    type: 'category',\n                    show: false\n                }\n            ],\n            series\n        };\n    }\n}\n","<lazy-echart\n    class=\"chart\"\n    [options]=\"histogramOptions\"\n    [class.chart--fixed-height]=\"hasFixedHeight\"\n    (chartClick)=\"chartClicked($event)\">\n</lazy-echart>\n","<table class=\"stats-table\">\n    <tbody class=\"stats-table__body\">\n        <tr\n            *ngFor=\"let filter of results.frequencies.filters; let index = index; trackBy: trackByIndex\"\n            class=\"stats-table__row\"\n        >\n            <th class=\"stats-table__head\" [matTooltip]=\"filter | filterName\">\n                {{ filter | filterName | slice:0:100 }}\n            </th>\n            <td class=\"stats-table__cell\">\n                <ng-container *ngIf=\"results.frequencies.totalCount > 0\">\n                    {{ (results.frequencies.counts[index] / results.frequencies.totalCount) | percent }}\n                </ng-container>\n            </td>\n            <td class=\"stats-table__cell\">{{ results.frequencies.counts[index] }}</td>\n        </tr>\n        <tr class=\"stats-table__row\">\n            <th\n                class=\"stats-table__header\"\n                colspan=\"2\"\n            >\n                N distinct\n            </th>\n            <td class=\"stats-table__cell\">{{ results.distinctCount }}</td>\n        </tr>\n    </tbody>\n</table>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { UnivariateFrequencyTableCard } from 'src/generated-sources';\n\n\n@Component({\n    selector: 'univariate-frequency-table-card-body',\n    templateUrl: './univariate-frequency-table-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/stats-table.less',\n        './univariate-frequency-table-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UnivariateFrequencyTableCardBodyComponent {\n    @Input() params: UnivariateFrequencyTableCard;\n    @Input() results: UnivariateFrequencyTableCard.UnivariateFrequencyTableCardResult;\n\n    trackByIndex(index: number) {\n        return index;\n    }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { BivariateHistogramCard } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport { CardActionType, CardAction } from '@features/eda/worksheet/cards/events';\nimport { ColorsService } from '@shared/graphics/colors.service';\nimport { encodeHTML } from 'entities';\nimport { filterName } from '@features/eda/pipes/filter-name.pipe';\nimport d3 from 'd3';\nimport { PatternsService } from '@shared/graphics/patterns.service';\n\n@Component({\n    selector: 'bivariate-histogram-card-body',\n    templateUrl: './bivariate-histogram-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/chart.less',\n        './bivariate-histogram-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BivariateHistogramCardBodyComponent implements OnChanges {\n    @Input() results: BivariateHistogramCard.BivariateHistogramCardResult;\n    @Input() params: BivariateHistogramCard;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    chartOptions: EChartOption;\n\n    constructor(\n        private colorsService: ColorsService,\n        private patternsService: PatternsService) {\n    }\n\n    chartClicked(event: any) {\n        if (event.componentType === 'series'\n            && event.componentSubType === 'bar') {\n            const xIndex: number = event.dataIndex;\n            let yIndex;\n            if (this.results.histogram.highlightedCounts) {\n                // Because we have 2 series per bar (regular+highlight)\n                yIndex = Math.floor(event.seriesIndex / 2);\n            } else {\n                yIndex = event.seriesIndex;\n            }\n            let xFilter = this.results.histogram.xBins[xIndex];\n            xFilter = { ...xFilter, name: this.params.xColumn.name + ': ' + filterName(xFilter) };\n            let yFilter = this.results.histogram.yBins[yIndex];\n            yFilter = { ...yFilter, name: this.params.yColumn.name + ': ' + filterName(yFilter) };\n\n            this.action.emit({\n                type: CardActionType.HIGHLIGHT,\n                filter: { type: 'and', filters: [xFilter, yFilter] }\n            });\n        }\n    }\n\n    updateNBins(value: number) {\n        const newParams = {\n            ...this.params,\n            maxValues: value\n        };\n\n        this.action.emit({ type: CardActionType.UPDATE, newParams });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.chartOptions = this.results && this.buildChartOptions(this.results);\n        }\n    }\n\n    buildChartOptions(results: BivariateHistogramCard.BivariateHistogramCardResult): EChartOption {\n        const xBinLabels: string[] = [];\n        const histogramData = results.histogram;\n        const xBins = histogramData.xBins;\n        const yBins = histogramData.yBins;\n        const xBinCount = xBins.length;\n        const yBinCount = yBins.length;\n        const series: EChartOption.Series[] = [];\n        let maxCount = 0;\n\n        for (let j = 0; j < yBinCount; j++) {\n            const name = filterName(yBins[j]);\n            const regularData: number[] = [];\n            const highlightData: number[] = [];\n\n            const tooltipFormatter = (params: any) => {\n                const xLabel = filterName(xBins[params.dataIndex]);\n                const yLabel = filterName(yBins[j]);\n                const flatIndex = params.dataIndex * yBinCount + j;\n\n                let tooltip = `\n                    ${encodeHTML(this.params.xColumn.name)}:\n                    <b>${encodeHTML(xLabel)}</b>\n                    <br>\n                    ${encodeHTML(this.params.yColumn.name)}:\n                    <b>${encodeHTML(yLabel)}</b>\n                    <br>\n                    Count:\n                    <b>${encodeHTML('' + histogramData.counts[flatIndex])}</b>\n                `;\n\n                if (histogramData.highlightedCounts) {\n                    tooltip += `<br>Selected count:\n                        <b>\n                            ${encodeHTML('' + histogramData.highlightedCounts[flatIndex])}\n                        </b>\n                    `;\n                }\n                return tooltip;\n            };\n\n            for (let i = 0; i < xBinCount; i++) {\n                if (j === 0) {\n                    xBinLabels.push(filterName(xBins[i]));\n                }\n                const count = histogramData.counts[i * yBinCount + j];\n                maxCount = Math.max(count, maxCount);\n\n                if (histogramData.highlightedCounts) {\n                    const highlightCount = histogramData.highlightedCounts[i * yBinCount + j];\n                    regularData.push(count - highlightCount);\n                    highlightData.push(highlightCount);\n                } else {\n                    regularData.push(count);\n                }\n            }\n            const itemColor = this.colorsService.getColorForVariable(name);\n\n            if (histogramData.highlightedCounts) {\n                const borderColor = d3.rgb(itemColor).darker(2).toString();\n                const stripedPattern = this.patternsService.getStripePattern(borderColor, itemColor);\n                const highlightedItemStyle = {\n                    barBorderColor: borderColor,\n                    barBorderWidth: 1,\n                    color: (stripedPattern as any) // Bad typings\n                };\n                series.push({\n                    name,\n                    stack: 's' + j,\n                    type: 'bar',\n                    emphasis: { itemStyle: highlightedItemStyle },\n                    itemStyle: highlightedItemStyle,\n                    data: highlightData,\n                    tooltip: { formatter: tooltipFormatter }\n                });\n            }\n            series.push({\n                name,\n                type: 'bar',\n                stack: 's' + j,\n                emphasis: { itemStyle: { color: itemColor } },\n                itemStyle: { color: itemColor },\n                data: regularData,\n                tooltip: { formatter: tooltipFormatter }\n            });\n        }\n\n        return {\n            animation: false,\n            tooltip: {\n                confine: true,\n                trigger: 'item',\n                axisPointer: { type: 'none' }\n            },\n            grid: { left: 0, top: 10, right: 0, bottom: 0, containLabel: true },\n            xAxis: [{\n                type: 'category',\n                data: xBinLabels,\n                axisTick: { show: true },\n                axisLine: { show: true },\n                axisLabel: {\n                    color: '#999999',\n                    rotate: 45,\n                    formatter(value: string) {\n                        const LABEL_LIMIT = 15;\n                        return value.slice(0, LABEL_LIMIT) + (value.length > LABEL_LIMIT ? '...' : '');\n                    }\n                }\n            }],\n            yAxis: [{\n                type: 'value',\n                min: 0,\n                max: maxCount,\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { color: '#999999' }\n            }],\n            series\n        };\n    }\n\n}\n","<lazy-echart class=\"chart\" [class.chart--fixed-height]=\"hasFixedHeight\"\n    [options]=\"chartOptions\"\n    (chartClick)=\"chartClicked($event)\"\n></lazy-echart>\n","import { CompactedArray } from 'src/generated-sources';\n\nexport async function decompactArray(compacted: CompactedArray) {\n    return new Promise<Float64Array>((resolve, reject) => {\n        const image = new Image();\n        image.onerror = () => {\n            // Error while loading image\n            reject();\n        };\n        image.onload = () => {\n            // Image loaded successfully\n            const w = image.width;\n            const h = image.height;\n\n            // Draw the image into a canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = w;\n            canvas.height = h;\n            const ctx = canvas.getContext('2d')!;\n            ctx.drawImage(image, 0, 0);\n\n            // Retrieve pixel data from canvas\n            const imageData = ctx.getImageData(0, 0, w, h);\n            const dataView = new DataView(imageData.data.buffer);\n\n            // Rescale the values\n            const scale = (compacted.vmax - compacted.vmin) / (Math.pow(2, 24) - 1);\n            const offset = compacted.vmin;\n            const output = new Float64Array(w * h);\n            for (let i = 0; i < w * h; i++) {\n                dataView.setUint8(i * 4 + 3, 0); // Clean alpha\n                output[i] = offset + dataView.getUint32(i * 4, true) * scale;\n            }\n\n            resolve(output);\n        };\n\n        image.src = 'data:image/png;base64,' + compacted.data;\n    });\n}\n","import { Fit2DDistribution } from 'src/generated-sources';\nimport { decompactArray } from '@utils/compacted-array';\nimport d3 from 'd3';\nimport { fairAny } from 'dku-frontend-core';\n\nexport class DensityMap {\n    constructor(\n        public density: Float64Array,\n        public xMin: number,\n        public xMax: number,\n        public yMin: number,\n        public yMax: number,\n        public dMin: number,\n        public dMax: number,\n        public xResolution: number,\n        public yResolution: number\n    ) { }\n\n    static async createFromResult(result: Fit2DDistribution.Density) {\n        const density: Float64Array = await decompactArray(result.data);\n        const { xMin, xMax, yMin, yMax } = result;\n        const [xResolution, yResolution] = result.data.shape;\n        return new DensityMap(density, xMin, xMax, yMin, yMax, result.data.vmin, result.data.vmax, xResolution, yResolution);\n    }\n\n    // Convert a point in data domain -> pixel in density map\n    // Note: \"density map pixels\" are not the same thing as \"screen pixels\"\n    //       (density map -> screen mapping is handled by echarts)\n    dataPointToPixel([x, y]: [number, number]): [number, number] {\n        return [\n            Math.floor(this.xResolution * (x - this.xMin) / (this.xMax - this.xMin)),\n            Math.floor(this.yResolution * (y - this.yMin) / (this.yMax - this.yMin))\n        ];\n    }\n\n    valueAtPixel([x, y]: [number, number]): number {\n        x = Math.max(0, Math.min(x, this.xResolution - 1));\n        y = Math.max(0, Math.min(y, this.yResolution - 1));\n        return this.density[x * this.yResolution + y];\n    }\n\n    valueAtDataPoint([x, y]: [number, number]): number {\n        return this.valueAtPixel(this.dataPointToPixel([x, y]));\n    }\n\n    createDensityImage() {\n        const canvas = document.createElement('canvas');\n        canvas.width = this.xResolution;\n        canvas.height = this.yResolution;\n        const ctx = canvas.getContext('2d')!;\n\n        // Define a color mapping\n        const colors = ['#ffffff', '#1cc8fb', '#e5ff3a', '#ffc42f', '#fe5924', '#d11d1d', '#841211'];\n        const delta = this.dMax / (colors.length - 1);\n        const colorMap = d3.scale.linear<fairAny>()\n            .domain(d3.range(colors.length).map(i => delta * i))\n            .range(colors);\n\n        // Map values to colors\n        const imageData = ctx.createImageData(this.xResolution, this.yResolution);\n        const rawData = imageData.data;\n        for (let ix = 0; ix < this.xResolution; ix++) {\n            for (let iy = 0; iy < this.yResolution; iy++) {\n                const srcIdx = ix * this.yResolution + iy;\n\n                const dstIdx = (this.yResolution - iy - 1) * this.xResolution + ix;\n                const value = this.density[srcIdx];\n                const color = d3.rgb(colorMap(value));\n\n                rawData[dstIdx * 4] = color.r;\n                rawData[dstIdx * 4 + 1] = color.g;\n                rawData[dstIdx * 4 + 2] = color.b;\n                rawData[dstIdx * 4 + 3] = 255;\n\n            }\n        }\n        ctx.putImageData(imageData, 0, 0);\n\n        return canvas;\n    }\n}\n\n","<div class=\"mouse-value\">\n    <span [hidden]=\"mouseValue == null\">\n        <b>Density:</b>\n        {{ mouseValue | smarterNumber }}\n    </span>\n    &nbsp;\n</div>\n\n<div\n    inViewport\n    [inViewportOptions]=\"{ threshold: [0] }\"\n    (inViewportAction)=\"onIntersection($event)\"\n    class=\"chart-wrapper\"\n>\n    <div\n        echarts\n        class=\"chart\"\n        *ngIf=\"chartData$ | async as chartData\"\n        [options]=\"chartData.chartOptions\"\n        [class.chart--fixed-height-tall]=\"hasFixedHeight\"\n        (chartInit)=\"onChartInitialized($event)\"\n        (chartMouseMove)=\"onMouseOver($event)\"\n        (chartMouseOver)=\"onMouseOver($event)\"\n        (chartMouseOut)=\"onMouseOut()\"\n    >\n    </div>\n</div>","import { Component, Input, Output, EventEmitter, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Fit2DDistributionCard } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { ObservableInput } from 'observable-input';\nimport { Observable, from, Subject, of, combineLatest } from 'rxjs';\nimport { map, shareReplay, first, switchMap, debounceTime } from 'rxjs/operators';\nimport { lazyRenderingValve } from 'dku-frontend-core';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\nimport { DensityMap } from '@shared/graphics/density-map';\nimport { WindowService } from 'dku-frontend-core';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\n\n@UntilDestroy()\n@Component({\n    selector: 'fit-2d-distribution-card-body',\n    templateUrl: './fit-2d-distribution-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/chart.less',\n        './fit-2d-distribution-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Fit2DDistributionCardBodyComponent implements OnDestroy {\n    @Input() @ObservableInput() results: Observable<Fit2DDistributionCard.Fit2DDistributionCardResult>;\n    @Input() @ObservableInput() params: Observable<Fit2DDistributionCard>;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    chartData$: Observable<{\n        results: Fit2DDistributionCard.Fit2DDistributionCardResult,\n        densityMap: DensityMap,\n        chartOptions: EChartOption\n    } | null>;\n\n    chart: any;\n    mousePosition: any;\n    mouseValue?: number;\n    isVisible$ = new Subject<boolean>();\n\n    constructor(private windowService: WindowService) {\n        const debouncedVisibility$ = this.isVisible$.pipe(debounceTime(300));\n        const resultsAndParams$ = combineLatest([this.results, this.params]);\n        this.chartData$ = lazyRenderingValve(resultsAndParams$, debouncedVisibility$, this.windowService.resize$)\n            .pipe(\n                switchMap(state => {\n                    if (!state) {\n                        return of(null);\n                    }\n                    const [results, params] = state;\n                    return from(DensityMap.createFromResult(results.result.density))\n                        .pipe(map(densityMap => ({\n                            results, densityMap,\n                            chartOptions: this.buildChartOptions(params, densityMap)\n                        })));\n                }),\n                shareReplay(1),\n                untilDestroyed(this)\n            );\n    }\n\n    onIntersection({ visible }: { visible: boolean }) {\n        this.isVisible$.next(visible);\n    }\n\n    onMouseOver(event: any) {\n        // Convert \"screen pixels\" to \"point in data domain\" using echart itself\n        this.mousePosition = this.chart.convertFromPixel('grid', [event.event.offsetX, event.event.offsetY]);\n\n        this.chartData$.pipe(first()).subscribe(chartData => {\n            if (chartData) {\n                this.mouseValue = chartData!.densityMap.valueAtDataPoint(this.mousePosition);\n            }\n        });\n    }\n\n    onMouseOut() {\n        this.mouseValue = undefined;\n    }\n\n    onChartInitialized(chart: any) {\n        this.chart = chart;\n    }\n\n    buildChartOptions(params: Fit2DDistributionCard, densityMap: DensityMap): EChartOption {\n        const { xMin, xMax, yMin, yMax } = densityMap;\n        const canvas = densityMap.createDensityImage();\n\n        return {\n            tooltip: {\n                showContent: false,\n                axisPointer: { type: 'cross' },\n            },\n            backgroundColor: '#FFFFFF',\n            animation: false,\n            grid: { left: 0, top: 0, right: 0, bottom: 0, containLabel: true },\n            xAxis: {\n                type: 'value',\n                min: xMin,\n                max: xMax,\n                zlevel: 1,\n                splitLine: { show: false },\n                axisLabel: {\n                    color: 'black',\n                    formatter: (value: number) => value === xMin || value === xMax ? '' : value\n                },\n                axisPointer: {\n                    label: {\n                        formatter: ({ value }: { value: number }) => {\n                            return params.xColumn.name + ': ' + smarterNumber(value);\n                        }\n                    }\n                }\n            },\n            yAxis: {\n                type: 'value',\n                min: yMin,\n                max: yMax,\n                zlevel: 1,\n                splitLine: { show: false },\n                axisLabel: {\n                    color: 'black',\n                    formatter: (value: number) => value === yMin || value === yMax ? '' : value\n                },\n                axisPointer: {\n                    label: {\n                        formatter: ({ value }: { value: number }) => {\n                            return params.yColumn.name + ': ' + smarterNumber(value);\n                        }\n                    }\n                }\n            },\n            series: [{\n                dimensions: [{ type: 'number' }, { type: 'number' }],\n                type: 'custom',\n                data: [{}],\n                renderItem: ((params: any, api: any) => {\n                    const origin = api.coord([xMin, yMin]);\n                    const scale = api.size([xMax - xMin, yMax - yMin]);\n\n                    return {\n                        type: 'image',\n                        style: {\n                            image: canvas,\n                            x: origin[0],\n                            y: origin[1],\n                            width: scale[0],\n                            // Negative height: draw image drawn upside down\n                            height: -scale[1]\n                        }\n                    };\n                })\n            } as EChartOption.Series]\n        };\n    }\n\n    ngOnDestroy() { }\n}\n\n","<ng-container *ngIf=\"groupCollapseStates$ | async as groupCollapseStates\">\n    <div \n        class=\"group\"\n        [qa]=\"{'eda-group': {'name': results.groups[groupIndex] | filterName}}\"\n        *ngFor=\"let groupResult of results.results; let groupIndex = index; trackBy: trackByIndex\"\n    >\n        <div class=\"title\">\n            <div class=\"label\" (click)=\"toggleGroup(results.groups[groupIndex], !groupCollapseStates[groupIndex])\">\n                <i *ngIf=\"showCollapsingControls\" [class.icon-chevron-down]=\"!groupCollapseStates[groupIndex]\"\n                    [class.icon-chevron-right]=\"groupCollapseStates[groupIndex]\"></i>\n                {{ results.groups[groupIndex] | filterName }}\n            </div>\n            <div class=\"pvalue pull-right\" *ngIf=\"getAsSingleTestCard() as singleTestCard\">\n                <colored-pvalue\n                    [showLabel]=\"true\"\n                    [pvalue]=\"groupResult.pvalue\"\n                    [significanceLevel]=\"1 - singleTestCard.confidenceLevel\"\n                ></colored-pvalue>\n            </div>\n            <div class=\"menu\" *ngIf=\"!readOnly && extendedActions\">\n                <button class=\"btn btn--icon btn--secondary menu-button pull-right\"\n                    [matMenuTriggerFor]=\"contextualMenu\"\n                    [qa]=\"'eda-group-menu-trigger'\">\n                    <i class=\"icon-dku-ellipsis-vertical\"></i>\n                </button>\n\n                <mat-menu #contextualMenu>\n                    <ng-template matMenuContent>\n                        <button mat-menu-item (click)=\"exportGroup(groupIndex, CardActionType.ADD)\"\n                            [wt1Click]=\"'worksheets_duplicate-grouped-card'\"\n                            [qa]=\"{'eda-group-menu-item': {action: 'duplicate'}}\">\n                            Duplicate as new card\n                        </button>\n                        <button mat-menu-item (click)=\"exportGroup(groupIndex, CardActionType.DEBUG)\"\n                            [qa]=\"{'eda-group-menu-item': {action: 'view-json'}}\">\n                            View JSON…\n                        </button>\n                        <button mat-menu-item (click)=\"exportGroup(groupIndex, CardActionType.PUBLISH)\"\n                            [wt1Click]=\"'worksheets_publish-grouped-card'\"\n                            [qa]=\"{'eda-group-menu-item': {action: 'publish'}}\">\n                            Publish…\n                        </button>\n                    </ng-template>\n                </mat-menu>\n            </div>\n        </div>\n        <div [@fadeInOut]=\"groupCollapseStates[groupIndex] ? 'closed': 'opened'\">\n            <card-body *ngIf=\"!groupCollapseStates[groupIndex] | delayWhenFalse\" \n                [params]=\"params\"\n                [results]=\"groupResult\" \n                [isTopLevel]=\"isTopLevel\" \n                [readOnly]=\"readOnly\"\n                [hasFixedHeight]=\"true\"\n                [extendedActions]=\"extendedActions\" \n                class=\"body\" \n                (action)=\"handleAction($event, groupIndex)\">\n            </card-body>\n        </div>\n    </div>\n</ng-container>","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\nimport { GroupedCompiledCardWrapper, Card, Filter, isTZTest1SampCard, isSignTest1SampCard, isShapiroNormalityTestCard, isAbstract2SampTestCard, isOneWayANOVACard, isMoodTestNSampCard, isChi2IndTestCard } from 'src/generated-sources';\nimport { CardAction, CardActionType } from '@features/eda/worksheet/cards/events';\nimport { combineLatest, Observable, ReplaySubject, EMPTY } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { fadeInOutHeight } from '@shared/animations/fade-in-out';\nimport { CollapsibleGroup, CollapsingService, UpdatableCollapsingService } from '@features/eda/collapsing.service';\nimport { noFilterIfAll } from '@features/eda/card-utils';\nimport { filterName } from '@features/eda/pipes/filter-name.pipe';\n\n@Component({\n    selector: 'grouped-card-body',\n    templateUrl: './grouped-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/menu-button.less',\n        './grouped-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [fadeInOutHeight]\n})\nexport class GroupedCardBodyComponent implements OnChanges {\n    @Input() results: GroupedCompiledCardWrapper.GroupedCardResult;\n    @Input() params: Card;\n    @Input() isTopLevel = false;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n    private params$ = new ReplaySubject<Card>(1);\n    private results$ = new ReplaySubject<GroupedCompiledCardWrapper.GroupedCardResult>(1);\n    groupCollapseStates$: Observable<boolean[]>;\n    CardActionType = CardActionType;\n\n    showCollapsingControls: boolean;\n\n    constructor(private collapsingService: CollapsingService) {\n        this.groupCollapseStates$ = combineLatest([this.params$, this.results$]).pipe(\n            switchMap(([params, results]) => {\n                if (results.type === 'groups') {\n                    return combineLatest(\n                        results.groups\n                            .map(group => new CollapsibleGroup(params.id, group))\n                            .map(collapsible => this.collapsingService.watchIsCollapsed(collapsible))\n                    );\n                }\n                return EMPTY;\n            })\n        );\n        this.showCollapsingControls = this.collapsingService instanceof UpdatableCollapsingService;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.params$.next(this.params);\n        }\n        if (changes.results) {\n            this.results$.next(this.results);\n        }\n    }\n\n    toggleGroup(group: Filter, newIsCollapsed: boolean) {\n        this.collapsingService.setIsCollapsed(\n            new CollapsibleGroup(this.params.id, group),\n            newIsCollapsed\n        );\n    }\n\n    trackByIndex(index: number) {\n        return index;\n    }\n\n    // Export a part of this header as another header card\n    // If a group index is given: create a new filtered header card\n    // If no group index is given: create a new splitted header card\n    exportGroup(groupIndex: number, type: CardActionType.ADD | CardActionType.DEBUG | CardActionType.PUBLISH) {\n        this.action.emit({\n            type, card: {\n                ...this.params,\n                splitBy: null,\n                filter: noFilterIfAll(this.results.groups[groupIndex])\n            }\n        });\n    }\n\n    handleAction(action: CardAction, groupIndex: number) {\n        if (action.type === CardActionType.HIGHLIGHT) {\n            if (action.filter) {\n                const groupFilter = {\n                    ...this.results.groups[groupIndex],\n                    name: this.params.splitBy!.groupingColumn.name\n                        + ': ' + filterName(this.results.groups[groupIndex])\n                };\n                action = {\n                    ...action, filter: noFilterIfAll({\n                        type: 'and',\n                        filters: [action.filter, groupFilter]\n                    })\n                };\n            }\n            this.action.emit(action);\n        }\n    }\n\n    getAsSingleTestCard() {\n        if (isTZTest1SampCard(this.params) || isSignTest1SampCard(this.params) || isShapiroNormalityTestCard(this.params) || isAbstract2SampTestCard(this.params) || isOneWayANOVACard(this.params) || isMoodTestNSampCard(this.params) || isChi2IndTestCard(this.params)) {\n            return this.params;\n        }\n\n        return;\n    }\n}\n","import { Directive, Output, EventEmitter, Renderer2, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[click.stop]'\n})\nexport class ClickStopDirective {\n    @Output(\"click.stop\") stopPropEvent = new EventEmitter();\n    unsubscribe: Function;\n\n    constructor(private renderer: Renderer2, private element: ElementRef) {\n    }\n\n    ngOnInit() {\n        this.unsubscribe = this.renderer.listen(this.element.nativeElement, \"click\", event => {\n            event.stopPropagation();\n            this.stopPropEvent.emit(event);\n        });\n    }\n\n    ngOnDestroy() {\n        this.unsubscribe();\n    }\n}\n","<div class=\"vertical-flex\" *ngIf=\"columnCollapseStates$ | async as columnCollapseStates\"\n    cdkDropList [cdkDropListDisabled]=\"readOnly\" cdkDropListOrientation=\"vertical\"\n    (cdkDropListDropped)=\"dropRow($event)\">\n    <ng-container *ngIf=\"groupCollapseStates$ | async as groupCollapseStates\">\n        <ng-container *ngFor=\"let columnParams of params.cards; let columnIndex = index; trackBy: trackByCardId\">\n            <div\n                cdkDrag\n                class=\"column-block vertical-flex\" [class.column-block--collapsed]=\"columnCollapseStates[columnIndex]\"\n                [qa]=\"{\n                    'eda-column-card': {\n                        'id': columnParams.id,\n                        'column-name': columnParams.column.name\n                    }\n                }\">\n                <ng-container *ngIf=\"!columnCollapseStates[columnIndex]; else dragcollapsed\">\n                    <div class=\"drag-drop-placeholder\" *cdkDragPlaceholder></div>\n                </ng-container>\n                <ng-template #dragcollapsed>\n                    <div class=\"drag-drop-placeholder drag-drop-placeholder--collapsed class.column-block--collapsed\" *cdkDragPlaceholder></div>\n                </ng-template>\n                <div class=\"column-block__title\" cdkDragHandle>\n                    <card-menu class=\"pull-right\" [params]=\"columnParams\" [readOnly]=\"readOnly\" [deletable]=\"true\"\n                        [extendedActions]=\"extendedActions\" (action)=\"handleColumnCardAction($event, columnIndex)\">\n                    </card-menu>\n                    <column-title (click)=\"toggleColumn(columnParams.column, !columnCollapseStates[columnIndex])\"\n                        [column]=\"columnParams.column\" [response]=\"isBivariateHeaderCard(params) ? params['yColumn'] : ''\"\n                        [collapsed]=\"columnCollapseStates[columnIndex]\" [splitBy]=\"params.splitBy\"\n                        [showCollapsingControls]=\"showCollapsingControls\"></column-title>\n                </div>\n\n                <lazy-render [visibleTemplate]=\"visible\" [trackData]=\"columnParams\"\n                    [passThrough]=\"params.cards.length < 10\">\n                    <ng-template #visible>\n\n                        <div [@fadeInOut]=\"columnCollapseStates[columnIndex] ? 'closed' : 'opened'\">\n                            <div class=\"horizontal-flex\" *ngIf=\"!columnCollapseStates[columnIndex] | delayWhenFalse\">\n                                <div class=\"group-block\"\n                                    [class.group-block--collapsed]=\"groupCollapseStates[groupIndex]\"\n                                    [class.group-block--column-wide]=\"params.type === 'bivariate_header'\"\n                                    *ngFor=\"let groupResult of results.results; let groupIndex = index; trackBy: trackByIndex\"\n                                    [qa]=\"{'eda-group': {name: results.groups[groupIndex] | filterName}}\">\n                                    <div class=\"group-block__title\"\n                                        [class.group-block__title--collapsed]=\"groupCollapseStates[groupIndex]\"\n                                        (click)=\"toggleGroup(results.groups[groupIndex], !groupCollapseStates[groupIndex])\">\n                                        <div class=\"group-block__title-content\"\n                                            [class.group-block__title-content--collapsed]=\"groupCollapseStates[groupIndex]\">\n                                            <div class=\"group-block__title-content-chevron\">\n                                                <i *ngIf=\"showCollapsingControls\"\n                                                    [class.icon-chevron-right]=\"groupCollapseStates[groupIndex]\"\n                                                    [class.icon-chevron-down]=\"!groupCollapseStates[groupIndex]\"></i>\n                                            </div>\n\n                                            <div class=\"group-block__title-content-label\">\n                                                {{ results.groups[groupIndex] | filterName }}\n                                            </div>\n\n                                            <ng-container *ngIf=\"!groupCollapseStates[groupIndex]\">\n                                                <button class=\"btn btn--icon btn--secondary menu-button pull-right\"\n                                                    [matMenuTriggerFor]=\"contextualMenu\"\n                                                    *ngIf=\"!readOnly && extendedActions\"\n                                                    (click.stop)=\"false\">\n                                                    <i class=\"icon-dku-ellipsis-vertical\"></i>\n                                                </button>\n\n                                                <mat-menu #contextualMenu>\n                                                    <ng-template matMenuContent>\n                                                        <button mat-menu-item\n                                                            (click)=\"exportGroup(columnIndex, groupIndex, CardActionType.ADD)\"\n                                                            [wt1Click]=\"'worksheets_duplicate-grouped-header-card'\">\n                                                            Duplicate as new card\n                                                        </button>\n                                                        <button mat-menu-item\n                                                            (click)=\"exportGroup(columnIndex, groupIndex, CardActionType.DEBUG)\">\n                                                            View JSON…\n                                                        </button>\n                                                        <button mat-menu-item\n                                                            (click)=\"exportGroup(columnIndex, groupIndex, CardActionType.PUBLISH)\"\n                                                            [wt1Click]=\"'worksheets_publish-grouped-header-card'\">\n                                                            Publish…\n                                                        </button>\n                                                    </ng-template>\n                                                </mat-menu>\n                                            </ng-container>\n                                        </div>\n                                    </div>\n                                    <column-card-body *ngIf=\"!groupCollapseStates[groupIndex]\" class=\"card--column-card\"\n                                        [params]=\"columnParams\" [headerParams]=\"params\"\n                                        [results]=\"groupResult.results[columnIndex]\" [readOnly]=\"readOnly\"\n                                        [extendedActions]=\"extendedActions\" (headerAction)=\"action.emit($event)\"\n                                        (action)=\"handleColumnCardAction($event, columnIndex, groupIndex)\">\n                                    </column-card-body>\n                                </div>\n                            </div>\n                        </div>\n                    </ng-template>\n                </lazy-render>\n            </div>\n\n        </ng-container>\n            <div *ngIf=\"!readOnly\" class=\"card--placeholder\" (click)=\"configureAnalysis()\">\n                + Add another variable\n            </div>\n    </ng-container>\n</div>","import { Component, Input, EventEmitter, Output, ChangeDetectionStrategy, OnChanges, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { ColumnCard, GroupedCompiledCardWrapper, AbstractHeaderCard, Card, Filter, SplitBySpec, Variable, isBivariateHeaderCard } from 'src/generated-sources';\nimport { CardActionType, CardAction, UpdateCardAction, AddCardAction, DebugCardAction, PublishCardAction } from '@features/eda/worksheet/cards/events';\nimport { ReplaySubject, Observable, combineLatest, EMPTY } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { fadeInOutHeight } from '@shared/animations/fade-in-out';\nimport { CollapsingService, CollapsibleGroup, CollapsibleColumnCard, UpdatableCollapsingService } from '@features/eda/collapsing.service';\nimport { noFilterIfAll } from '@features/eda/card-utils';\nimport { EditCardModalComponent } from '@features/eda/worksheet/card-wizard/edit-card-modal/edit-card-modal.component';\nimport { ModalsService, ModalShape } from '@shared/modals/modals.service';\nimport { filterName } from '@features/eda/pipes/filter-name.pipe';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { WT1Service } from '@core/dataiku-wt1/wt1.service';\n\n\n@Component({\n    selector: 'grouped-header-card-body',\n    templateUrl: './grouped-header-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/menu-button.less',\n        './grouped-header-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [fadeInOutHeight]\n})\nexport class GroupedHeaderCardBodyComponent implements OnChanges {\n    @Input() results: GroupedCompiledCardWrapper.GroupedCardResult;\n    @Input() params: AbstractHeaderCard;\n    @Input() readOnly: boolean;\n    @Input() extendedActions: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n    CardActionType = CardActionType;\n\n    showCollapsingControls: boolean;\n    isBivariateHeaderCard = isBivariateHeaderCard;\n\n    private params$ = new ReplaySubject<AbstractHeaderCard>(1);\n    private results$ = new ReplaySubject<GroupedCompiledCardWrapper.GroupedCardResult>(1);\n    groupCollapseStates$: Observable<boolean[]>;\n    columnCollapseStates$: Observable<boolean[]>;\n\n    constructor(\n        public collapsingService: CollapsingService,\n        public modalsService: ModalsService,\n        private viewContainerRef: ViewContainerRef,\n        private wt1Service: WT1Service\n    ) {\n        this.groupCollapseStates$ = combineLatest([this.params$, this.results$]).pipe(\n            switchMap(([params, results]) => {\n                if (results.type === 'groups') {\n                    return combineLatest(\n                        results.groups\n                            .map(group => new CollapsibleGroup(params.id, group))\n                            .map(collapsible => this.collapsingService.watchIsCollapsed(collapsible))\n                    );\n                }\n                return EMPTY;\n            })\n        );\n        this.columnCollapseStates$ = this.params$.pipe(\n            switchMap(params => {\n                return combineLatest(\n                    params.xColumns\n                        .map(column => new CollapsibleColumnCard(params.id, column))\n                        .map(collapsible => this.collapsingService.watchIsCollapsed(collapsible))\n                );\n            })\n        );\n        this.showCollapsingControls = this.collapsingService instanceof UpdatableCollapsingService;\n    }\n\n    toggleColumn(column: Variable, newIsCollapsed: boolean) {\n        this.collapsingService.setIsCollapsed(\n            new CollapsibleColumnCard(this.params.id, column),\n            newIsCollapsed\n        );\n    }\n\n    toggleGroup(group: Filter, newIsCollapsed: boolean) {\n        this.collapsingService.setIsCollapsed(\n            new CollapsibleGroup(this.params.id, group),\n            newIsCollapsed\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params) {\n            this.params$.next(this.params);\n        }\n        if (changes.results) {\n            this.results$.next(this.results);\n        }\n    }\n\n    handleColumnCardUpdate(action: UpdateCardAction, columnIndex: number) {\n        if (action.newParams.type === 'column_card') {\n            const newParams = {\n                ...this.params,\n                cards: [...this.params.cards!],\n                xColumns: [...this.params.xColumns!]\n            };\n            newParams.cards[columnIndex] = action.newParams;\n            newParams.xColumns[columnIndex] = action.newParams.column;\n            this.action.emit({ type: CardActionType.UPDATE, newParams });\n        }\n    }\n\n    handleColumnCardDelete(columnIndex: number) {\n        this.action.emit({\n            type: CardActionType.UPDATE,\n            newParams: {\n                ...this.params,\n                // cards are fixed up by the backend\n                xColumns: this.params.xColumns.filter((_, xColumnIndex) => xColumnIndex !== columnIndex)\n            }\n        });\n    }\n\n    handleColumnCardExport(action: AddCardAction | DebugCardAction | PublishCardAction,\n        columnIndex: number, groupIndex?: number) {\n        let exportedCard;\n        if (action.card.type === 'column_card') {\n            exportedCard = this.convertToHeaderCard(action.card);\n        } else {\n            // Export a card *within* a column card\n            exportedCard = action.card;\n        }\n\n        let filter: Filter | null = null;\n        let splitBy: SplitBySpec | null | undefined = null;\n\n        if (groupIndex != null) {\n            // Export is coming from a group: transform it into a filter\n            const groupFilter = this.results.groups[groupIndex];\n            filter = {\n                ...groupFilter,\n                name: this.params.splitBy!.groupingColumn.name + ': ' + filterName(groupFilter)\n            };\n        } else {\n            // Export is not coming from a group: propagate the 'splitBy' to that the export stays grouped\n            splitBy = this.params.splitBy;\n        }\n\n        exportedCard = { ...exportedCard, splitBy, filter: noFilterIfAll(filter) };\n        this.action.emit({ type: action.type, card: exportedCard });\n    }\n\n    handleColumnCardAction(action: CardAction, columnIndex: number, groupIndex?: number) {\n        switch (action.type) {\n            case CardActionType.UPDATE:\n                this.handleColumnCardUpdate(action, columnIndex);\n                break;\n            case CardActionType.DELETE:\n                this.handleColumnCardDelete(columnIndex);\n                break;\n            case CardActionType.ADD:\n            case CardActionType.DEBUG:\n            case CardActionType.PUBLISH:\n                this.handleColumnCardExport(action, columnIndex, groupIndex);\n                break;\n            case CardActionType.HIGHLIGHT:\n                if (action.filter && groupIndex != null) {\n                    const groupFilter = {\n                        ...this.results.groups[groupIndex],\n                        name: this.params.splitBy!.groupingColumn.name\n                            + ': ' + filterName(this.results.groups[groupIndex])\n                    };\n                    action = {\n                        ...action,\n                        filter: noFilterIfAll({\n                            type: 'and',\n                            filters: [action.filter, groupFilter]\n                        })\n                    };\n                }\n                this.action.emit(action);\n                break;\n        }\n    }\n\n    // We don't want to export standalone column cards: it must converted into a header card first\n    convertToHeaderCard(columnCard: ColumnCard): AbstractHeaderCard {\n        return {\n            ...this.params,\n            xColumns: [columnCard.column],\n            cards: [{ ...columnCard }],\n            filter: null,\n            splitBy: null\n        };\n    }\n\n    // Export a part of this header as another header card\n    // If a group index is given: create a new filtered header card\n    // If no group index is given: create a new splitted header card\n    exportGroup(columnIndex: number, groupIndex: number, type: CardActionType.ADD | CardActionType.DEBUG | CardActionType.PUBLISH) {\n        this.action.emit({\n            type, card: {\n                ...this.convertToHeaderCard(this.params.cards[columnIndex] as ColumnCard),\n                filter: noFilterIfAll(this.results.groups[groupIndex])\n            }\n        });\n    }\n\n    trackByIndex(index: number) {\n        return index;\n    }\n\n    trackByCardId(index: number, card: Card) {\n        return card.id;\n    }\n\n    configureAnalysis() {\n        this.modalsService.open(EditCardModalComponent,\n            {\n                params: this.params\n            },\n            ModalShape.NONE,\n            this.viewContainerRef\n        ).then(({ card }) => {\n            this.action.emit({ type: CardActionType.UPDATE, newParams: card });\n        }, () => { });\n    }\n\n    dropRow(event: CdkDragDrop<string[]>) {\n        this.action.emit({\n            type: CardActionType.REORDER_HEADER_CARD,\n            cardId: this.params.id,\n            previousIndex: event.previousIndex,\n            currentIndex: event.currentIndex\n        });\n        this.wt1Service.event('statistics-drag-drop-header-card-column', {});\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Distribution } from 'src/generated-sources';\nimport { CapitalizePipe } from '@shared/pipes/capitalize.pipe';\n\nconst capitalizePipe = new CapitalizePipe();\n\n@Pipe({\n    name: 'distributionName',\n    pure: true\n})\nexport class DistributionNamePipe implements PipeTransform {\n    transform(value: Distribution): string {\n        switch (value.type) {\n            case 'beta':\n            case 'binomial':\n            case 'pareto':\n            case 'poisson':\n            case 'triangular':\n            case 'weibull':\n            case 'exponential':\n            case 'laplace':\n            case 'normal':\n                return capitalizePipe.transform(value.type);\n            case 'lognormal':\n                return 'Log-normal';\n            case 'normal_mixture':\n                return `Normal mixture`;\n        }\n    }\n}\n","<table class=\"fit-table\">\n    <tbody>\n        <tr>\n            <th\n                class=\"fit-table__head\"\n                width=\"50%\"\n            >\n                Probability density function\n            </th>\n            <th\n                class=\"fit-table__head\"\n                width=\"50%\"\n            >\n                Q-Q plot\n            </th>\n        </tr>\n        <tr>\n            <td class=\"fit-table__cell\">\n                <lazy-echart class=\"chart\"\n                    [options]=\"densityChartOptions\"\n                ></lazy-echart>\n            </td>\n            <td class=\"fit-table__cell\">\n                <lazy-echart class=\"chart\"\n                    [options]=\"qqPlotOptions\"\n                ></lazy-echart>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<table class=\"fit-table\">\n    <tbody>\n        <tr>\n            <th class=\"fit-table__head\">Distribution</th>\n            <th\n                class=\"fit-table__head\"\n                colspan=\"2\"\n            >\n                Goodness of fit\n            </th>\n            <th class=\"fit-table__head\">Estimated parameters</th>\n        </tr>\n        <tr *ngFor=\"let fitResult of results.distributions; let distributionIndex = index;\">\n            <th class=\"fit-table__head\">\n                <!-- TODO: avoid inline style -->\n                <span [ngStyle]=\"{color: colorsService.getColorFromIndex(distributionIndex), 'font-size':'30px'}\">&bull;</span>\n                {{ fitResult.distribution | distributionName }}\n            </th>\n            <td class=\"fit-table__cell\">\n                <table class=\"stats-table\">\n                    <tbody\n                        class=\"stats-table__body\"\n                        *ngIf=\"fitResult.test.ks\"\n                    >\n                        <tr class=\"stats-table__row\">\n                            <th\n                                class=\"stats-table__title\"\n                                colspan=\"2\"\n                            >\n                                Kolmogorov–Smirnov test\n                            </th>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">statistic</th>\n                            <td class=\"stats-table__cell\">{{ fitResult.test.ks.statistic | smarterNumber }}</td>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">𝘱-value</th>\n                            <td class=\"stats-table__cell\">\n                                <colored-pvalue\n                                    [pvalue]=\"fitResult.test.ks.pvalue\"\n                                    [significanceLevel]=\"1 - params.confidenceLevel\"\n                                ></colored-pvalue>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </td>\n            <td class=\"fit-table__cell\">\n                <table\n                    class=\"stats-table\"\n                    *ngIf=\"fitResult.test.ll\"\n                >\n                    <tbody class=\"stats-table__body\">\n                        <tr class=\"stats-table__row\">\n                            <th\n                                class=\"stats-table__title\"\n                                colspan=\"2\"\n                            >\n                                Likelihood metrics\n                            </th>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">Log-likelihood</th>\n                            <td class=\"stats-table__cell\">{{ fitResult.test.ll.ll }}</td>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">AIC</th>\n                            <td class=\"stats-table__cell\">{{ fitResult.test.ll.aic }}</td>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">AICc</th>\n                            <td class=\"stats-table__cell\">{{ fitResult.test.ll.aicc }}</td>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">BIC</th>\n                            <td class=\"stats-table__cell\">{{ fitResult.test.ll.bic }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </td>\n            <td class=\"fit-table__cell\">\n                <table class=\"stats-table\">\n                    <tbody>\n                        <tr class=\"stats-table__row\">\n                            <th\n                                class=\"stats-table__title\"\n                                colspan=\"2\"\n                            >\n                                {{ fitResult.distribution | distributionName }} parameters\n                            </th>\n                        </tr>\n                        <ng-container [ngSwitch]=\"fitResult.fit.type\">\n                            <ng-container *ngSwitchCase=\"'normal'\">\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Mean</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.mean | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Standard deviation</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.std | smarterNumber }}</td>\n                                </tr>\n                            </ng-container>\n\n                            <ng-container *ngSwitchCase=\"'beta'\">\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Alpha</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.alpha | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Beta</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.beta | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Lower</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.lower | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Upper</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.upper | smarterNumber }}</td>\n                                </tr>\n                            </ng-container>\n\n                            <ng-container *ngSwitchCase=\"'triangular'\">\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">a</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.a | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">b</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.b | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">c</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.c | smarterNumber }}</td>\n                                </tr>\n                            </ng-container>\n\n                            <ng-container *ngSwitchCase=\"'exponential'\">\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Rate</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.rate | smarterNumber }}</td>\n                                </tr>\n                            </ng-container>\n\n                            <ng-container *ngSwitchCase=\"'lognormal'\">\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Logmean</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.logmean | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Logstd</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.logstd | smarterNumber }}</td>\n                                </tr>\n                            </ng-container>\n\n                            <ng-container *ngSwitchCase=\"'weibull'\">\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Shape</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.shape | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Scale</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.scale | smarterNumber }}</td>\n                                </tr>\n                            </ng-container>\n\n                            <ng-container *ngSwitchCase=\"'pareto'\">\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Shape</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.shape | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Scale</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.scale | smarterNumber }}</td>\n                                </tr>\n                            </ng-container>\n\n                            <ng-container *ngSwitchCase=\"'laplace'\">\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">Mu</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.mu | smarterNumber }}</td>\n                                </tr>\n                                <tr class=\"stats-table__row\">\n                                    <th class=\"stats-table__head\">b</th>\n                                    <td class=\"stats-table__cell\">{{ fitResult.fit.b | smarterNumber }}</td>\n                                </tr>\n                            </ng-container>\n\n                            <ng-container *ngSwitchCase=\"'normal_mixture'\">\n                                <ng-container *ngFor=\"let component of fitResult.fit.components; let componentIndex = index;\">\n                                    <tr class=\"stats-table__row\">\n                                        <th\n                                            class=\"stats-table__title\"\n                                            colspan=\"2\"\n                                        >\n                                            Component {{ componentIndex +1 }}\n                                        </th>\n                                    </tr>\n                                    <tr class=\"stats-table__row\">\n                                        <th class=\"stats-table__head\">Mean</th>\n                                        <td class=\"stats-table__cell\">{{ component.mean | smarterNumber }}</td>\n                                    </tr>\n                                    <tr class=\"stats-table__row\">\n                                        <th class=\"stats-table__head\">Standard deviation</th>\n                                        <td class=\"stats-table__cell\">{{ component.std | smarterNumber }}</td>\n                                    </tr>\n                                    <tr class=\"stats-table__row\">\n                                        <th class=\"stats-table__head\">Weight</th>\n                                        <td class=\"stats-table__cell\">{{ component.weight | smarterNumber }}</td>\n                                    </tr>\n                                </ng-container>\n                            </ng-container>\n\n                            <ng-container *ngSwitchDefault>\n                                <tr class=\"stats-table__row\">\n                                    <td class=\"stats-table__cell\">NOT IMPLEMENTED</td>\n                                </tr>\n                            </ng-container>\n                        </ng-container>\n                    </tbody>\n                </table>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { Component, Input, EventEmitter, Output, SimpleChanges, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FitDistributionCard, IntervalFilter } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport _ from 'lodash';\nimport d3 from 'd3';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\nimport { ColorsService } from '@shared/graphics/colors.service';\nimport { FilterNamePipe } from '@features/eda/pipes/filter-name.pipe';\nimport { encodeHTML } from 'entities';\nimport { DistributionNamePipe } from '@features/eda/pipes/distribution-name.pipe';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\nconst distributionNamePipe = new DistributionNamePipe();\n\n@Component({\n    selector: 'fit-distribution-card-body',\n    templateUrl: './fit-distribution-card-body.component.html',\n    styleUrls: [\n        './fit-distribution-card-body.component.less',\n        '../../../../shared-styles/fit-table.less',\n        '../../../../shared-styles/test-conclusion.less',\n        '../../../../shared-styles/stats-table.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FitDistributionCardBodyComponent implements OnChanges {\n    @Input() params: FitDistributionCard;\n    @Input() results: FitDistributionCard.FitDistributionCardResult;\n    @Output() action = new EventEmitter<CardAction>();\n\n    densityChartOptions: EChartOption;\n    qqPlotOptions: EChartOption;\n\n    constructor(public colorsService: ColorsService) { }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.buildDensityCharts();\n            this.buildQQPlots();\n        }\n    }\n\n    buildQQPlots() {\n        const series: EChartOption.Series[] = [];\n        let maxVal: number | undefined;\n        let minVal: number | undefined;\n        let minAbsDiff: number | undefined;\n        let maxAbsDiff: number | undefined;\n\n        type QQDataPoint = [number, number, number];\n\n        for (let i = 0; i < this.results.distributions.length; i++) {\n            const fitResult = this.results.distributions[i];\n            const qqData: QQDataPoint[] = fitResult.plot.qq.theoretical\n                .map((theoretical, idx) => {\n                    const empirical = fitResult.plot.qq.empirical[idx];\n                    const absDiff = Math.abs(empirical - theoretical);\n                    minVal = minVal === undefined ? Math.min(empirical, theoretical) : Math.min(empirical, theoretical, minVal);\n                    maxVal = maxVal === undefined ? Math.max(empirical, theoretical) : Math.max(empirical, theoretical, maxVal);\n                    minAbsDiff = minAbsDiff !== undefined ? Math.min(minAbsDiff, absDiff) : absDiff;\n                    maxAbsDiff = maxAbsDiff !== undefined ? Math.max(maxAbsDiff, absDiff) : absDiff;\n                    return [theoretical, fitResult.plot.qq.empirical[idx], absDiff];\n                });\n\n\n            const sizeScale = d3.scale.linear()\n                .domain([minAbsDiff!, maxAbsDiff!]).range([3, 7]);\n\n            series.push({\n                symbolSize: (data: QQDataPoint) => sizeScale(data[2]),\n                data: qqData,\n                type: 'scatter',\n                itemStyle: {\n                    color: this.colorsService.getColorFromIndex(i),\n                    opacity: 0.6\n                },\n                large: true\n            });\n        }\n\n        series.push({\n            type: 'line',\n            itemStyle: {\n                opacity: 0\n            },\n            lineStyle: {\n                color: '#DDDDDD'\n            },\n            data: [\n                [minVal, minVal],\n                [maxVal, maxVal]\n            ]\n        });\n\n        this.qqPlotOptions = {\n            tooltip: {\n                trigger: 'none',\n                axisPointer: { type: 'cross' }\n            },\n            animation: false,\n            grid: { left: 30, top: 10, right: 0, bottom: 10, containLabel: true },\n            xAxis: {\n                name: 'Theoretical',\n                type: 'value',\n                nameLocation: 'middle',\n                nameGap: 20,\n                axisPointer: {\n                    label: {\n                        formatter: ({ value }: { value: number }) => {\n                            return this.params.column.name + ' (theoretical): ' + smarterNumber(value);\n                        }\n                    }\n                }\n            },\n            yAxis: {\n                name: 'Empirical',\n                type: 'value',\n                nameLocation: 'middle',\n                nameGap: 40,\n                axisPointer: {\n                    label: {\n                        formatter: ({ value }: { value: number }) => {\n                            return this.params.column.name + ' (empirical): ' + smarterNumber(value);\n                        }\n                    }\n                }\n            },\n            series\n        };\n    }\n\n    buildDensityCharts() {\n        // Histogram\n        const filterName = new FilterNamePipe();\n        const histogramSeriesData = [];\n        const histogramData = this.results.histogram;\n        const histogramLabels = this.results!.histogram!.bins.map(b => filterName.transform(b));\n        const totalCount = _.chain(this.results.histogram.counts).sum().value();\n        const legendData = [];\n\n        for (let i = 0; i < histogramData.bins.length; i++) {\n            const bin = histogramData.bins[i] as IntervalFilter;\n            const count = histogramData.counts[i] / (totalCount * (bin.right - bin.left));\n            histogramSeriesData.push([bin.left, bin.right, count]);\n        }\n\n        let maxDensity = _.chain(histogramSeriesData).map(2).max().value();\n        const minVal = _.chain(histogramSeriesData).map(0).min().value();\n        const maxVal = _.chain(histogramSeriesData).map(1).max().value();\n\n        // Density of distributions\n        const distributionLines: EChartOption.Series[] = [];\n\n        for (let i = 0; i < this.results.distributions.length; i++) {\n            const distribution = this.results.distributions[i];\n            const name = i.toString();\n            legendData.push(name);\n\n            if (!distribution.plot.pdf) {\n                continue;\n            }\n\n            const pdfPlot = distribution.plot.pdf;\n            const seriesData = pdfPlot.xvals.map((x, idx) => [x, pdfPlot.probs[idx]]);\n            maxDensity = Math.max(_.chain(seriesData).map(1).max().value(), maxDensity);\n\n            distributionLines.push({\n                name,\n                type: 'line',\n                yAxisIndex: 0,\n                data: seriesData,\n                symbol: 'none',\n                itemStyle: {\n                    normal: { color: this.colorsService.getColorFromIndex(i) }\n                },\n            });\n        }\n\n        this.densityChartOptions = {\n            color: ['#3398DB'],\n            animation: false,\n            grid: { left: 0, top: 20, right: 0, bottom: 0, containLabel: true },\n            tooltip: {\n                confine: true,\n                trigger: 'item',\n                axisPointer: { type: 'none' }\n            },\n            legend: {\n                textStyle: {\n                    color: '#333',\n                    fontSize: 13\n                },\n                type: 'scroll',\n                padding: [0, 0, 15, 0],\n                data: legendData,\n                formatter: (index: string) => {\n                    return distributionNamePipe.transform(this.results.distributions[+index].distribution);\n                }\n            },\n            xAxis: {\n                type: 'value',\n                min: minVal,\n                max: maxVal,\n                axisTick: { show: true },\n                axisLine: { show: true },\n                axisLabel: { color: '#999999' }\n            },\n            yAxis: {\n                type: 'value',\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { show: false },\n                splitLine: { show: false },\n                min: 0,\n                max: maxDensity\n            },\n            series: [\n                ...distributionLines,\n                {\n                    type: 'custom',\n                    tooltip: {\n                        formatter: (value: any) => {\n                            const dataIndex = value.dataIndex;\n                            return encodeHTML(this.params.column.name)\n                                + ': <b>'\n                                + encodeHTML(histogramLabels[dataIndex])\n                                + '</b><br>Count: <b>'\n                                + encodeHTML('' + histogramData.counts[dataIndex])\n                                + '</b>';\n                        }\n                    },\n                    renderItem: (params: any, api: any) => {\n                        const yValue = api.value(2);\n                        const start = api.coord([api.value(0), yValue]);\n                        const size = api.size([api.value(1) - api.value(0), yValue]);\n\n                        return {\n                            type: 'rect',\n                            shape: {\n                                x: start[0],\n                                y: start[1],\n                                width: size[0],\n                                height: size[1]\n                            },\n                            style: api.style(),\n                            emphasisStyle: api.style()\n                        };\n                    },\n                    itemStyle: {\n                        normal: { color: '#c4dffe', borderColor: '#c4dffe', borderWidth: 1 }\n                    },\n                    data: histogramSeriesData\n                } as EChartOption.Series // Cast required because renderItem() typing is not really usable\n            ]\n        };\n    }\n\n}\n","<table class=\"fit-table\">\n    <tbody>\n        <tr>\n            <th class=\"fit-table__head\">Curve</th>\n        </tr>\n        <tr>\n            <td class=\"fit-table__cell\">\n                <lazy-echart class=\"curve-chart\"\n                    [options]=\"chartOptions\"\n                ></lazy-echart>\n\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<table class=\"fit-table\">\n    <tbody>\n        <tr>\n            <th class=\"fit-table__head\">Fit type</th>\n            <th class=\"fit-table__head\">Metrics</th>\n            <th class=\"fit-table__head\">Parameters</th>\n        </tr>\n\n        <tr *ngFor=\"let fitResult of results.parametrizedCurves; let curveIndex = index;\">\n            <th class=\"fit-table__head\">\n                <span [ngStyle]=\"{color: colorsService.getColorFromIndex(curveIndex), 'font-size':'30px'}\">&bull;</span>\n                {{ fitResult.parametrized.type }}\n            </th>\n            <td class=\"fit-table__cell\">\n                <table class=\"stats-table\">\n                    <tbody class=\"stats-table__body\">\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">R2</th>\n                            <td class=\"stats-table__cell\">{{ fitResult.scores.r2 | smarterNumber }}</td>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">RMSE</th>\n                            <td class=\"stats-table__cell\">{{ fitResult.scores.rmse | smarterNumber }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </td>\n            <td class=\"fit-table__cell\">\n                <table\n                    *ngIf=\"fitResult.parametrized.type == 'polynomial'\"\n                    class=\"stats-table\"\n                >\n                    <tbody class=\"stats-table__body\">\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">Degree</th>\n                            <td class=\"stats-table__cell\" [qa]=\"'eda-fit-curve-card-degree'\">{{fitResult.parametrized.coefs.length - 1}}</td>\n                        </tr>\n                        <tr\n                            class=\"stats-table__row\"\n                            *ngFor=\"let coef of fitResult.parametrized.coefs; let coefIndex = index;\"\n                        >\n                            <th class=\"stats-table__head\">x{{coefIndex}}</th>\n                            <td class=\"stats-table__cell\">{{ coef }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { Component, Input, EventEmitter, Output, SimpleChanges, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FitCurveCard } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport * as _ from 'lodash';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\nimport { ColorsService } from '@shared/graphics/colors.service';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\n@Component({\n    selector: 'fit-curve-card-body',\n    templateUrl: './fit-curve-card-body.component.html',\n    styleUrls: [\n        './fit-curve-card-body.component.less',\n        '../../../../shared-styles/fit-table.less',\n        '../../../../shared-styles/stats-table.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FitCurveCardBodyComponent implements OnChanges {\n    @Input() params: FitCurveCard;\n    @Input() results: FitCurveCard.FitCurveCardResult;\n    @Output() action = new EventEmitter<CardAction>();\n\n    chartOptions: EChartOption;\n\n    constructor(public colorsService: ColorsService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.chartOptions = this.results && this.buildChartOptions(this.results);\n        }\n    }\n\n    buildChartOptions(results: FitCurveCard.FitCurveCardResult): EChartOption {\n        const curvesData = results.parametrizedCurves;\n\n        const minMaxReducer = (p: { min: number, max: number }, value: number) => {\n            return {\n                min: Math.min(p.min, value),\n                max: Math.max(p.max, value),\n            };\n        }\n        const minMaxMinMaxReducer = (p: { min: number, max: number }, value: { min: number, max: number }) => {\n            return {\n                min: Math.min(p.min, value.min),\n                max: Math.max(p.max, value.max),\n            };\n        }\n        const initMinMax = {\n            min: Number.MAX_VALUE,\n            max: -Number.MAX_VALUE,\n        };\n        let { min: minX, max: maxX } = curvesData[0].plot.x.reduce(minMaxReducer, results.xSeries.reduce(minMaxReducer, initMinMax));\n\n        let { min: minY, max: maxY } = curvesData.map(cd => cd.plot.y.reduce(minMaxReducer, initMinMax))\n            .reduce(minMaxMinMaxReducer, results.ySeries.reduce(minMaxReducer, initMinMax));\n\n        minX = Math.floor(minX);\n        minY = Math.floor(minY);\n        maxX = Math.ceil(maxX);\n        maxY = Math.ceil(maxY);\n\n        const curveSeries = curvesData.map((cd, i) => {\n            return {\n                type: 'line',\n                data: _.zip(cd.plot.x, cd.plot.y),\n                symbol: 'none',\n                itemStyle: {\n                    normal: { color: this.colorsService.getColorFromIndex(i) }\n                },\n            };\n        });\n\n        const scatterSeries: EChartOption.SeriesScatter = {\n            type: 'scatter',\n            z: 0,\n            itemStyle: {\n                color: '#1e7efa',\n                opacity: 0.5\n            },\n            symbolSize: 4,\n            data: _.zip(results.xSeries, results.ySeries),\n            large: true\n        };\n\n        return {\n            color: ['#3398DB'],\n            animation: false,\n            tooltip: {\n                trigger: 'none',\n                axisPointer: { type: 'cross' }\n            },\n            grid: { left: 0, top: 10, right: 0, bottom: 0, containLabel: true },\n            xAxis: [{\n                type: 'value',\n                min: minX,\n                max: maxX,\n                axisTick: { show: true },\n                axisLine: { show: true },\n                axisLabel: {\n                    color: '#999999',\n                    formatter: (value: number) => value === minX || value === maxX ? '' : value\n                },\n                axisPointer: {\n                    label: {\n                        formatter: ({ value }: { value: number }) => {\n                            return this.params.xColumn.name + ': ' + smarterNumber(value);\n                        }\n                    }\n                }\n            }],\n            yAxis: {\n                type: 'value',\n                min: minY,\n                max: maxY,\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: {\n                    color: '#999999',\n                    formatter: (value: number) => value === maxY || value === minY ? '' : value\n                },\n                axisPointer: {\n                    label: {\n                        formatter: ({ value }: { value: number }) => {\n                            return this.params.yColumn.name + ': ' + smarterNumber(value);\n                        }\n                    }\n                }\n            },\n            series: [scatterSeries, ...curveSeries]\n        };\n    }\n}\n","<table>\n    <tr>\n        <td class=\"matrix-enclosing\">\n            <div class=\"matrix-enclosing\">\n                <table *ngIf=\"xVariablesWithValues && yVariablesWithValues && xVariablesWithValues.length && yVariablesWithValues.length\" class=\"matrix-table\"\n                    (mouseleave)=\"mouseOutScale()\"\n                    [class.table-border-colors]=\"!heatmapParams.showColors\"\n                    [class.table-border-nocolors]=\"heatmapParams.showColors\"\n                    #tableHeatmap\n                >\n                    <tbody>\n                        <tr *ngFor=\"let yname of maskedYLabels; index as yindex; trackBy: trackByIndex\">\n                            <td (click)=\"sortForY(yindex)\"\n                                [class.table-border-colors]=\"!heatmapParams.showColors && !horizontalCross(-1, yindex)\"\n                                [class.table-border-nocolors]=\"heatmapParams.showColors && !horizontalCross(-1, yindex)\"\n                                class=\"ylabel-cell\"\n                                [qa]=\"{'eda-heatmap-row-label': {variable: yname }}\"\n                                [class.horizontal-cross-colors]=\"heatmapParams.showColors && horizontalCross(-1, yindex)\"\n                                [class.horizontal-cross-nocolors]=\"!heatmapParams.showColors && horizontalCross(-1, yindex)\"\n                            >\n                                <span class=\"ylabel\" title=\"{{yname}}\">{{yname}}</span>\n                                <b *ngIf=\"showAscendingArrowY(yindex)\" class=\"caret rotate-left align-caret\"></b>\n                                <b *ngIf=\"showDescendingArrowY(yindex)\" class=\"caret rotate-right align-caret\"></b>\n                            </td>\n                            <td *ngFor=\"let xname of maskedXLabels; index as xindex; trackBy: trackByIndex\"\n                                title=\"{{yname}} on {{xname}} : {{maskedDataOrWarning(xindex,yindex)}}\"\n                                [style.background-color]=\"maskedColors[xindex][yindex]\"\n                                [style.color]=\"textColor(maskedData[xindex][yindex])\"\n                                [class.table-border-colors]=\"!heatmapParams.showColors && !horizontalCross(xindex, yindex) && !verticalCross(xindex, yindex)\"\n                                [class.table-border-nocolors]=\"heatmapParams.showColors && !horizontalCross(xindex, yindex) && !verticalCross(xindex, yindex)\"\n                                [class.horizontal-cross-colors]=\"heatmapParams.showColors &&  horizontalCross(xindex, yindex)\"\n                                [class.vertical-cross-colors]=\"heatmapParams.showColors && verticalCross(xindex, yindex)\"\n                                [class.horizontal-cross-nocolors]=\"!heatmapParams.showColors && horizontalCross(xindex, yindex)\"\n                                [class.vertical-cross-nocolors]=\"!heatmapParams.showColors && verticalCross(xindex, yindex)\"\n                                [class.unavailable-result]=\"null == maskedData[xindex][yindex]\"\n                                (mouseenter)=\"mouseOverValue(maskedData[xindex][yindex])\"\n                                class=\"matrix-value\"\n                                (click)=\"cross(xindex,yindex)\"\n                                >\n                                {{ heatmapParams.showValues ? displayValue(maskedData[xindex][yindex]) : '' }}\n                            </td>\n                        </tr>\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td></td>\n                            <td *ngFor=\"let xname of maskedXLabels; index as xindex; trackBy: trackByIndex\" (click)=\"sortForX(xindex)\"\n                                [class.table-border-colors]=\"!heatmapParams.showColors && !verticalCross(xindex, -1)\"\n                                [class.table-border-nocolors]=\"heatmapParams.showColors && !verticalCross(xindex, -1)\"\n                                [qa]=\"{'eda-heatmap-column-label': {variable: xname }}\"\n                                [class.vertical-cross-colors]=\"heatmapParams.showColors && verticalCross(xindex, -1)\"\n                                [class.vertical-cross-nocolors]=\"!heatmapParams.showColors && verticalCross(xindex, -1)\"\n                            >\n                                <div class=\"pull-right\">\n                                    <b *ngIf=\"showAscendingArrowX(xindex)\" class=\"caret vertical-mirror align-caret\"></b>\n                                    <b *ngIf=\"showDescendingArrowX(xindex)\" class=\"caret align-caret\"></b>\n                                </div>\n                                <span [title]=\"xname\"  class=\"xlabel\">{{xname}}</span>\n                            </td>\n                        </tr>\n                    </tfoot>\n                </table>\n                <p class=\"no-values-displayed\" *ngIf=\"!xVariablesWithValues || !yVariablesWithValues || !xVariablesWithValues.length || !yVariablesWithValues.length\">(all values are filtered)</p>\n            </div>\n        </td>\n        <td>\n            <canvas [hidden]=\"!heatmapParams.showColors\"\n                class=\"scale-canvas\" #scaleCanvas\n                (mousemove)=\"mouseOverScale($event)\"\n                (mouseout)=\"mouseOutScale()\"></canvas>\n        </td>\n    </tr>\n</table>\n","import { Component, Input, OnChanges, SimpleChanges, ElementRef, ViewChild, Output, EventEmitter, AfterViewInit } from '@angular/core';\nimport _ from 'lodash';\nimport d3 from 'd3';\nimport { HeatmapParams } from '@model-main/eda/worksheets/cards/common/heatmap-params';\n\nconst NO_SORT = -1;\nconst SCALEBAR_VERTICAL_MARGIN = 12;\nconst CANVAS_WIDTH = 70;\nconst ZERO_PLUS_MINUS_OFFSET = 4;\nconst ZERO_PLUS_MINUS_VERTICAL_MARGIN = 20;\nconst CANVAS_COLORSCALE_OFFSET = 15;\nconst CANVAS_COLORSCALE_WIDTH = 10;\n\n@Component({\n    selector: 'heatmap',\n    templateUrl: './heatmap.component.html',\n    styleUrls: ['./heatmap.component.less']\n})\nexport class HeatmapComponent implements OnChanges {\n    @Input() xLabels: string[];\n    @Input() yLabels: string[];\n    @Input() data: (number | null)[][];\n    @Input() warnings: (string | null)[][];\n    @Input() readOnly: boolean;\n    @Input() ignoreDiagonal = false;\n    @Input() heatmapParams: HeatmapParams; // heatmap visualization params adjustable by the user\n\n    @ViewChild('scaleCanvas', { static: true }) scaleCanvasRef: ElementRef;\n\n    dataMin: number;\n    dataMax: number;\n    dataMaxMin: number; // dataMax - dataMin\n\n    xVariablesWithValues: number[];\n    yVariablesWithValues: number[];\n\n    xMask: number[]; // mask to sort according to the order of values for a given x\n    yMask: number[]; // mask to sort according to the order of values for a given y\n\n    maskedXLabels: string[]; // labels ordered according to current sort\n    maskedYLabels: string[]; // labels ordered according to current sort\n    maskedData: (number | null)[][];\n    maskedColors: (string | null)[][];\n    maskedWarnings: (string | null)[][];\n\n    lastXSort: number = NO_SORT; // last X column data was sorted according to. -1 == no sort\n    lastYSort: number = NO_SORT; // last Y row data was sorted according to. -1 == no sort\n    lastXSortAscending: boolean;\n    lastYSortAscending: boolean;\n\n    canvasHeight: number;\n    scaleBarHeight: number;\n\n    xCrossMasked = -1;\n    yCrossMasked = -1;\n\n    valueTransformer = (v: null | number): number => v || 0;\n\n    constructor() {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.data) {\n            const flattenedData = _.flatten(this.data);\n            const tmpMin = _.min(flattenedData) || 0;\n            const tmpMax = _.max(flattenedData) || 0;\n            this.dataMax = Math.max(Math.abs(tmpMin), Math.abs(tmpMax));\n            this.dataMin = -this.dataMax;\n            this.dataMaxMin = this.dataMax - this.dataMin;\n        }\n\n        if (changes.data || changes.heatmapParams) {\n            if (this.heatmapParams.filterVariablesWithoutValues) {\n                this.xVariablesWithValues = [];\n                for (let x = 0 ; x < this.data.length ; x++) {\n                    const curVariable = this.data[x];\n                    for (let y = 0 ; y < curVariable.length ; y++) {\n                        const curVal = curVariable[y];\n                        if (curVal && Math.abs(curVal) >= this.heatmapParams.threshold\n                            && !((x === y) && this.ignoreDiagonal)) {\n                            this.xVariablesWithValues.push(x);\n                            break;\n                        }\n                    }\n                }\n                this.yVariablesWithValues = [];\n                for (let y = 0 ; y < this.data[0].length ; y++) {\n                    for (let x = 0 ; x < this.data.length ; x++) {\n                        const curVal = this.data[x][y];\n                        if (curVal && Math.abs(curVal) >= this.heatmapParams.threshold\n                            && !((x === y) && this.ignoreDiagonal)) {\n                            this.yVariablesWithValues.push(y);\n                            break;\n                        }\n                    }\n                }\n            } else {\n                this.xVariablesWithValues = Array.from(Array(this.data.length).keys());\n                this.yVariablesWithValues = Array.from(Array(this.data[0].length).keys());\n            }\n        }\n\n        if (this.heatmapParams.showAbsValues) {\n            this.valueTransformer = v => Math.abs(v || 0);\n        } else {\n            this.valueTransformer = v => v || 0;\n        }\n\n        if (changes.xLabels || changes.yLabels || changes.data || changes.heatmapParams) {\n            this.initMasks();\n            this.applyMasks();\n        }\n\n        this.drawScales();\n    }\n\n    reset(): void {\n        this.lastXSort = NO_SORT;\n        this.lastYSort = NO_SORT;\n        this.lastXSortAscending = false;\n        this.lastYSortAscending = false;\n        this.initMasks();\n        this.applyMasks();\n    }\n\n    resetable(): boolean {\n        return (this.lastXSort !== NO_SORT) || (this.lastYSort !== NO_SORT);\n    }\n\n    initMasks(): void {\n        // sequence 0..Nx-1\n        this.xMask = this.xVariablesWithValues.slice();\n        this.yMask = this.yVariablesWithValues.slice();\n    }\n\n    trackByIndex(index: number) {\n        return index;\n    }\n\n    applyMasks(): void {\n        this.maskedXLabels = this.xMask.map(i => this.xLabels[i]);\n        this.maskedYLabels = this.yMask.map(i => this.yLabels[i]);\n\n        this.maskedData = [];\n        this.maskedColors = [];\n        this.maskedWarnings = [];\n        for (let x = 0; x < this.xMask.length; x++) {\n            this.maskedData[x] = [];\n            this.maskedColors[x] = [];\n            this.maskedWarnings[x] = [];\n            for (let y = 0; y < this.yMask.length; y++) {\n                this.maskedData[x][y] = this.data[this.xMask[x]][this.yMask[y]];\n                this.maskedColors[x][y] = this.color(this.maskedData[x][y]);\n                this.maskedWarnings[x][y] = this.warnings?this.warnings[this.xMask[x]][this.yMask[y]]:null;\n            }\n        }\n    }\n\n    color(param: number | null): string {\n        if (param == null) {\n            return `rgb(210, 210, 210)`;\n        } else if (this.heatmapParams.showColors && (Math.abs(param || 0) >= this.heatmapParams.threshold)) {\n            return this.computeColor(param);\n        } else {\n            return `rgb(255, 255, 255)`;\n        }\n    }\n\n    computeColor(param: number | null): string {\n        return d3.scale.linear<string>()\n            .domain([this.dataMin, 0, this.dataMax])\n            .range(['#323dff', '#FFFFFF', '#CC2222']) // color scale is the same as div.heat-gradient\n            (this.valueTransformer(param));\n    }\n\n    textColor(param: number | null): string {\n        if (param == null) {\n            return `rgb(0, 0, 0)`;\n        } else if (this.heatmapParams.showColors && Math.abs(param) > 0.5) {\n            return `rgb(255,255,255)`;\n        } else {\n            return `rgb(0,0,0)`;\n        }\n    }\n\n    showAscendingArrowX(xindex: number): boolean {\n        return (xindex === this.lastXSort) && this.lastXSortAscending;\n    }\n\n    showDescendingArrowX(xindex: number): boolean {\n        return (xindex === this.lastXSort) && !this.lastXSortAscending;\n    }\n\n    showAscendingArrowY(yindex: number): boolean {\n        return (yindex === this.lastYSort) && this.lastYSortAscending;\n    }\n\n    showDescendingArrowY(yindex: number): boolean {\n        return (yindex === this.lastYSort) && !this.lastYSortAscending;\n    }\n\n    sortForX(xindex: number): void {\n        if (xindex === this.lastXSort) {\n            if (this.lastXSortAscending) {\n                this.lastXSort = NO_SORT;\n                this.yMask = this.yVariablesWithValues.slice();\n            } else {\n                this.yMask = this.yMask.slice().reverse();\n                this.lastXSortAscending = !this.lastXSortAscending;\n                if (this.lastYSort !== NO_SORT) {\n                    this.lastYSort = this.yMask.length - 1 - this.lastYSort;\n                }\n            }\n        } else {\n            // extract values for this line\n            const valuesToSort = this.maskedData[xindex];\n            // take a copy and store original index\n            const valuesToSortWithOriIndex = valuesToSort.map((v, i) => ({ v: this.valueTransformer(v), i }));\n            // sort according to value\n            valuesToSortWithOriIndex.sort((y1, y2) => y1.v - y2.v);\n\n            // got to update lastYSort according to new sorting\n            // first phase, setting it to the real, masked value\n            if (this.lastYSort !== NO_SORT) {\n                this.lastYSort = this.yMask[this.lastYSort];\n            }\n\n            // get the mask\n            this.yMask = valuesToSortWithOriIndex.map(v => this.yMask[v.i]);\n\n            // second phase : find index of the real, masked value, in mask\n            if (this.lastYSort !== NO_SORT) {\n                this.lastYSort = this.yMask.indexOf(this.lastYSort);\n            }\n\n            this.lastXSort = xindex;\n            this.lastXSortAscending = false;\n        }\n        this.applyMasks();\n    }\n\n    sortForY(yindex: number): void {\n        if (yindex === this.lastYSort) {\n            if (this.lastYSortAscending) {\n                this.lastYSort = NO_SORT;\n                this.xMask = this.xVariablesWithValues.slice();\n            } else {\n                this.xMask = this.xMask.slice().reverse();\n                this.lastYSortAscending = !this.lastYSortAscending;\n                if (this.lastXSort !== NO_SORT) {\n                    this.lastXSort = this.xMask.length - 1 - this.lastXSort;\n                }\n            }\n        } else {\n            // extract values for this line\n            const valuesToSort = [];\n            for (let x = 0; x < this.xMask.length; x++) {\n                valuesToSort.push(this.valueTransformer(this.maskedData[x][yindex]));\n            }\n            const valuesToSortWithOriIndex = valuesToSort.map((v, i) => { return { v, i } });\n            // sort according to value\n            valuesToSortWithOriIndex.sort((x1, x2) => x1.v - x2.v);\n\n            // got to update lastXSort according to new sorting\n            // first phase, setting it to the real, masked value\n            if (this.lastXSort !== NO_SORT) {\n                this.lastXSort = this.xMask[this.lastXSort];\n            }\n            // get the mask\n            this.xMask = valuesToSortWithOriIndex.map(v => this.xMask[v.i]);\n\n            // second phase : find index of the real, masked value, in mask\n            if (this.lastXSort !== NO_SORT) {\n                this.lastXSort = this.xMask.indexOf(this.lastXSort);\n            }\n\n            this.lastYSort = yindex;\n            this.lastYSortAscending = false;\n        }\n        this.applyMasks();\n    }\n\n    drawScales(): void {\n        const canvas: HTMLCanvasElement = this.scaleCanvasRef.nativeElement! as HTMLCanvasElement;\n        const dpr = window.devicePixelRatio || 1;\n        const rect = canvas.getBoundingClientRect();\n\n        this.canvasHeight = rect.height;\n        canvas.width = CANVAS_WIDTH * dpr;\n        canvas.height = this.canvasHeight * dpr;\n        canvas.style.width = CANVAS_WIDTH + 'px';\n        canvas.style.height = this.canvasHeight + 'px';\n        this.scaleBarHeight = this.canvasHeight - 2 * SCALEBAR_VERTICAL_MARGIN;\n\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\n        ctx.scale(dpr, dpr);\n        ctx.fillStyle = 'rgb(255,255,255)';\n        ctx.clearRect(0, 0, CANVAS_WIDTH, this.canvasHeight);\n\n        if (!this.heatmapParams.showAbsValues) {\n            const increment = this.dataMaxMin / this.scaleBarHeight;\n            for (let i = 0; i < this.scaleBarHeight; i++) {\n                const v = this.dataMax - increment * i;\n                ctx.fillStyle = this.computeColor(v);\n                ctx.fillRect(CANVAS_COLORSCALE_OFFSET, SCALEBAR_VERTICAL_MARGIN + i, CANVAS_COLORSCALE_WIDTH - 1, 1);\n            }\n\n            const y0 = this.canvasHeight / 2;\n            const yM = this.canvasHeight - ZERO_PLUS_MINUS_VERTICAL_MARGIN;\n            const yP = ZERO_PLUS_MINUS_VERTICAL_MARGIN;\n            ctx.fillStyle = 'rgb(0,0,0)';\n            ctx.fillText('0', ZERO_PLUS_MINUS_OFFSET, y0);\n            ctx.fillText('+', ZERO_PLUS_MINUS_OFFSET, yP);\n            ctx.fillText('-', ZERO_PLUS_MINUS_OFFSET, yM);\n        } else {\n            const increment = this.dataMax / this.scaleBarHeight;\n            for (let i = 0; i < this.scaleBarHeight; i++) {\n                const v = this.dataMax - increment * i;\n                ctx.fillStyle = this.computeColor(v);\n                ctx.fillRect(CANVAS_COLORSCALE_OFFSET, SCALEBAR_VERTICAL_MARGIN + i, CANVAS_COLORSCALE_WIDTH - 1, 1);\n            }\n\n            const y0 = this.canvasHeight - ZERO_PLUS_MINUS_VERTICAL_MARGIN;\n            const yP = ZERO_PLUS_MINUS_VERTICAL_MARGIN;\n            ctx.fillStyle = 'rgb(0,0,0)';\n            ctx.fillText('0', ZERO_PLUS_MINUS_OFFSET, y0);\n            ctx.fillText('+', ZERO_PLUS_MINUS_OFFSET, yP);\n        }\n    }\n\n    mouseOverScale(event: MouseEvent): void {\n        if (!this.heatmapParams.showColors) {\n            return;\n        }\n        let y = event.offsetY;\n\n        const canvas: HTMLCanvasElement = this.scaleCanvasRef.nativeElement! as HTMLCanvasElement;\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\n        ctx.clearRect(CANVAS_COLORSCALE_OFFSET + CANVAS_COLORSCALE_WIDTH + 1, 0, CANVAS_WIDTH - CANVAS_COLORSCALE_WIDTH, this.canvasHeight);\n\n        if (y < SCALEBAR_VERTICAL_MARGIN) {\n            y = SCALEBAR_VERTICAL_MARGIN;\n        } else if (y > this.canvasHeight - SCALEBAR_VERTICAL_MARGIN) {\n            y = this.canvasHeight - SCALEBAR_VERTICAL_MARGIN;\n        }\n\n\n        let increment;\n        if (!this.heatmapParams.showAbsValues) {\n            increment = this.dataMaxMin / this.scaleBarHeight;\n        } else {\n            increment = this.dataMax / this.scaleBarHeight;\n        }\n        let v = this.dataMax - increment * (y - SCALEBAR_VERTICAL_MARGIN);\n        if (this.heatmapParams.showAbsValues) {\n            // avoid printing -0,000\n            v = Math.max(0, v);\n        }\n\n        this.drawValueOnScale(v, y);\n    }\n\n    mouseOverValue(v: number | null): void {\n        const canvas: HTMLCanvasElement = this.scaleCanvasRef.nativeElement! as HTMLCanvasElement;\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\n        ctx.clearRect(CANVAS_COLORSCALE_OFFSET + CANVAS_COLORSCALE_WIDTH + 1, 0, CANVAS_WIDTH - CANVAS_COLORSCALE_WIDTH, this.canvasHeight);\n\n        if (!this.heatmapParams.showColors || null == v) {\n            return;\n        }\n        let increment: number;\n        if (!this.heatmapParams.showAbsValues) {\n            increment = this.dataMaxMin / this.scaleBarHeight;\n        } else {\n            increment = this.dataMax / this.scaleBarHeight;\n        }\n        const y = SCALEBAR_VERTICAL_MARGIN + (this.dataMax - this.valueTransformer(v)) / increment;\n\n        this.drawValueOnScale(this.valueTransformer(v), y);\n    }\n\n    drawValueOnScale(v: number, y: number): void {\n        const canvas: HTMLCanvasElement = this.scaleCanvasRef.nativeElement! as HTMLCanvasElement;\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\n        ctx.fillStyle = 'rgb(0,0,0)';\n        ctx.font = '400 1.2em SourceSansPro';\n        ctx.fillText(v.toFixed(3), CANVAS_COLORSCALE_OFFSET + CANVAS_COLORSCALE_WIDTH + 2, y)\n        ctx.fillStyle = this.computeColor(v);\n        ctx.fillRect(CANVAS_COLORSCALE_OFFSET + CANVAS_COLORSCALE_WIDTH + 2, y + 10, CANVAS_WIDTH - CANVAS_COLORSCALE_WIDTH - 4, 10);\n    }\n\n    mouseOutScale(): void {\n        if (!this.heatmapParams.showColors) {\n            return;\n        }\n        const canvas: HTMLCanvasElement = this.scaleCanvasRef.nativeElement! as HTMLCanvasElement;\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\n        ctx.clearRect(CANVAS_COLORSCALE_OFFSET + CANVAS_COLORSCALE_WIDTH + 1, 0, CANVAS_WIDTH - CANVAS_COLORSCALE_WIDTH, this.canvasHeight);\n    }\n\n\n    displayValue(v: number | null): string {\n        if (null == v) {\n            if (!this.heatmapParams.showColors) {\n                return 'N/A';\n            } else {\n                return '';\n            }\n        } else if (Math.abs(v) >= this.heatmapParams.threshold) {\n            return this.valueTransformer(v).toFixed(3);\n        } else {\n            return '';\n        }\n    }\n\n    maskedDataOrWarning(x: number, y: number) {\n        if (this.maskedData[x][y]) {\n            return this.maskedData[x][y];\n        }\n        return this.maskedWarnings[x][y];\n    }\n\n    cross(x: number, y: number) {\n        const xMasked = this.xMask[x];\n        const yMasked = this.yMask[y];\n        if ( (this.xCrossMasked === xMasked) && (this.yCrossMasked === yMasked) ) {\n            this.xCrossMasked = -1;\n            this.yCrossMasked = -1;\n        } else {\n            this.xCrossMasked = xMasked;\n            this.yCrossMasked = yMasked;\n        }\n    }\n\n    horizontalCross(x: number, y: number) {\n        const xMasked = this.xMask[x];\n        const yMasked = this.yMask[y];\n        return ((this.yCrossMasked !== -1) && (xMasked !== this.xCrossMasked) && (yMasked === this.yCrossMasked));\n    }\n\n    verticalCross(x: number, y: number) {\n        const xMasked = this.xMask[x];\n        const yMasked = this.yMask[y];\n        return ((this.xCrossMasked !== -1) && (xMasked === this.xCrossMasked) && (yMasked !== this.yCrossMasked));\n    }\n}\n","<lazy-render\n    [trackData]=\"results\"\n    [visibleTemplate]=\"visible\"\n    [invisibleTemplate]=\"invisible\"\n    >\n    <ng-template #visible>\n        <heatmap\n            [xLabels]=\"heatmapLabels\"\n            [yLabels]=\"heatmapLabels\"\n            [data]=\"heatmapData\"\n            [readOnly]=\"readOnly\"\n            [heatmapParams]=\"params.heatmapParams\"\n            [warnings]=\"heatmapWarnings\"\n            [ignoreDiagonal]=\"true\"\n        >\n        </heatmap>\n    </ng-template>\n    <ng-template #invisible>Please wait...</ng-template>\n</lazy-render>\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { CorrelationMatrixCard } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport { CardAction, CardActionType } from '@features/eda/worksheet/cards/events';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'correlation-matrix-card-body',\n    templateUrl: './correlation-matrix-card-body.component.html',\n    styleUrls: ['./correlation-matrix-card-body.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CorrelationMatrixCardBodyComponent implements OnChanges {\n    @Input() results: CorrelationMatrixCard.CorrelationMatrixCardResult;\n    @Input() params: CorrelationMatrixCard;\n    @Input() readOnly: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n    chartOptions: EChartOption;\n\n    heatmapLabels: string[] | undefined;\n    heatmapData: number[][] | undefined;\n    heatmapWarnings: (string | null)[][] | undefined;\n\n    constructor() {\n\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.buildHeatmapChartParams();\n        }\n    }\n\n    buildHeatmapChartParams(): void {\n        this.heatmapData = [];\n        this.heatmapWarnings = [];\n        let scoreIdx = 0;\n        let warningIdx = 0;\n        for (let col = 0; col < this.params.columns.length; col++) {\n            this.heatmapData[col] = [];\n            this.heatmapWarnings[col] = [];\n        }\n\n        for (let xIdx = 0; xIdx < this.params.columns.length; xIdx++) {\n            for (let yIdx = xIdx; yIdx < this.params.columns.length; yIdx++) {\n                const score = this.results.scores[scoreIdx];\n                this.heatmapData[xIdx][yIdx] = score;\n                this.heatmapData[yIdx][xIdx] = score;\n                if ((null == score) && this.results.partialErrors && this.results.partialErrors.length > warningIdx) {\n                    this.heatmapWarnings[xIdx][yIdx] = this.results.partialErrors[warningIdx];\n                    this.heatmapWarnings[yIdx][xIdx] = this.results.partialErrors[warningIdx];\n                    warningIdx++;\n                } else {\n                    this.heatmapWarnings[xIdx][yIdx] = null;\n                    this.heatmapWarnings[yIdx][xIdx] = null;\n                }\n                scoreIdx++;\n            }\n        }\n\n        this.heatmapLabels = this.params.columns.map((variable) => variable.name)\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HeatmapComponent } from './heatmap/heatmap.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommaSeparatedViewDirective } from '@shared/directives/comma-separated-view/comma-separated-view.directive';\nimport { ForceIntegerDirective } from '@shared/directives/force-integer/force-integer.directive';\nimport { QaSelectorDirective } from '@shared/directives/qa-selector/qa-selector.directive';\nimport { NgxEchartsModule } from 'ngx-echarts';\nimport { DataikuAPIModule } from '@core/dataiku-api/dataiku-api.module';\nimport { ClickStopDirective } from '@shared/directives/click-stop/click-stop.directive';\nimport { SimpleNumberListComponent } from './simple-number-list/simple-number-list.component';\nimport { ContainerSelectionFormComponent } from './container-selection-form/container-selection-form.component';\nimport { DoclinkWrapperComponent } from './doclink-wrapper/doclink-wrapper.component';\nimport { DatasetErrorCtaComponent } from './dataset-error-cta/dataset-error-cta.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ScrollingModule,\n        NgxEchartsModule,\n        DataikuAPIModule\n    ],\n    declarations: [\n        HeatmapComponent,\n        CommaSeparatedViewDirective,\n        ClickStopDirective,\n        ForceIntegerDirective,\n        QaSelectorDirective,\n        SimpleNumberListComponent,\n        ContainerSelectionFormComponent,\n        DoclinkWrapperComponent,\n        DatasetErrorCtaComponent\n    ],\n    exports: [\n        HeatmapComponent,\n        CommaSeparatedViewDirective,\n        ClickStopDirective,\n        ForceIntegerDirective,\n        QaSelectorDirective,\n        SimpleNumberListComponent,\n        ContainerSelectionFormComponent,\n        DoclinkWrapperComponent,\n        DatasetErrorCtaComponent\n    ],\n    entryComponents: [\n    ]\n})\nexport class ComponentsModule {\n}\n","<div class=\"card-layout\">\n    <div class=\"card-layout__section card-layout__section--horizontal\">\n        <div class=\"card-layout__section\">\n            <div class=\"card-layout__title\">Empirical CDFs</div>\n            <div class=\"card-layout__content\">\n                <lazy-echart [options]=\"cdfChartOptions\" class=\"cdf\"></lazy-echart>\n            </div>\n        </div>\n        <div class=\"card-layout__section card-layout__section--vertical\">\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Samples</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row--colored\">\n                                <th\n                                    class=\"stats-table__head\"\n                                    colspan=\"2\"\n                                ></th>\n                                <th\n                                    class=\"stats-table__title\"\n                                    colspan=\"2\"\n                                >\n                                    {{ params.xColumn.name }}\n                                </th>\n                            </tr>\n                            <tr class=\"stats-table__row--colored\">\n                                <th class=\"stats-table__title\">{{ params.yColumn.name }}</th>\n                                <th class=\"stats-table__title\">Count</th>\n                                <th class=\"stats-table__title\">Mean</th>\n                                <th class=\"stats-table__title\">Std. Dev.</th>\n                            </tr>\n                            <tr class=\"stats-table__row--invisible\"></tr>\n                            <tr\n                                class=\"stats-table__row population\"\n                                *ngFor=\"let group of results.groups; let groupIndex = index;\"\n                            >\n                                <th class=\"stats-table__head\">\n                                    <span [ngStyle]=\"{color: colorsService.getColorFromIndex(groupIndex), 'font-size':'30px'}\">&bull;</span>\n                                    {{ group.filter | filterName }}\n                                </th>\n                                <td class=\"stats-table__cell stats-table__cell--left\">{{ group.boxPlot.countComplete }}</td>\n                                <td class=\"stats-table__cell stats-table__cell--left\">{{ group.boxPlot.mean | smarterNumber  }}</td>\n                                <td class=\"stats-table__cell stats-table__cell--left\">{{ group.boxPlot.stdDev | smarterNumber }}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Hypothesis</div>\n                <div class=\"card-layout__content\">\n\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Tested hypothesis</th>\n                                <td class=\"stats-table__cell\">\n                                    <u>{{ params.xColumn.name }}</u>\n                                    distribution is the same in the two populations\n                                </td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Significance level</th>\n                                <td class=\"stats-table__cell\">\n                                    {{ 1 - params.confidenceLevel | smarterNumber }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n\n                </div>\n            </div>\n\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Results</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Kolmogorov–Smirnov test statistic</th>\n                                <td class=\"stats-table__cell\">{{ results.statistic | smarterNumber }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">𝘱-value</th>\n                                <td class=\"stats-table__cell\">\n                                    <colored-pvalue\n                                        [pvalue]=\"results.pvalue\"\n                                        [significanceLevel]=\"1 - params.confidenceLevel\"\n                                    ></colored-pvalue>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"test-conclusion\">\n    <ng-container *ngIf=\"isRejected else inconclusive\">\n        <p class=\"test-conclusion__wording test-conclusion__wording--rejected\">\n            <u>{{ params.xColumn.name }}</u>\n            distribution is different in the two populations\n        </p>\n    </ng-container>\n\n    <ng-template #inconclusive>\n        <p class=\"test-conclusion__wording\">\n            The test is inconclusive about whether\n            <u>{{ params.xColumn.name }}</u>\n            distribution is different in the two populations\n        </p>\n    </ng-template>\n</div>\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\nimport { KsTest2SampCard } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport _ from 'lodash';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\nimport { ColorsService } from '@shared/graphics/colors.service';\n\n@Component({\n    selector: 'ks-test-2samp-card-body',\n    templateUrl: './ks-test-2samp-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/test-conclusion.less',\n        '../../../../shared-styles/stats-table.less',\n        '../../../../shared-styles/card-layout.less',\n        './ks-test-2samp-card-body.component.less'\n    ]\n})\nexport class KsTest2SampCardBodyComponent implements OnChanges {\n    @Input() results: KsTest2SampCard.KsTest2SampCardResult;\n    @Input() params: KsTest2SampCard;\n    @Output() action = new EventEmitter<CardAction>();\n\n    cdfChartOptions: EChartOption;\n\n    constructor(public colorsService: ColorsService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.cdfChartOptions = this.results && this.buildChartOptions(this.results);\n        }\n    }\n\n    get isRejected() {\n        return this.results.pvalue <= (1 - this.params.confidenceLevel);\n    }\n\n    buildChartOptions(results: KsTest2SampCard.KsTest2SampCardResult): EChartOption {\n        return {\n            color: ['#3398DB'],\n            animation: false,\n            tooltip: {\n                trigger: 'item',\n                axisPointer: {\n                    type: 'cross'\n                }\n            },\n            grid: { left: 0, top: 10, right: 0, bottom: 0, containLabel: true },\n            xAxis: [{\n                type: 'value',\n                scale: true,\n                axisTick: { show: true },\n                axisLine: { show: true },\n                axisLabel: { color: '#999999' }\n            }],\n            yAxis: {\n                type: 'value',\n                min: 0,\n                max: 1,\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { color: '#999999' }\n            },\n            series: [\n                {\n                    type: 'line',\n                    symbol: 'none',\n                    step: 'middle',\n                    data: _.zip(results.cdf1.xvals, results.cdf1.probs),\n                    itemStyle: {\n                        normal: {\n                            color: this.colorsService.getColorFromIndex(0)\n                        }\n                    }\n                },\n                {\n                    type: 'line',\n                    step: 'middle',\n                    symbol: 'none',\n                    data: _.zip(results.cdf2.xvals, results.cdf2.probs),\n                    itemStyle: {\n                        normal: {\n                            color: this.colorsService.getColorFromIndex(1)\n                        }\n                    }\n                }\n            ]\n        };\n    }\n}\n","<div class=\"card-layout\">\n    <div class=\"card-layout__section card-layout__section--vertical\">\n        <div class=\"card-layout__section\">\n            <div class=\"card-layout__title\">Tested hypothesis</div>\n            <div class=\"card-layout__content\">\n                <table class=\"stats-table\">\n                    <tbody class=\"stats-table__body\">\n                        <tr class=\"stats-table__row stats-table__row--colored\">\n                            <th class=\"stats-table__head\">Significance level</th>\n                            <td class=\"stats-table__cell\">\n                                {{ 1 - params.confidenceLevel | smarterNumber }}\n                            </td>\n                            <th class=\"stats-table__head\">𝘱-values correction method</th>\n                            <td class=\"stats-table__cell\">\n                                <ng-container [ngSwitch]=\"params.adjustmentMethod\">\n                                    <ng-container *ngSwitchCase=\"'NONE'\">None</ng-container>\n                                    <ng-container *ngSwitchCase=\"'BONFERRONI'\">Bonferroni</ng-container>\n                                    <ng-container *ngSwitchCase=\"'HOLM_BONFERRONI'\">Holm-Bonferroni</ng-container>\n                                    <ng-container *ngSwitchDefault>[NOT IMPLEMENTED]</ng-container>\n                                </ng-container>\n                            </td>\n                        </tr>\n                        <tr class=\"stats-table__row stats-table__row--colored\">\n                            <th class=\"stats-table__head\">Hypothesis tested</th>\n                            <td class=\"stats-table__cell\">\n                                <u>{{ params.xColumn.name }}</u>\n                                {{ locationParameterName }}\n                                is identical in each pair of populations\n                            </td>\n                            <th class=\"stats-table__head\"></th>\n                            <td class=\"stats-table__cell\"></td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div class=\"card-layout__section\">\n            <div class=\"card-layout__title\">P-values table</div>\n            <div class=\"card-layout__content\">\n                <table class=\"stats-table\">\n                    <tbody class=\"stats-table__body\">\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head stats-table__head--colored\"></th>\n                            <th class=\"stats-table__head\">Count</th>\n                            <th class=\"stats-table__head\"></th>\n                            <th\n                                class=\"stats-table__head\"\n                                *ngFor=\"let colGroup of results.groups; let colIdx = index;\"\n                            >\n                                {{ colGroup.filter | filterName }}\n                            </th>\n                        </tr>\n                        <tr\n                            class=\"stats-table__row\"\n                            *ngFor=\"let rowGroup of results.groups; let rowIdx = index;\"\n                        >\n                            <th class=\"stats-table__head stats-table__head--colored\">{{ rowGroup.filter | filterName }}</th>\n                            <td class=\"stats-table__cell stats-table__cell--left\">{{ rowGroup.boxPlot.countComplete }}</td>\n                            <td class=\"boxplot-cell stats-table__cell\">\n                                <lazy-render\n                                    [visibleTemplate]=\"visibleBoxPlot\"\n                                    [trackData]=\"boxPlotsOptions\"\n                                >\n                                    <ng-template #visibleBoxPlot>\n                                        <div\n                                            echarts\n                                            *ngIf=\"boxPlotsOptions && boxPlotsOptions[rowIdx]\"\n                                            [options]=\"boxPlotsOptions[rowIdx]\"\n                                        >\n                                        </div>\n                                    </ng-template>\n                                </lazy-render>\n                            </td>\n\n                            <ng-container *ngFor=\"let colGroup of results.groups; let colIdx = index\">\n                                <td\n                                    *ngIf=\"rowIdx > colIdx; else blankCell\"\n                                    class=\"stats-table__cell stats-table__cell--left\"\n                                >\n                                    <colored-pvalue\n                                        [pvalue]=\"results.pvalues[getFlattenedIndex(colIdx, rowIdx)]\"\n                                        [significanceLevel]=\"1 - params.confidenceLevel\"\n                                    ></colored-pvalue>\n                                </td>\n                                <ng-template #blankCell>\n                                    <td class=\"stats-table__cell stats-table__cell--left\">-</td>\n                                </ng-template>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChange, SimpleChanges } from '@angular/core';\nimport { PairwiseTTestCard, PairwiseMoodTestCard } from 'src/generated-sources';\nimport { ChangeDetectionStrategy } from '@angular/core';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\nimport { EChartOption } from 'echarts';\nimport _ from 'lodash';\nimport { encodeHTML } from 'entities';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\ntype SupportedCard =\n    PairwiseTTestCard\n    | PairwiseMoodTestCard;\n\ntype SupportedCardResult =\n    PairwiseTTestCard.PairwiseTTestCardResult\n    | PairwiseMoodTestCard.PairwiseMoodTestCardResult;\n\n@Component({\n    selector: 'generic-pairwise-test-card-body',\n    templateUrl: './generic-pairwise-test-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/test-conclusion.less',\n        '../../../../shared-styles/stats-table.less',\n        '../../../../shared-styles/card-layout.less',\n        './generic-pairwise-test-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class GenericPairwiseTestCardBodyComponent implements OnChanges {\n    @Input() results: SupportedCardResult;\n    @Input() params: SupportedCard;\n    @Output() action = new EventEmitter<CardAction>();\n\n    boxPlotsOptions?: EChartOption[];\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.refreshBoxPlots();\n        }\n    }\n\n    get locationParameterName() {\n        switch (this.params.type) {\n            case 'pairwise_ttest':\n                return 'mean';\n            case 'pairwise_mood':\n                return 'median';\n        }\n    }\n\n    refreshBoxPlots() {\n        const boxPlots = this.results.groups\n            .filter(group => group.boxPlot)\n            .map(group => group.boxPlot);\n        const minVal = _.min(boxPlots.map(boxPlot => boxPlot.min)) || 0;\n        const maxVal = _.max(boxPlots.map(boxPlot => boxPlot.max)) || 0;\n\n        this.boxPlotsOptions = this.results.groups.map((group) => ({\n            grid: { left: 0, top: 0, right: 0, bottom: 0 },\n            yAxis: {\n                type: 'category',\n                show: false\n            },\n            animation: false,\n            tooltip: {\n                confine: true,\n                trigger: 'item',\n                axisPointer: {\n                    type: 'shadow'\n                }\n            },\n            xAxis: {\n                min: minVal,\n                max: maxVal,\n                type: 'value',\n                show: false\n            },\n            series: group.boxPlot ? [\n                {\n                    name: 'boxplot',\n                    type: 'boxplot',\n                    tooltip: {\n                        formatter: (param: { dataIndex: number, data: number[] }) => {\n                            return encodeHTML(this.params.yColumn.name)\n                                + ':<br>' + [\n                                    '&bull; 1st percentile: ' + encodeHTML(smarterNumber(param.data[1])),\n                                    '&bull; 1st quartile: ' + encodeHTML(smarterNumber(param.data[2])),\n                                    '&bull; Median: ' + encodeHTML(smarterNumber(param.data[3])),\n                                    '&bull; 3rd quartile: ' + encodeHTML(smarterNumber(param.data[4])),\n                                    '&bull; 99th percentile: ' + encodeHTML(smarterNumber(param.data[5]))\n                                ].join('<br/>');\n                        }\n                    },\n                    data: [[\n                        group.boxPlot.pc01 || 0,\n                        group.boxPlot.pc25 || 0,\n                        group.boxPlot.median || 0,\n                        group.boxPlot.pc75 || 0,\n                        group.boxPlot.pc99 || 0\n                    ]],\n                    itemStyle: {\n                        borderColor: '#888888',\n                        borderWidth: 1\n                    }\n                }\n            ] : []\n        }));\n    }\n\n    getFlattenedIndex(colIdx: number, rowIdx: number) {\n        const nbGroups = this.results.groups.length;\n        return (nbGroups * (nbGroups - 1) / 2)\n            - (nbGroups - colIdx) * ((nbGroups - colIdx) - 1) / 2\n            + rowIdx - colIdx - 1;\n    }\n}\n","<ng-container *ngIf=\"results.reason === 'NOT_COMPUTED'\">\n    <span class=\"dku-loader icon-spin card-spinner\" [class.m8]=\"params.type === 'univariate_header' || params.type === 'bivariate_header'\"></span>\n</ng-container>\n\n<ng-container *ngIf=\"results.reason === 'FAILURE'\">\n    <div class=\"alert alert-danger\">\n        <i class=\"icon-warning-sign\"></i>\n        {{ results.message }}\n    </div>\n</ng-container>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Card, CardResult } from 'src/generated-sources';\n\n@Component({\n    selector: 'unavailable-card-body',\n    templateUrl: './unavailable-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-spinner.less',\n        './unavailable-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UnavailableCardBodyComponent {\n    @Input() params: Card;\n    @Input() results: CardResult.UnavailableCardResult;\n}\n","<div class=\"card-layout\">\n    <div class=\"card-layout__section card-layout__section--vertical\">\n        <div class=\"card-layout__section card-layout__section--horizontal\">\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Eigenvalues</div>\n                <div class=\"card-layout__content\">\n                    <lazy-render\n                        class=\"variance-chart\"\n                        [visibleTemplate]=\"visibleVariance\"\n                    >\n                        <ng-template #visibleVariance>\n                            <div\n                                echarts\n                                [options]=\"varianceChartOptions\"\n                            ></div>\n                        </ng-template>\n                    </lazy-render>\n\n                </div>\n            </div>\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Projection on the first two principal components</div>\n                <div class=\"card-layout__content\">\n                    <lazy-render\n                        class=\"scatter-chart\"\n                        [visibleTemplate]=\"visibleScatterPlot\"\n                    >\n                        <ng-template #visibleScatterPlot>\n                            <div\n                                echarts\n                                [options]=\"scatterPlotChartOptions\"\n                            ></div>\n                        </ng-template>\n                    </lazy-render>\n\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-layout__section\">\n        <div class=\"card-layout__title\">\n            Principal components <ng-container *ngIf=\"params.heatmapParams.filterVariablesWithoutValues\">(hiding variables with no value)</ng-container>\n            <button\n                *ngIf=\"!readOnly\"\n                class=\"btn btn--icon menu-button pull-right\"\n                [matMenuTriggerFor]=\"contextualMenu\"\n            >\n                <i class=\"icon-dku-ellipsis-vertical\"></i>\n            </button>\n\n            <mat-menu #contextualMenu>\n                <button\n                    mat-menu-item\n                    (click)=\"configureVisualization()\"\n                >\n                    Configure heatmap...\n                </button>\n            </mat-menu>\n        </div>\n        <div class=\"card-layout__content\">\n            <heatmap\n                [xLabels]=\"heatmapEVLabels\"\n                [yLabels]=\"heatmapColumnLabels\"\n                [data]=\"heatmapData\"\n                [readOnly]=\"readOnly\"\n                [heatmapParams]=\"params.heatmapParams\"\n            ></heatmap>\n        </div>\n    </div>\n</div>\n","import { Component, Input, EventEmitter, Output, SimpleChanges, ChangeDetectionStrategy, OnChanges, ViewContainerRef } from '@angular/core';\nimport { PCACard, isPCACard, Card } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport _ from 'lodash';\nimport { CardAction, CardActionType } from '@features/eda/worksheet/cards/events';\nimport { ColorsService } from '@shared/graphics/colors.service';\nimport { HeatmapConfigComponent } from '../../config/heatmap-config/heatmap-config.component';\nimport { ModalShape, ModalsService } from '@shared/modals/modals.service';\nimport { encodeHTML } from 'entities';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\nimport { filterName } from '@features/eda/pipes/filter-name.pipe';\n\n@Component({\n    selector: 'pca-card-body',\n    templateUrl: './pca-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/card-layout.less',\n        './pca-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PCACardBodyComponent implements OnChanges {\n    @Input() params: PCACard;\n    @Input() results: PCACard.PCACardResult;\n    @Input() readOnly: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    varianceChartOptions: EChartOption | undefined;\n    scatterPlotChartOptions: EChartOption | undefined;\n\n    heatmapColumnLabels: string[] | undefined;\n    heatmapEVLabels: string[] | undefined;\n    heatmapData: number[][] | undefined;\n\n    constructor(private colorsService: ColorsService, private modalsService: ModalsService,\n                private viewContainerRef: ViewContainerRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.buildVarianceChartOptions(this.results);\n            this.buildScatterPlotChartOptions(this.results);\n            this.buildHeatmapChartOptions(this.results);\n        }\n    }\n\n    buildVarianceChartOptions(results: PCACard.PCACardResult): void {\n        if (!results.explainedVarianceRatio) {\n            this.varianceChartOptions = undefined;\n            return;\n        }\n        const varianceLabels: string[] = results.explainedVarianceRatio.map((v, i) => 'PC' + (i + 1));\n        const varianceRatios: number[] = results.explainedVarianceRatio;\n\n        const cumulativeSum = (sum => (value: number) => sum += value)(0);\n        const cumsumVarianceRatios = varianceRatios.map(cumulativeSum);\n\n        this.varianceChartOptions = {\n            grid:\n            {\n                left: '4%',\n                top: '3%',\n                right: '3%',\n                bottom: '3%',\n                containLabel: true\n            },\n            tooltip: {\n                trigger: 'item',\n                confine: true,\n                axisPointer: { type: 'none' },\n                formatter: (params: any) => {\n                    if (params.seriesIndex === 1) {\n                        return encodeHTML(`${params.value.toFixed(2)}`);\n                    } else {\n                        return '';\n                    }\n                }\n            },\n            xAxis: [{\n                type: 'value',\n                axisLabel: { color: '#999999' },\n                axisTick: { show: false },\n                axisLine: { show: false },\n                show: false\n            },\n            {\n                type: 'value',\n                position: 'bottom',\n                name: 'Explained variance ratio',\n                nameLocation: 'middle',\n                nameTextStyle: {\n                    color: '#999999'\n                },\n                nameGap: 30,\n                min: 0,\n                max: 100,\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { color: '#ff0000' }\n            }],\n            yAxis: [{\n                type: 'category',\n                name: 'Eigenvalues',\n                nameLocation: 'middle',\n                nameTextStyle: {\n                    color: '#999999'\n                },\n                nameGap: 40,\n                data: varianceLabels.slice().reverse(),\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { color: '#999999' }\n            }],\n            series: [\n                {\n                    type: 'bar',\n                    itemStyle: {\n                        normal: { color: '#c4dffe' },\n                        emphasis: { color: '#2d92cc' }\n                    },\n                    data: results.explainedVariance.slice().reverse(),\n                    tooltip: {\n                        formatter: (v: { name: string, value: number }) =>\n                            '<b>' + encodeHTML(v.name) + '</b><br>'\n                            + 'Eigenvalue: <b>' + encodeHTML(smarterNumber(v.value)) + '</b>'\n                    }\n                },\n                {\n                    type: 'line',\n                    itemStyle: {\n                        normal: { color: '#cc0000' },\n                    },\n                    tooltip: {\n                        formatter: (v: { name: string, value: number }) =>\n                            '<b>' + encodeHTML(v.name) + '</b><br>'\n                            + 'Explained variance ratio: <b>'\n                            + encodeHTML(smarterNumber(v.value) || '')\n                            + '%</b> (cumulative)'\n                    },\n                    data: cumsumVarianceRatios.slice().reverse().map(v => v * 100.),\n                    xAxisIndex: 1,\n                    markLine: {\n                        lineStyle: {\n                            color: '#ff0000',\n                            width: 1,\n                            type: 'solid'\n                        },\n                        symbol: 'none',\n                        data: [\n                            {\n                                name: 'Horizontal line with Y value at 0.9',\n                                xAxis: 90\n                            } as any,\n                        ],\n                        label: {\n                            position: 'start'\n                        }\n                    }\n                }\n            ],\n            animation: false,\n        };\n    }\n\n    buildScatterPlotChartOptions(result: PCACard.PCACardResult): void {\n        if (!result.projections) {\n            this.scatterPlotChartOptions = undefined;\n            return;\n        }\n        const scatterSeries = result.projections.map( (curProj, i): EChartOption.SeriesScatter => {\n            return {\n                name: filterName(result.groups[i]),\n                type: 'scatter',\n                symbolSize: 4,\n                itemStyle: {\n                    opacity: 0.5,\n                    color: this.colorsService.getColorFromIndex(i),\n                },\n                data: _.zip(curProj[0], curProj[1]),\n                large: true\n            };\n        });\n        this.scatterPlotChartOptions = {\n            tooltip: {\n                trigger: 'none',\n                axisPointer: { type: 'cross' }\n            },\n            legend: {\n                textStyle: {\n                    color: '#333',\n                    fontSize: 13\n                },\n                type: 'scroll',\n                padding: [0, 0, 15, 0]\n            },\n            grid:\n            {\n                left: '0%',\n                top: this.params.groupBy ? '20%' : '15%',\n                right: '15%',\n                bottom: '0%',\n                containLabel: true\n            },\n            xAxis: { name: 'PC1'},\n            yAxis: { name: 'PC2'},\n            series: scatterSeries,\n            animation: false\n        };\n    }\n\n    buildHeatmapChartOptions(result: PCACard.PCACardResult): void {\n        this.heatmapData = result.components.map(\n            (curComponent) => curComponent.map( (cc) => cc )\n        );\n        this.heatmapEVLabels = result.components.map( (_, i) => 'PC' + (i+1));\n        this.heatmapColumnLabels = this.params.columns.map(c => c.name);\n    }\n\n    configureVisualization() {\n        if (isPCACard(this.params)) {\n            this.modalsService.open(HeatmapConfigComponent, { params: this.params.heatmapParams },\n                ModalShape.NARROW, this.viewContainerRef)\n                .then((heatmapParams) => {\n                    // these second typeguards are imposed by TS.\n                    if (isPCACard(this.params)) {\n                        const card: PCACard = _.cloneDeep(this.params);\n                        card.heatmapParams = heatmapParams;\n                        this.updateCard(card);\n                    }\n                }, () => { });\n        }\n\n    }\n\n    updateCard(card: Card) {\n        this.action.emit({ type: CardActionType.UPDATE, newParams: card });\n    }\n}\n","<table\n    class=\"fit-table\"\n    *ngIf=\"!isTopLevel\"\n>\n    <tbody class=\"fit-table__body\">\n        <tr class=\"fit-table__row\">\n            <th class=\"fit-table__title\">{{ params.xColumn.name }}</th>\n            <th class=\"text-left fit-table__title\">{{ params.yColumn.name }}</th>\n            <th>Count</th>\n        </tr>\n        <tr\n            *ngFor=\"let x of results.table.xValues; let i = index; trackBy: trackByIndex\"\n            class=\"fit-table__row\"\n        >\n            <th class=\"fit-table__head\">{{ x | filterName }}</th>\n            <td colspan=\"2\">\n                <table class=\"stats-table\">\n                    <tbody>\n                        <tr\n                            class=\"stats-table__row\"\n                            *ngFor=\"let y of results.table.yValues; let j = index;\"\n                        >\n                            <th class=\"stats-table__head\">{{ y | filterName }}</th>\n                            <td class=\"stats-table__cell\">\n                                {{ results.table.counts[results.table.yValues.length * i + j] }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<table\n    class=\"stats-table\"\n    *ngIf=\"isTopLevel\"\n>\n    <tbody class=\"stats-table__body\">\n        <tr class=\"stats-table__row\">\n            <th></th>\n            <th\n                class=\"stats-table__head stats-table__head--colored\"\n                *ngFor=\"let x of results.table.xValues;\"\n            >\n                {{ x | filterName }}\n            </th>\n            <th class=\"stats-table__title\">Totals</th>\n        </tr>\n        <tr\n            *ngFor=\"let y of results.table.yValues; let j = index;\"\n            class=\"stats-table__row\"\n        >\n            <th class=\"stats-table__head stats-table__head--colored\">{{ y | filterName }}</th>\n            <td\n                class=\"stats-table__cell stats-table__cell--left\"\n                *ngFor=\"let x of results.table.xValues; let i = index;\"\n            >\n                {{ results.table.counts[results.table.yValues.length * i + j] }}\n            </td>\n            <td class=\"stats-table__cell stats-table__cell--left\">{{ results.table.yCounts[j] }}</td>\n        </tr>\n        <tr class=\"stats-table__row\">\n            <th class=\"stats-table__title stats-table__title--colored\">Totals</th>\n            <td\n                class=\"stats-table__cell stats-table__cell--left\"\n                *ngFor=\"let x of results.table.xValues; let i = index;\"\n            >\n                {{ results.table.xCounts[i] }}\n            </td>\n            <td class=\"stats-table__cell stats-table__cell--left\">{{ results.table.total }}</td>\n        </tr>\n    </tbody>\n</table>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { BivariateFrequencyTableCard } from 'src/generated-sources';\n\n\n@Component({\n    selector: 'bivariate-frequency-table-card-body',\n    templateUrl: './bivariate-frequency-table-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/stats-table.less',\n        '../../../../shared-styles/fit-table.less',\n        './bivariate-frequency-table-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BivariateFrequencyTableCardBodyComponent {\n    @Input() params: BivariateFrequencyTableCard;\n    @Input() results: BivariateFrequencyTableCard.BivariateFrequencyTableCardResult;\n    @Input() isTopLevel = false;\n\n    trackByIndex(index: number) {\n        return index;\n    }\n}\n","import { Component, Input, ChangeDetectionStrategy, EventEmitter, Output, SimpleChanges, OnChanges } from '@angular/core';\nimport { BivariateBoxPlotCard, Variable } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\nimport { isDefined } from '@utils/objects';\nimport { encodeHTML } from 'entities';\nimport { FilterNamePipe } from '@features/eda/pipes/filter-name.pipe';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\nconst filterNamePipe = new FilterNamePipe();\n\n@Component({\n    selector: 'bivariate-box-plot-card-body',\n    templateUrl: './bivariate-box-plot-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/chart.less',\n        './bivariate-box-plot-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BivariateBoxPlotCardBodyComponent implements OnChanges {\n    @Input() params: BivariateBoxPlotCard;\n    @Input() results: BivariateBoxPlotCard.BivariateBoxPlotCardResult;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    options: EChartOption | undefined;\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.options = this.buildChartOptions();\n        }\n    }\n\n    buildChartOptions(): EChartOption | undefined {\n        if (!this.results || !this.results.boxPlots) {\n            return undefined;\n        }\n        let maxVal: number = Number.MIN_SAFE_INTEGER;\n        let minVal: number = Number.MAX_SAFE_INTEGER;\n\n        const drawableBoxPlots = this.results.boxPlots.map(\n            (curBoxPlot, i) => {\n                if (!isDefined(curBoxPlot.max) || !isDefined(curBoxPlot.min) || !isDefined(curBoxPlot.pc01)\n                    || !isDefined(curBoxPlot.pc25) || !isDefined(curBoxPlot.median) || !isDefined(curBoxPlot.pc75)\n                    || !isDefined(curBoxPlot.pc99)) {\n                    return undefined;\n                }\n                if (curBoxPlot.max != null) {\n                    maxVal = Math.max(maxVal, curBoxPlot.max);\n                }\n                if (curBoxPlot.min != null) {\n                    minVal = Math.min(minVal, curBoxPlot.min);\n                }\n                return curBoxPlot;\n            }\n        );\n\n        const data: EChartOption.Series[] = [];\n        const isVertical = this.params.yColumn.type !== Variable.Type.CATEGORICAL;\n        let labels: (string | null | undefined)[] = [];\n\n        if (drawableBoxPlots && this.results.axisVals) {\n            labels = this.results.axisVals.map(value => filterNamePipe.transform(value));\n\n            drawableBoxPlots.forEach((boxPlot, i) => {\n                if (boxPlot) {\n                    data.push([\n                        boxPlot.pc01,\n                        boxPlot.pc25,\n                        boxPlot.median,\n                        boxPlot.pc75,\n                        boxPlot.pc99\n                    ]);\n                } else {\n                    data.push({});\n                }\n            });\n        }\n\n        // categorical or binned numerical axis\n        const catAxis = [{\n            type: 'category',\n            data: labels,\n            axisTick: { show: true },\n            axisLine: { show: true },\n            axisLabel: {\n                color: '#999999'\n            }\n        }];\n\n        const numAxis = [{\n            type: 'value',\n            min: smarterNumber(minVal),\n            max: smarterNumber(maxVal),\n            axisTick: { show: true },\n            axisLine: { show: true },\n            axisLabel: {\n                color: '#999999',\n                formatter: (value: number) => {\n                    let stringRepr = '' + value;\n                    if (stringRepr.length > 6) {\n                        stringRepr = value.toPrecision(5);\n                    }\n                    return stringRepr;\n                }\n            }\n        }];\n\n        return {\n            color: ['#3398DB'],\n            animation: false,\n            tooltip: {\n                confine: true,\n                trigger: 'item',\n                axisPointer: {\n                    type: 'shadow'\n                }\n            },\n            grid: { left: 10, top: 10, right: 10, bottom: 10, containLabel: true },\n            xAxis: (isVertical ? catAxis : numAxis) as EChartOption.XAxis[],\n            yAxis: (isVertical ? numAxis : catAxis) as EChartOption.YAxis[],\n            series: [{\n                type: 'boxplot',\n                tooltip: {\n                    formatter: (param: { dataIndex: number, data: number[] }) => {\n                        return encodeHTML(this.results.axisVariable.name) + ': <b>'\n                            + encodeHTML(labels[param.dataIndex] || '')\n                            + '</b><br>'\n                            + encodeHTML(this.results.aggregatedVariable.name) + ': <br>'\n                            + [\n                                '&bull; 1st percentile: ' + encodeHTML(smarterNumber(param.data[1])),\n                                '&bull; 1st quartile: ' + encodeHTML(smarterNumber(param.data[2])),\n                                '&bull; Median: ' + encodeHTML(smarterNumber(param.data[3])),\n                                '&bull; 3rd quartile: ' + encodeHTML(smarterNumber(param.data[4])),\n                                '&bull; 99th percentile: ' + encodeHTML(smarterNumber(param.data[5]))\n                            ].join('<br/>');\n                    }\n                },\n                data\n            } as EChartOption.Series]\n        };\n    }\n}\n","<lazy-echart class=\"chart\" [class.chart--fixed-height]=\"hasFixedHeight\"\n    [options]=\"options\"\n></lazy-echart>","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { MosaicPlotCard } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport { ColorsService } from '@shared/graphics/colors.service';\nimport { CardActionType, CardAction } from '@features/eda/worksheet/cards/events';\nimport { filterName } from '@features/eda/pipes/filter-name.pipe';\nimport { encodeHTML } from 'entities';\nimport d3 from 'd3';\nimport { PatternsService } from '@shared/graphics/patterns.service';\n\n// Only draw a label if it is large enough\nconst MIN_DISPLAY_PERCENT_X = 0.15;\nconst MIN_DISPLAY_PERCENT_Y = 0.05;\n\n@Component({\n    selector: 'mosaic-plot-card-body',\n    templateUrl: './mosaic-plot-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/chart.less',\n        './mosaic-plot-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MosaicPlotCardBodyComponent implements OnChanges {\n    @Input() results: MosaicPlotCard.MosaicPlotCardResult;\n    @Input() params: MosaicPlotCard;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    chartOptions: EChartOption;\n\n    constructor(\n        private colorsService: ColorsService,\n        private patternsService: PatternsService\n    ) { }\n\n    updateNBins(value: number) {\n        const newParams = {\n            ...this.params,\n            maxValues: value\n        };\n\n        this.action.emit({ type: CardActionType.UPDATE, newParams });\n    }\n\n    chartClicked(event: any) {\n        if (event.componentType === 'series'\n            && event.componentSubType === 'custom') {\n            let flatIndex: number = event.dataIndex;\n            if (this.results.mosaic.highlightedYPercentages) {\n                // Because we have 2 values per tile (highlighted & all)\n                flatIndex = Math.floor(flatIndex / 2);\n            }\n            const yCount = this.results.mosaic.yVals.length;\n            const yIndex = flatIndex % yCount;\n            const xIndex = Math.floor(flatIndex / yCount);\n            let xFilter = this.results.mosaic.xVals[xIndex];\n            xFilter = { ...xFilter, name: this.params.xColumn.name + ': ' + filterName(xFilter) };\n            let yFilter = this.results.mosaic.yVals[yIndex];\n            yFilter = { ...yFilter, name: this.params.yColumn.name + ': ' + filterName(yFilter) };\n\n            this.action.emit({\n                type: CardActionType.HIGHLIGHT,\n                filter: { type: 'and', filters: [xFilter, yFilter] }\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.chartOptions = this.results && this.buildChartOptions(this.results);\n        }\n    }\n\n    buildChartOptions(results: MosaicPlotCard.MosaicPlotCardResult): EChartOption {\n        const data: EChartOption.SeriesCustom.DataObject[] = [];\n        const xTickData: any[] = [];\n        const yTickData: any[] = [];\n        const mosaic = results.mosaic;\n        const xPercentages = mosaic.xPercentages;\n        const yPercentages = mosaic.yPercentages;\n        const xVals = mosaic.xVals;\n        const xLabels = xVals.map(filter => filterName(filter));\n        const yVals = mosaic.yVals;\n        const yLabels = yVals.map(filter => filterName(filter));\n        const xCount = xPercentages.length;\n        const yCount = yPercentages.length / xPercentages.length;\n        let xOffset = 0;\n        let yOffset = 0;\n\n        // data contains an array of array of counts.\n        // the first element in data is an array containing\n        // all the first yBin count of each xBin\n        for (let i = 0; i < xCount; i++) {\n            const x = xPercentages[i];\n            for (let j = 0; j < yCount; j++) {\n                const flatIndex = yCount * i + j;\n                const y = yPercentages[flatIndex];\n                const count = mosaic.counts[flatIndex];\n\n                // use a mark line to show axis label in right position\n                if (i === 0 && y > MIN_DISPLAY_PERCENT_Y) {\n                    yTickData.push({\n                        yAxis: (yOffset * 2 + y) / 2,\n                        lineStyle: {\n                            opacity: 0\n                        },\n                        label: {\n                            show: true,\n                            position: 'start',\n                            formatter: () => yLabels[j],\n                            color: '#333',\n                        }\n                    });\n                }\n\n                yOffset += y;\n\n                const itemColor = this.colorsService.getColorForVariable(yLabels[j]);\n                const borderColor = d3.rgb(itemColor).darker(2).toString();\n\n                if (mosaic.highlightedYPercentages) {\n                    const stripedPattern = this.patternsService.getStripePattern(borderColor, itemColor);\n                    const highlightedY = mosaic.highlightedYPercentages[flatIndex];\n\n                    data.push({\n                        value: [xOffset, x, yOffset, y - highlightedY, i, j, count],\n                        itemStyle: {\n                            color: itemColor,\n                            borderWidth: 1,\n                            borderColor\n                        },\n                        emphasis: { itemStyle: { color: itemColor } }\n                    });\n\n                    data.push({\n                        value: [xOffset, x, yOffset - y + highlightedY, highlightedY, i, j, count],\n                        itemStyle: {\n                            color: stripedPattern as any, // Bad typings\n                            borderWidth: 1,\n                            borderColor\n                        }\n                    });\n                } else {\n                    data.push({\n                        value: [xOffset, x, yOffset, y, i, j, count],\n                        itemStyle: {\n                            color: itemColor,\n                            borderWidth: 1,\n                            borderColor\n                        },\n                        emphasis: { itemStyle: { color: itemColor } }\n                    });\n                }\n            }\n            // use a mark line to show axis label in right position\n            if (x > MIN_DISPLAY_PERCENT_X) {\n                xTickData.push({\n                    xAxis: (xOffset * 2 + x) / 2,\n                    lineStyle: {\n                        opacity: 0\n                    },\n                    label: {\n                        show: true,\n                        position: 'start',\n                        formatter: () => xLabels[i],\n                        color: '#333'\n                    }\n                });\n            }\n            xOffset += x;\n            yOffset = 0;\n        }\n\n        return {\n            animation: false,\n            tooltip: {\n                confine: true,\n                trigger: 'item',\n                axisPointer: { type: 'none' },\n                formatter: (params: any) => {\n                    const xLabel = xLabels[params.value[4]];\n                    const yLabel = yLabels[params.value[5]];\n                    const count = params.value[6];\n                    const percent = Math.round(1000 * count / mosaic.totalCount) / 10;\n\n                    return `\n                        ${encodeHTML(this.params.xColumn.name)}:\n                        <b>${encodeHTML(xLabel)}</b>\n                        <br>\n                        ${encodeHTML(this.params.yColumn.name)}:\n                        <b>${encodeHTML(yLabel)}</b>\n                        <br>\n                        Count: <b>${encodeHTML('' + count)}</b> (${encodeHTML('' + percent)}%)\n                    `;\n                }\n            },\n            grid: { left: 0, top: 0, right: 0, bottom: 0, containLabel: true },\n            xAxis: [{\n                show: false,\n                min: 0,\n                max: 1,\n                position: 'top'\n            }, { // to get automatic padding on bottom\n                data: xLabels,\n                boundaryGap: false,\n                position: 'bottom',\n                axisTick: {\n                    show: false\n                },\n                axisLine: {\n                    show: false,\n                },\n                axisLabel: {\n                    color: 'rgba(0,0,0,0)'\n                }\n            }],\n            yAxis: [{\n                show: false,\n                min: 0,\n                max: 1,\n                position: 'right'\n            }, { // to get automatic padding on left\n                data: yLabels,\n                boundaryGap: false,\n                position: 'left',\n                axisTick: {\n                    show: false\n                },\n                axisLine: {\n                    show: false,\n                },\n                axisLabel: {\n                    color: 'rgba(0,0,0,0)'\n                }\n            }],\n            series: [{\n                type: 'custom',\n                renderItem: (params: any, api: any) => {\n                    const xStart = api.value(0);\n                    const yStart = api.value(2);\n                    const xSize = api.value(1);\n                    const ySize = api.value(3);\n                    const start = api.coord([xStart, yStart]);\n                    const size = api.size([xSize, ySize]);\n\n                    return {\n                        type: 'rect',\n                        shape: {\n                            x: start[0],\n                            y: start[1],\n                            width: size[0],\n                            height: size[1]\n                        },\n                        style: api.style(),\n                        styleEmphasis: api.styleEmphasis()\n                    };\n                },\n                encode: {\n                    x: [0, 1],\n                    y: [2, 3]\n                },\n                markLine: {\n                    silent: true,\n                    data: [...xTickData, ...yTickData]\n                },\n                data\n            } as EChartOption.Series],\n        };\n    }\n}\n","<lazy-echart\n    class=\"chart\"\n    [options]=\"chartOptions\"\n    [class.chart--fixed-height-tall]=\"hasFixedHeight\"\n    (chartClick)=\"chartClicked($event)\"\n></lazy-echart>\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { ScatterPlotCard } from 'src/generated-sources';\nimport _ from 'lodash';\nimport { EChartOption } from 'echarts';\nimport { CardAction } from '../../events';\nimport { getNumericalChartAxisTicks } from '@features/eda/echarts-utils';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\n@Component({\n    selector: 'scatter-plot-card-body',\n    templateUrl: './scatter-plot-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/chart.less',\n        './scatter-plot-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScatterPlotCardBodyComponent implements OnChanges {\n    @Input() results: ScatterPlotCard.ScatterPlotCardResult;\n    @Input() params: ScatterPlotCard;\n    @Input() hasFixedHeight: boolean;\n    @Output() action = new EventEmitter<CardAction>();\n\n    chartOptions: EChartOption;\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results || changes.params) {\n            this.chartOptions = this.buildChartOptions();\n        }\n    }\n\n    buildChartOptions(): EChartOption {\n        const allX = [...this.results.xSeries, ...(this.results.highlightedXSeries || [])];\n        const allY = [...this.results.ySeries, ...(this.results.highlightedYSeries || [])];\n\n        const minX = Math.floor(_.min(allX) || 0);\n        const maxX = Math.ceil(_.max(allX) || 0);\n        const minY = Math.floor(_.min(allY) || 0);\n        const maxY = Math.ceil(_.max(allY) || 0);\n        const hasHighlight = this.results.highlightedXSeries && this.results.highlightedYSeries;\n\n        const series: EChartOption.SeriesScatter[] = [{\n            type: 'scatter',\n            z: 0,\n            itemStyle: {\n                color: hasHighlight ? '#AAAAAA' : '#1e7efa',\n                opacity: 0.5\n            },\n            symbolSize: this.params.symbolSize,\n            data: _.zip(this.results.xSeries, this.results.ySeries),\n            large: true\n        }];\n\n        if (hasHighlight) {\n            series.push({\n                type: 'scatter',\n                z: 0,\n                itemStyle: { color: '#1e7efa', opacity: 0.5 },\n                symbolSize: this.params.symbolSize,\n                data: _.zip(this.results.highlightedXSeries, this.results.highlightedYSeries),\n                large: true\n            });\n        }\n\n        const splitXAxis = 5;\n        const ticks: number[] = getNumericalChartAxisTicks(splitXAxis, minX, maxX);\n        const maxTickLen: number = Math.max(...ticks.map(v => ('' + v).length));\n        let rotate = 0;\n        if (maxTickLen > 4) {\n            rotate = 45;\n        }\n\n        return {\n            animation: false,\n            tooltip: {\n                trigger: 'none',\n                axisPointer: { type: 'cross' }\n            },\n            grid: { left: 0, top: 10, right: 0, bottom: 0, containLabel: true },\n            xAxis: [{\n                type: 'value',\n                min: minX,\n                max: maxX,\n                axisTick: { show: true },\n                axisLine: { show: true },\n                axisLabel: {\n                    color: '#999999', rotate,\n                    formatter: (value: number) => value === minX || value === maxX ? '' : value\n                },\n                axisPointer: {\n                    label: {\n                        formatter: ({ value }: { value: number }) => {\n                            return this.params.xColumn.name + ': ' + smarterNumber(value);\n                        }\n                    }\n                }\n            }],\n            yAxis: {\n                type: 'value',\n                min: minY,\n                max: maxY,\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: {\n                    color: '#999999',\n                    formatter: (value: number) => value === minY || value === maxY ? '' : value\n                },\n                axisPointer: {\n                    label: {\n                        formatter: ({ value }: { value: number }) => {\n                            return this.params.yColumn.name + ': ' + smarterNumber(value);\n                        }\n                    }\n                }\n            },\n            series\n        };\n    }\n}\n","<lazy-echart class=\"chart\" [class.chart--fixed-height]=\"hasFixedHeight\"\n    [options]=\"chartOptions\">\n</lazy-echart>\n","<div class=\"card-layout\">\n    <div class=\"card-layout__section card-layout__section--horizontal\">\n        <div class=\"card-layout__section\">\n            <div class=\"card-layout__title\">Samples</div>\n            <div class=\"card-layout__content\">\n                <table class=\"stats-table\">\n                    <tbody class=\"stats-table__body\">\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__title\">{{params.yColumn.name}}</th>\n                            <th class=\"stats-table__title\"></th>\n                            <th class=\"stats-table__title\">Count</th>\n                            <th\n                                class=\"stats-table__title\"\n                                *ngIf=\"isMeanRelevant\"\n                            >\n                                Mean\n                            </th>\n                            <th\n                                class=\"stats-table__head\"\n                                *ngIf=\"isMedianRelevant\"\n                            >\n                                Median\n                            </th>\n                        </tr>\n                        <tr\n                            class=\"stats-table__row\"\n                            *ngFor=\"let rowGroup of results.groups; let rowIdx = index;\"\n                        >\n                            <th class=\"stats-table__head\">{{ rowGroup.filter | filterName }}</th>\n                            <td class=\"stats-table__cell boxplot-cell\">\n                                <lazy-render\n                                    [visibleTemplate]=\"visibleBoxPlot\"\n                                    [trackData]=\"boxPlotsOptions\"\n                                >\n                                    <ng-template #visibleBoxPlot>\n                                        <div\n                                            echarts\n                                            *ngIf=\"boxPlotsOptions && boxPlotsOptions[rowIdx]\"\n                                            [options]=\"boxPlotsOptions[rowIdx]\"\n                                        >\n                                        </div>\n                                    </ng-template>\n                                </lazy-render>\n                            </td>\n                            <td class=\"stats-table__cell stats-table__cell--left\">{{ rowGroup.boxPlot.countComplete }}</td>\n                            <td\n                                class=\"stats-table__cell stats-table__cell--left\"\n                                *ngIf=\"isMeanRelevant\"\n                            >\n                                {{ rowGroup.boxPlot.mean | smarterNumber }}\n                            </td>\n                            <td\n                                class=\"stats-table__cell stats-table__cell--left\"\n                                *ngIf=\"isMedianRelevant\"\n                            >\n                                {{ rowGroup.boxPlot.median | smarterNumber }}\n                            </td>\n                        </tr>\n                    </tbody>\n                    <tbody class=\"stats-table__body\">\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">Total</th>\n                            <td class=\"stats-table__cell boxplot-cell\">\n                                <lazy-render\n                                    [visibleTemplate]=\"visibleGlobalBoxPlot\"\n                                    [trackData]=\"globalBoxPlotOptions\"\n                                >\n                                    <ng-template #visibleGlobalBoxPlot>\n                                        <div\n                                            echarts\n                                            *ngIf=\"globalBoxPlotOptions\"\n                                            [options]=\"globalBoxPlotOptions\"\n                                        >\n                                        </div>\n                                    </ng-template>\n                                </lazy-render>\n                            </td>\n                            <td class=\"stats-table__cell stats-table__cell--left\">{{ results.allGroups.boxPlot.countComplete }}</td>\n                            <td\n                                class=\"stats-table__cell stats-table__cell--left\"\n                                *ngIf=\"isMeanRelevant\"\n                            >\n                                {{ results.allGroups.boxPlot.mean | smarterNumber }}\n                            </td>\n                            <td\n                                class=\"stats-table__cell stats-table__cell--left\"\n                                *ngIf=\"isMedianRelevant\"\n                            >\n                                {{ results.allGroups.boxPlot.median | smarterNumber }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n\n        <div class=\"card-layout__section card-layout__section--vertical\">\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Hypothesis</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Tested hypothesis</th>\n                                <td class=\"stats-table__cell\">\n                                    <u>{{ params.xColumn.name }}</u>\n                                    {{ locationParameterName }}s\n                                    are identical in {{ hasTwoSamples ? 'both' : 'all' }} populations\n                                </td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Significance level</th>\n                                <td class=\"stats-table__cell\">\n                                    {{ 1 - params.confidenceLevel | smarterNumber }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Results</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">{{ testStatisticName }}</th>\n                                <td class=\"stats-table__cell\">{{ results.statistic | smarterNumber }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">𝘱-value</th>\n                                <td class=\"stats-table__cell\">\n                                    <colored-pvalue\n                                        [pvalue]=\"results.pvalue\"\n                                        [significanceLevel]=\"1 - params.confidenceLevel\"\n                                    ></colored-pvalue>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n<div class=\"test-conclusion\">\n    <ng-container *ngIf=\"isRejected else inconclusive\">\n        <p class=\"test-conclusion__wording test-conclusion__wording--rejected\">\n            The {{ locationParameterName }} of\n            <u>{{ params.xColumn.name }}</u>\n            is not the same among {{ hasTwoSamples ? 'both' : 'all' }} populations\n        </p>\n    </ng-container>\n\n    <ng-template #inconclusive>\n        <p class=\"test-conclusion__wording\">\n            The test is inconclusive about whether the\n            {{ locationParameterName }} of\n            <u>{{ params.xColumn.name }}</u>\n            is not the same among {{ hasTwoSamples ? 'both' : 'all' }} populations\n        </p>\n    </ng-template>\n</div>\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\nimport { MoodTestNSampCard, OneWayANOVACard, MoodTest2SampCard, TTest2SampCard, BoxPlotFragment, AbstractNSampTestCard, isAbstract2SampTestCard } from 'src/generated-sources';\nimport { CardAction } from '@features/eda/worksheet/cards/events';\nimport { EChartOption } from 'echarts';\nimport _ from 'lodash';\nimport { encodeHTML } from 'entities';\nimport { smarterNumber } from '@shared/pipes/number-pipes/smarter-number.pipe';\n\ntype SupportedCard =\n    MoodTestNSampCard\n    | OneWayANOVACard\n    | MoodTest2SampCard\n    | TTest2SampCard;\n\ntype SupportedCardResult =\n    MoodTestNSampCard.MoodTestNSampCardResult\n    | OneWayANOVACard.OneWayANOVACardResult\n    | MoodTest2SampCard.MoodTest2SampCardResult\n    | TTest2SampCard.TTest2SampCardResult;\n\n@Component({\n    selector: 'generic-nsamp-test-card-body',\n    templateUrl: './generic-nsamp-test-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/test-conclusion.less',\n        '../../../../shared-styles/stats-table.less',\n        '../../../../shared-styles/card-layout.less',\n        './generic-nsamp-test-card-body.component.less'\n    ]\n})\nexport class GenericNSampTestCardBodyComponent implements OnChanges {\n    @Input() results: SupportedCardResult;\n    @Input() params: SupportedCard;\n    @Output() action = new EventEmitter<CardAction>();\n\n    boxPlotsOptions?: EChartOption[];\n    globalBoxPlotOptions?: EChartOption;\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.refreshBoxPlots();\n        }\n    }\n\n    get isRejected() {\n        return this.results.pvalue <= (1 - this.params.confidenceLevel);\n    }\n\n    get isMedianRelevant() {\n        return this.locationParameterName === 'median';\n    }\n\n    get isMeanRelevant() {\n        return this.locationParameterName === 'mean';\n    }\n\n    get locationParameterName() {\n        switch (this.params.type) {\n            case 'oneway_anova':\n            case 'ttest_2samp':\n                return 'mean';\n            case 'mood_nsamp':\n            case 'mood_test_2samp':\n                return 'median';\n        }\n    }\n\n    get hasTwoSamples() {\n        return isAbstract2SampTestCard(this.params);\n    }\n\n    get testStatisticName() {\n        switch (this.params.type) {\n            case 'oneway_anova':\n                return 'F-value';\n            case 'mood_nsamp':\n            case 'mood_test_2samp':\n                return 'Pearson’s chi-square statistic';\n            case 'ttest_2samp':\n                return '𝘵-statistic';\n        }\n    }\n\n    createBoxPlot(boxPlotData: AbstractNSampTestCard.GroupInfo): EChartOption {\n        return {\n            grid: { left: 0, top: 0, right: 0, bottom: 0 },\n            yAxis: {\n                type: 'category',\n                show: false\n            },\n            animation: false,\n            tooltip: {\n                confine: true,\n                trigger: 'item',\n                axisPointer: {\n                    type: 'shadow'\n                }\n            },\n            xAxis: {\n                min: this.results.allGroups.boxPlot.min || 0,\n                max: this.results.allGroups.boxPlot.max || 0,\n                type: 'value',\n                show: false\n            },\n            series: boxPlotData.boxPlot ? [\n                {\n                    name: 'boxplot',\n                    type: 'boxplot',\n                    tooltip: {\n                        formatter: (param: { dataIndex: number, data: number[] }) => {\n                            return encodeHTML(this.params.yColumn.name)\n                                + ':<br>' + [\n                                    '&bull; 1st percentile: ' + encodeHTML(smarterNumber(param.data[1])),\n                                    '&bull; 1st quartile: ' + encodeHTML(smarterNumber(param.data[2])),\n                                    '&bull; Median: ' + encodeHTML(smarterNumber(param.data[3])),\n                                    '&bull; 3rd quartile: ' + encodeHTML(smarterNumber(param.data[4])),\n                                    '&bull; 99th percentile: ' + encodeHTML(smarterNumber(param.data[5]))\n                                ].join('<br/>');\n                        }\n                    },\n                    data: [[\n                        boxPlotData.boxPlot.pc01 || 0,\n                        boxPlotData.boxPlot.pc25 || 0,\n                        boxPlotData.boxPlot.median || 0,\n                        boxPlotData.boxPlot.pc75 || 0,\n                        boxPlotData.boxPlot.pc99 || 0\n                    ]],\n                    itemStyle: {\n                        borderColor: '#888888',\n                        borderWidth: 1\n                    }\n                }\n            ] : []\n        };\n    }\n\n    refreshBoxPlots() {\n        this.boxPlotsOptions = this.results.groups.map((group) => this.createBoxPlot(group));\n        this.globalBoxPlotOptions = this.createBoxPlot(this.results.allGroups);\n    }\n}\n","<div class=\"card-layout\">\n    <div class=\"card-layout__section card-layout__section--horizontal\">\n        <div class=\"card-layout__section\">\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Normal fit</div>\n                <div class=\"card-layout__content density-chart\">\n                    <lazy-echart\n                        [options]=\"densityChartOptions\"\n                    >\n                    </lazy-echart>\n                </div>\n            </div>\n        </div>\n        <div class=\"card-layout__section card-layout__section--vertical\">\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Summary</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Count</th>\n                                <td class=\"stats-table__cell\">{{ results.boxPlot.countComplete | smarterNumber }}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Hypothesis</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Tested hypothesis</th>\n                                <td class=\"stats-table__cell\">\n                                    {{ params.column.name }} is normally distributed\n                                </td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Significance level</th>\n                                <td class=\"stats-table__cell\">\n                                    {{ 1 - params.confidenceLevel | smarterNumber }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Results</div>\n                <div class=\"card-layout__content\">\n\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">W test statistic</th>\n                                <td class=\"stats-table__cell\">{{ results.statistic | smarterNumber }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">𝘱-value</th>\n                                <td class=\"stats-table__cell\">\n                                    <colored-pvalue\n                                        [pvalue]=\"results.pvalue\"\n                                        [significanceLevel]=\"1 - params.confidenceLevel\"\n                                    ></colored-pvalue>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"test-conclusion\">\n    <ng-container *ngIf=\"isRejected else inconclusive\">\n        <p class=\"test-conclusion__wording test-conclusion__wording--rejected\">\n            <u>{{ params.column.name }}</u>\n            is not normally distributed\n        </p>\n    </ng-container>\n\n    <ng-template #inconclusive>\n        <p class=\"test-conclusion__wording\">\n            The test is inconclusive about whether\n            <u>{{ params.column.name }}</u>\n            is not normally distributed\n        </p>\n    </ng-template>\n</div>\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { ShapiroNormalityTestCard, IntervalFilter } from 'src/generated-sources';\nimport { EChartOption } from 'echarts';\nimport * as _ from 'lodash';\n\n@Component({\n    selector: 'shapiro-normality-test-card-body',\n    templateUrl: './shapiro-normality-test-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/test-conclusion.less',\n        '../../../../shared-styles/stats-table.less',\n        '../../../../shared-styles/card-layout.less',\n        './shapiro-normality-test-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShapiroNormalityTestCardBodyComponent implements OnChanges {\n    @Input() params: ShapiroNormalityTestCard;\n    @Input() results: ShapiroNormalityTestCard.ShapiroNormalityTestCardResult;\n    densityChartOptions?: EChartOption;\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.buildDensityChart();\n        }\n    }\n\n    get isRejected() {\n        return this.results.pvalue <= (1 - this.params.confidenceLevel);\n    }\n\n    buildDensityChart() {\n        // Histogram\n        const histogramSeriesData = [];\n        const histogramData = this.results.histogram;\n        const totalCount = _.chain(this.results.histogram.counts).sum().value();\n\n        for (let i = 0; i < histogramData.bins.length; i++) {\n            const bin = histogramData.bins[i] as IntervalFilter;\n            const count = histogramData.counts[i] / (totalCount * (bin.right - bin.left));\n            histogramSeriesData.push([bin.left, bin.right, count]);\n        }\n\n        let maxDensity = _.chain(histogramSeriesData).map(2).max().value();\n        const minVal = _.chain(histogramSeriesData).map(0).min().value();\n        const maxVal = _.chain(histogramSeriesData).map(1).max().value();\n\n        const histogramSeries = {\n            type: 'custom',\n            renderItem: function (params: any, api: any) {\n                const yValue = api.value(2);\n                const start = api.coord([api.value(0), yValue]);\n                const size = api.size([api.value(1) - api.value(0), yValue]);\n\n                return {\n                    type: 'rect',\n                    shape: {\n                        x: start[0],\n                        y: start[1],\n                        width: size[0],\n                        height: size[1]\n                    },\n                    style: api.style(),\n                    emphasisStyle: api.style()\n                };\n            },\n            itemStyle: {\n                normal: { color: '#c4dffe', borderColor: '#c4dffe', borderWidth: 1 }\n            },\n            data: histogramSeriesData\n        } as EChartOption.Series // Cast required because renderItem() typing is not really usable\n\n        // Density of distributions\n        const pdfPlot = this.results.normalPdf;\n        const seriesData = pdfPlot.xvals.map((x, idx) => [x, pdfPlot.probs[idx]]);\n        maxDensity = Math.max(_.chain(seriesData).map(1).max().value(), maxDensity);\n        const pdfSeries: EChartOption.Series = {\n            type: 'line',\n            yAxisIndex: 0,\n            data: seriesData,\n            symbol: 'none'\n        };\n\n        // Build Echart options\n        this.densityChartOptions = {\n            color: ['#3398DB'],\n            animation: false,\n            grid: { left: 0, top: 10, right: 0, bottom: 0, containLabel: true },\n            xAxis: {\n                type: 'value',\n                min: minVal,\n                max: maxVal,\n                axisTick: { show: true },\n                axisLine: { show: true },\n                axisLabel: { color: '#999999' }\n            },\n            yAxis: {\n                type: 'value',\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { show: false },\n                splitLine: { show: false },\n                name: 'Density',\n                min: 0,\n                max: maxDensity\n            },\n            series: [pdfSeries, histogramSeries]\n        };\n    }\n}\n","<div class=\"card-layout\">\n    <div class=\"card-layout__section card-layout__section--vertical\">\n        <div class=\"card-layout__section card-layout__section--horizontal\">\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Hypothesis</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Tested hypothesis</th>\n                                <td class=\"stats-table__cell\">\n                                    <u>{{ params.xColumn.name }}</u>\n                                    and\n                                    <u>{{ params.yColumn.name }}</u>\n                                    are independent\n                                </td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Significance level</th>\n                                <td class=\"stats-table__cell\">\n                                    {{ 1 - params.confidenceLevel | smarterNumber }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Results</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Chi-square statistic</th>\n                                <td class=\"stats-table__cell\">{{ results.statistic | smarterNumber }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Degrees of freedom</th>\n                                <td class=\"stats-table__cell\">{{ results.dof }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">𝘱-value</th>\n                                <td class=\"stats-table__cell\">\n                                    <colored-pvalue\n                                        [pvalue]=\"results.pvalue\"\n                                        [significanceLevel]=\"1 - params.confidenceLevel\"\n                                    ></colored-pvalue>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n        <div class=\"card-layout__section\">\n            <div class=\"card-layout__content\">\n                <div class=\"test-conclusion\">\n                    <ng-container *ngIf=\"isRejected else inconclusive\">\n                        <p class=\"test-conclusion__wording test-conclusion__wording--rejected\">\n                            Variables\n                            <u>{{ params.xColumn.name }}</u>\n                            and\n                            <u>{{ params.yColumn.name }}</u>\n                            are not independent\n                        </p>\n                    </ng-container>\n\n                    <ng-template #inconclusive>\n                        <p class=\"test-conclusion__wording\">\n                            The test is inconclusive about whether variables\n                            <u>{{ params.xColumn.name }}</u>\n                            and\n                            <u>{{ params.yColumn.name }}</u>\n                            are not independent\n                        </p>\n                    </ng-template>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"frequency-table\">\n    <table class=\"stats-table\">\n        <tbody class=\"stats-table__body\">\n            <tr class=\"stats-table__row stats-table__row--colored\">\n                <th class=\"stats-table__head\"></th>\n                <th\n                    *ngFor=\"let x of results.freqTableData.xValues;\"\n                    colspan=\"2\"\n                    class=\"stats-table__head stats-table__head--center\"\n                >\n                    <ng-container *ngIf=\"x.type == 'anum'; else others\">{{ x | filterName }}</ng-container>\n                    <ng-template #others>...</ng-template>\n                </th>\n                <th class=\"stats-table__title stats-table__title--center\">Total</th>\n            </tr>\n            <tr class=\"stats-table__row stats-table__row--colored\">\n                <th class=\"stats-table__head\"></th>\n                <ng-container *ngFor=\"let x of results.freqTableData.xValues;\">\n                    <ng-container *ngIf=\"x.type == 'anum'; else others\">\n                        <th class=\"stats-table__head\">Actual</th>\n                        <th class=\"stats-table__head\">Expected</th>\n                    </ng-container>\n                    <ng-template #others>\n                        <th class=\"stats-table__head\"></th>\n                        <th class=\"stats-table__head\"></th>\n                    </ng-template>\n                </ng-container>\n                <th class=\"stats-table__head\"></th>\n            </tr>\n            <tr class=\"stats-table__row stats-table__row--invisible\"></tr>\n            <tr\n                *ngFor=\"let y of results.freqTableData.yValues; let j = index;\"\n                class=\"stats-table__row\"\n            >\n                <th class=\"stats-table__head stats-table__head--colored\">\n                    <ng-container *ngIf=\"y.type == 'anum'; else others\">{{ y | filterName }}</ng-container>\n                    <ng-template #others>...</ng-template>\n                </th>\n                <ng-container *ngFor=\"let x of results.freqTableData.xValues; let i = index;\">\n                    <ng-container *ngIf=\"y.type == 'anum' && x.type == 'anum'; else others\">\n                        <td class=\"stats-table__cell left-bordered\">\n                            {{ results.freqTableData.counts[results.freqTableData.yValues.length * i + j] }}\n                        </td>\n                        <td\n                            [style.color]=\"cellColors[results.freqTableData.yValues.length * i + j]\"\n                            class=\"stats-table__cell\"\n                        >\n                            {{ results.freqTableData.expectedCounts[results.freqTableData.yValues.length * i + j] | smarterNumber }}\n                        </td>\n                    </ng-container>\n                    <ng-template #others>\n                        <td\n                            colspan=\"2\"\n                            class=\"left-bordered\"\n                        ></td>\n                    </ng-template>\n                </ng-container>\n                <td class=\"stats-table__cell left-bordered\">{{ results.freqTableData.yCounts[j] }}</td>\n            </tr>\n            <tr class=\"stats-table__row\">\n                <th class=\"stats-table__title stats-table__title--colored\">Total</th>\n                <td\n                    *ngFor=\"let x of results.freqTableData.xValues; let i = index;\"\n                    colspan=\"2\"\n                    class=\"stats-table__cell left-bordered\"\n                >\n                    {{ results.freqTableData.xCounts[i] }}\n                </td>\n                <td class=\"stats-table__cell left-bordered\">{{ results.freqTableData.total }}</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Chi2IndTestCard } from 'src/generated-sources';\nimport _ from 'lodash';\nimport d3 from 'd3';\n\n@Component({\n    selector: 'chi2-ind-test-card-body',\n    templateUrl: './chi2-ind-test-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/test-conclusion.less',\n        '../../../../shared-styles/card-layout.less',\n        '../../../../shared-styles/stats-table.less',\n        './chi2-ind-test-card-body.component.less'\n    ]\n})\nexport class Chi2IndTestCardBodyComponent implements OnChanges {\n    @Input() params: Chi2IndTestCard;\n    @Input() results: Chi2IndTestCard.Chi2IndTestCardResult;\n    cellColors: string[];\n\n    get isRejected() {\n        return this.results.pvalue <= (1 - this.params.confidenceLevel);\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.results) {\n            this.rebuildColorScale();\n        }\n    }\n\n    rebuildColorScale() {\n        // Compute how much each cell contributes to the chi2 score\n        const chi2contribution = _.zip(\n            this.results.freqTableData.counts,\n            this.results.freqTableData.expectedCounts\n        ).map(([actual, expected], flatIndex) => {\n            const xIdx = Math.floor(flatIndex / this.results.freqTableData.yValues.length);\n            const yIdx = Math.floor(flatIndex % this.results.freqTableData.yValues.length);\n            // Check if X and Y values are actual values (=> not \"others\")\n            if (this.results.freqTableData.xValues[xIdx].type === 'anum'\n                && this.results.freqTableData.yValues[yIdx].type === 'anum') {\n                return Math.pow(actual! - expected!, 2) / expected!;\n            }\n            // Ignore the difference if one of the axes is \"others\", because we don't display it\n            return 0;\n        });\n        const maxContribution = _.max(chi2contribution) || 0;\n        const colorScale = d3.scale.linear<string>().domain([0, maxContribution]).range(['#888888', '#CC2222']);\n\n        this.cellColors = chi2contribution.map(sqDiff => colorScale(sqDiff));\n    }\n}\n","<div class=\"card-layout\">\n    <div class=\"card-layout__section card-layout__section--horizontal\">\n        <div class=\"card-layout__section card-layout__section--vertical\">\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Summary</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Count</th>\n                                <td class=\"stats-table__cell\">{{ results.boxPlot.countComplete }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Sample mean</th>\n                                <td class=\"stats-table__cell\">{{ results.boxPlot.mean | smarterNumber }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Sample standard deviation</th>\n                                <td class=\"stats-table__cell\">{{ results.boxPlot.stdDev | smarterNumber }}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Hypothesis</div>\n                <div class=\"card-layout__content\">\n\n                    <table class=\"stats-table\">\n\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Hypothesized mean</th>\n                                <td class=\"stats-table__cell\">{{ params.hypothesizedMean | smarterNumber }}</td>\n                            </tr>\n                            <tr *ngIf=\"params.knownStdDev != null\">\n                                <th class=\"stats-table__head\">Standard deviation (known)</th>\n                                <td class=\"stats-table__cell\">{{ params.knownStdDev | smarterNumber }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Significance level</th>\n                                <td class=\"stats-table__cell\">\n                                    {{ 1 - params.confidenceLevel | smarterNumber }}\n                                </td>\n                            </tr>\n\n                        </tbody>\n                    </table>\n\n                </div>\n            </div>\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Results</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <!-- DOF is only relevant for Student's test -->\n                            <tr\n                                *ngIf=\"params.knownStdDev == null\"\n                                class=\"stats-table__row\"\n                            >\n                                <th class=\"stats-table__head\">Degrees of freedom</th>\n                                <td class=\"stats-table__cell\">{{ results.dof }}</td>\n                            </tr>\n\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">\n                                    <ng-container *ngIf=\"params.knownStdDev == null; else ztest\">Student's 𝘵-statistic</ng-container>\n                                    <ng-template #ztest>z-statistic</ng-template>\n                                </th>\n                                <td class=\"stats-table__cell\">{{ results.statistic | smarterNumber }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">𝘱-value</th>\n                                <td class=\"stats-table__cell\">\n                                    <colored-pvalue\n                                        [pvalue]=\"results.pvalue\"\n                                        [significanceLevel]=\"1 - params.confidenceLevel\"\n                                    ></colored-pvalue>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-layout__section card-layout__section--side\">\n            <div class=\"card-layout__title\">Test statistic distribution</div>\n            <div class=\"card-layout__content tzdistribution\">\n                <lazy-echart\n                    [options]=\"statisticDistributionChartOptions\">\n                </lazy-echart>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"test-conclusion\">\n    <ng-container *ngIf=\"isRejected else inconclusive\">\n        <p class=\"test-conclusion__wording test-conclusion__wording--rejected\">\n            The population mean of\n            <u>{{ params.column.name }}</u>\n            is different from\n            <u>{{ params.hypothesizedMean | smarterNumber }}</u>\n        </p>\n    </ng-container>\n\n    <ng-template #inconclusive>\n        <p class=\"test-conclusion__wording\">\n            The test is inconclusive about whether the population mean of\n            <u>{{ params.column.name }}</u>\n            is different from\n            <u>{{ params.hypothesizedMean | smarterNumber }}</u>\n        </p>\n    </ng-template>\n</div>\n","import { Component, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { TZTest1SampCard } from 'src/generated-sources';\nconst { jStat } = require('jStat'); // This library is packaged as shit\nimport * as _ from 'lodash';\nimport { EChartOption } from 'echarts';\n\n@Component({\n    selector: 'tztest1-samp-card-body',\n    templateUrl: './tztest1-samp-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/test-conclusion.less',\n        '../../../../shared-styles/stats-table.less',\n        '../../../../shared-styles/card-layout.less',\n        './tztest1-samp-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TZTest1SampCardBodyComponent implements OnChanges {\n    @Input() params: TZTest1SampCard;\n    @Input() results: TZTest1SampCard.TZTest1SampCardResult;\n\n    statisticDistributionChartOptions: EChartOption;\n\n    ngOnChanges() {\n        let statDistribPdf;\n        if (this.params.knownStdDev != null) {\n            statDistribPdf = (x: number): number => jStat.normal.pdf(x, 0, 1);\n        } else {\n            statDistribPdf = (x: number): number => jStat.studentt.pdf(x, this.results.dof);\n        }\n\n        this.rebuildTZDistributionChart(statDistribPdf, this.results.statistic);\n    }\n\n    get isRejected() {\n        return this.results.pvalue <= (1 - this.params.confidenceLevel);\n    }\n\n    rebuildTZDistributionChart(distribution: (x: number) => number, statistic: number) {\n        const absStatistic = Math.abs(statistic);\n        const xMax = Math.max(absStatistic * 1.2, 6);\n        const xMin = Math.min(-absStatistic * 1.2, -6);\n        const nbPoints = 100;\n\n        const xVals = _.range(0, nbPoints + 1)\n            .map(pos => xMin * (pos / nbPoints) + xMax * (1 - pos / nbPoints));\n        xVals.push(statistic);\n        xVals.push(-statistic);\n        xVals.sort((a, b) => a - b);\n\n        const xValsBefore = xVals.filter(x => x <= -absStatistic);\n        const xValsAfter = xVals.filter(x => x >= absStatistic);\n\n        const yValsBefore = _.map(xValsBefore, x => distribution(x));\n        const yValsAfter = _.map(xValsAfter, x => distribution(x));\n        const yVals = _.map(xVals, x => distribution(x));\n\n        this.statisticDistributionChartOptions = {\n            color: ['#3398DB'],\n            animation: false,\n            tooltip: {\n                trigger: 'item',\n                axisPointer: { type: 'none' }\n            },\n            grid: { left: 0, top: 10, right: 0, bottom: 0, containLabel: true },\n            xAxis: [{\n                type: 'value',\n                axisTick: { show: true },\n                axisLine: { show: true },\n                axisLabel: { color: '#999999' }\n            }],\n            yAxis: {\n                type: 'value',\n                axisLine: { show: false },\n                axisTick: { show: false },\n                axisLabel: { color: '#999999' }\n            },\n            series: [\n                {\n                    type: 'line',\n                    data: _.zip(xVals, yVals),\n                    symbol: 'none'\n                },\n                {\n                    type: 'line',\n                    data: _.zip(xValsBefore, yValsBefore),\n                    symbol: 'none',\n                    areaStyle: {},\n                    lineStyle: { opacity: 0 },\n                    markLine: {\n                        silent: true,\n                        symbolSize: 0,\n                        label: {\n                            position: 'middle',\n                        },\n                        data: [{\n                            label: 'Oups',\n                            xAxis: this.results.statistic\n                        }] as any\n                    }\n                },\n                {\n                    type: 'line',\n                    data: _.zip(xValsAfter, yValsAfter),\n                    symbol: 'none',\n                    areaStyle: {},\n                    lineStyle: { opacity: 0 }\n                },\n\n            ]\n        };\n    }\n}\n","<div class=\"card-layout\">\n    <div class=\"card-layout__section card-layout__section--horizontal\">\n        <div class=\"card-layout__section card-layout__section--vertical\">\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Summary</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Count</th>\n                                <td class=\"stats-table__cell\">{{ results.boxPlot.countComplete }}</td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Sample median</th>\n                                <td class=\"stats-table__cell\">{{ results.boxPlot.median | smarterNumber }}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"card-layout__section\">\n                <div class=\"card-layout__title\">Hypothesis</div>\n                <div class=\"card-layout__content\">\n                    <table class=\"stats-table\">\n                        <tbody class=\"stats-table__body\">\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Hypothesized median</th>\n                                <td class=\"stats-table__cell\">\n                                    {{ params.hypothesizedMedian | smarterNumber }}\n                                </td>\n                            </tr>\n                            <tr class=\"stats-table__row\">\n                                <th class=\"stats-table__head\">Significance level</th>\n                                <td class=\"stats-table__cell\">\n                                    {{ 1 - params.confidenceLevel | smarterNumber }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-layout__section\">\n            <div class=\"card-layout__title\">Results</div>\n            <div class=\"card-layout__content\">\n                <table class=\"stats-table\">\n                    <tbody class=\"stats-table__body\">\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">Count &lt; hypothesized median</th>\n                            <td class=\"stats-table__cell\">{{ results.nbSmaller }}</td>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">Count &gt; hypothesized median</th>\n                            <td class=\"stats-table__cell\">{{ results.nbLarger }}</td>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">\n                                Count = hypothesized median\n                                <span class=\"text-weak\">(ties are ignored)</span>\n                            </th>\n                            <td class=\"stats-table__cell\">\n                                {{ (results.boxPlot.countComplete || 0) - (results.nbLarger + results.nbSmaller) }}\n                            </td>\n                        </tr>\n                        <tr class=\"stats-table__row\">\n                            <th class=\"stats-table__head\">𝘱-value</th>\n                            <td class=\"stats-table__cell\">\n                                <colored-pvalue\n                                    [pvalue]=\"results.pvalue\"\n                                    [significanceLevel]=\"1 - params.confidenceLevel\"\n                                ></colored-pvalue>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"test-conclusion\">\n    <ng-container *ngIf=\"isRejected else inconclusive\">\n        <p class=\"test-conclusion__wording test-conclusion__wording--rejected\">\n            The population median of\n            <u>{{ params.column.name }}</u>\n            is different from\n            <u>\n                {{ params.hypothesizedMedian | smarterNumber }}\n            </u>\n        </p>\n    </ng-container>\n\n    <ng-template #inconclusive>\n        <p class=\"test-conclusion__wording\">\n            The test is inconclusive about whether the population median of\n            <u>{{ params.column.name }}</u>\n            is different from\n            <u>\n                {{ params.hypothesizedMedian | smarterNumber }}\n            </u>\n        </p>\n    </ng-template>\n</div>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { SignTest1SampCard } from 'src/generated-sources';\n\n@Component({\n    selector: 'sign-test1-samp-card-body',\n    templateUrl: './sign-test1-samp-card-body.component.html',\n    styleUrls: [\n        '../../../../shared-styles/test-conclusion.less',\n        '../../../../shared-styles/stats-table.less',\n        '../../../../shared-styles/card-layout.less',\n        './sign-test1-samp-card-body.component.less'\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SignTest1SampCardBodyComponent {\n    @Input() params: SignTest1SampCard;\n    @Input() results: SignTest1SampCard.SignTest1SampCardResult;\n\n    get isRejected() {\n        return this.results.pvalue <= (1 - this.params.confidenceLevel);\n    }\n}\n","<div>\n    <modal-header [title]=\"data.title\" [icon]=\"data.icon\"></modal-header>\n    <div class=\"modal-body flex\">\n        {{data.message}}\n    </div>\n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\" *ngIf=\"!data.danger\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel();\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm();\" autofocus>Confirm</button>\n        </div>\n        <div class=\"pull-right\" *ngIf=\"data.danger\">\n            <!-- Dangerous modals don't validate on enter-->\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel();\" tabindex=\"-1\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-danger\" (click)=\"confirm();\" tabindex=\"-1\">Confirm</button>\n        </div>\n    </div>\n</div>","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { realAny } from 'dku-frontend-core';\n\n@Component({\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./confirm-modal.component.less']\n})\nexport class ConfirmModalComponent {\n\n    constructor(\n        public dialogRef: MatDialogRef<realAny, boolean>,\n        @Inject(MAT_DIALOG_DATA) public data: {\n            title: string,\n            message: string,\n            danger: boolean,\n            icon?: string\n        }\n    ) { }\n\n    confirm() {\n        this.dialogRef.close(true);\n    }\n\n    cancel() {\n        this.dialogRef.close(false);\n    }\n\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { realAny } from 'dku-frontend-core';\n\n@Component({\n  selector: 'ack-modal',\n  templateUrl: './ack-modal.component.html',\n  styleUrls: ['./ack-modal.component.less']\n})\nexport class AckModalComponent {\n\n    constructor(\n        public dialogRef: MatDialogRef<realAny, boolean>,\n        @Inject(MAT_DIALOG_DATA) public data: {\n            title: string,\n            message: string,\n            icon?: string\n        }\n    ) { }\n\n    ack() {\n        this.dialogRef.close(); //WARNING: You are not allowed to modify this class and use a value for resolution\n    }\n}\n","<div>\n    <modal-header [title]=\"data.title\" [icon]=\"data.icon\"></modal-header>\n    <div class=\"modal-body flex\">\n        {{data.message}}\n    </div>\n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"ack();\" autofocus>Ok</button>\n        </div>\n    </div>\n</div>\n","<div>\n    <modal-header [title]=\"data.title\" [icon]=\"data.icon\"></modal-header>\n    <div class=\"modal-body flex dkuform-horizontal\">\n        <div class=\"control-group\">\n            <label for=\"value\" class=\"control-label\">{{data.message}}</label>\n            <div class=\"controls\">\n                <input id=\"value\" type=\"text\" [(ngModel)]=\"value\" name=\"value\"/>\n            </div>\n        </div>\n    </div>\n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\" *ngIf=\"!data.danger\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel();\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm();\"  [disabled]=\"value === ''\" autofocus>Ok</button>\n        </div>\n        <div class=\"pull-right\" *ngIf=\"data.danger\">\n            <!-- Dangerous modals don't validate on enter-->\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel();\" tabindex=\"-1\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-danger\" (click)=\"confirm();\" tabindex=\"-1\" [disabled]=\"value === ''\">Ok</button>\n        </div>\n    </div>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { realAny } from 'dku-frontend-core';\n\n@Component({\n    selector: 'prompt-modal',\n    templateUrl: './prompt-modal.component.html',\n    styleUrls: ['./prompt-modal.component.less']\n})\nexport class PromptModalComponent implements OnInit {\n    value: string;\n\n    constructor(\n        public dialogRef: MatDialogRef<realAny, string>,\n        @Inject(MAT_DIALOG_DATA) public data: {\n            title: string,\n            message: string,\n            defaultVal: string,\n            danger?: boolean\n            icon?: string\n        }\n    ) {\n        this.value = this.data.defaultVal;\n    }\n\n    confirm() {\n        this.dialogRef.close(this.value);\n    }\n\n    cancel() {\n        this.dialogRef.close(undefined);\n    }\n\n    ngOnInit(): void {\n    }\n}\n","<div>\n    \n    <modal-header [title]=\"data.title\" [icon]=\"data.icon\"></modal-header>\n    \n    <div class=\"modal-body\">\n        <p *ngIf=\"data.message\" [innerHtml]=\"data.message\"></p>\n        <div class=\"selectable-items-list\">\n            <div *ngFor=\"let item of data.items\" class=\"selectable-item selectable\" [class.selected]=\"item === selectedItem\" (click)=\"selectItem(item)\">\n                <div class=\"selection-indicator\">\n                    <i class=\"icon-ok\" title=\"active\" *ngIf=\"item === selectedItem\"></i>\n                </div>\n                <p style=\"margin: 0px 10px 0px 10px\" class=\"ng-binding\">\n                    <strong class=\"ng-binding\">{{item.title}} {{item.desc ? \"&ndash;\": \"\"}} </strong>\n                    {{item.desc}}\n                </p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"modal-footer modal-footer-std-buttons\">\n        <div class=\"pull-right\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" autofocus>Ok</button>\n        </div>\n    </div>\n    \n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { realAny } from 'dku-frontend-core';\n\n@Component({\n  selector: 'select-modal',\n  templateUrl: './select-modal.component.html',\n  styleUrls: ['./select-modal.component.less']\n})\nexport class SelectModalComponent implements OnInit {\n    selectedItem: any;\n\n    constructor(\n        public dialogRef: MatDialogRef<realAny, string>,\n        @Inject(MAT_DIALOG_DATA) public data: {\n            title: string,\n            message: string,\n            icon?: string,\n            items: any[],\n            defaultItem: any,\n        }\n    ) {\n        this.selectedItem = this.data.defaultItem;\n    }\n\n    ngOnInit(): void {\n    }\n\n    selectItem(item: any) {\n        this.selectedItem = item;\n    }\n\n    confirm() {\n        this.dialogRef.close(this.selectedItem);\n    }\n\n    cancel() {\n        this.dialogRef.close();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { NgxEchartsModule } from 'ngx-echarts';\n\nimport { EdaComponent } from '@features/eda/eda.component';\nimport { ModalsModule } from '@shared/modals/modals.module';\nimport { PipesModule } from '@shared/pipes/pipes.module';\nimport { DataikuWT1Module } from '@core/dataiku-wt1/dataiku-wt1.module';\nimport { WorksheetComponent } from './worksheet/worksheet.component';\nimport { ColumnCardBodyComponent } from './worksheet/cards/body/column-card-body/column-card-body.component';\nimport { HeaderCardBodyComponent } from './worksheet/cards/body/header-card-body/header-card-body.component';\nimport { CategoricalHistogramCardBodyComponent } from './worksheet/cards/body/categorical-histogram-card-body/categorical-histogram-card-body.component';\nimport { GenericSummaryStatsCardBodyComponent } from './worksheet/cards/body/generic-summary-stats-card-body/generic-summary-stats-card-body.component';\nimport { QuantilesTableCardBodyComponent } from './worksheet/cards/body/quantiles-table-card-body/quantiles-table-card-body.component';\nimport { NumericalHistogramCardBodyComponent } from './worksheet/cards/body/numerical-histogram-card-body/numerical-histogram-card-body.component';\nimport { UnivariateFrequencyTableCardBodyComponent } from './worksheet/cards/body/univariate-frequency-table-card-body/univariate-frequency-table-card-body.component';\nimport { BivariateHistogramCardBodyComponent } from './worksheet/cards/body/bivariate-histogram-card-body/bivariate-histogram-card-body.component';\nimport { Fit2DDistributionCardBodyComponent } from './worksheet/cards/body/fit-2d-distribution-card-body/fit-2d-distribution-card-body.component';\nimport { TopLevelCardComponent } from './worksheet/cards/top-level-card/top-level-card.component';\nimport { WorksheetRootCardComponent } from './worksheet/cards/worksheet-root-card/worksheet-root-card.component';\nimport { CardBodyComponent } from './worksheet/cards/card-body/card-body.component';\nimport { GroupedCardBodyComponent } from './worksheet/cards/body/grouped-card-body/grouped-card-body.component';\nimport { GroupedHeaderCardBodyComponent } from './worksheet/cards/body/grouped-header-card-body/grouped-header-card-body.component';\nimport { ColumnTitleComponent } from './worksheet/cards/column-title/column-title.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatInputModule } from '@angular/material/input';\nimport { CardMenuComponent } from './worksheet/cards/card-menu/card-menu.component';\nimport { FitDistributionCardBodyComponent } from './worksheet/cards/body/fit-distribution-card-body/fit-distribution-card-body.component';\nimport { FitCurveCardBodyComponent } from './worksheet/cards/body/fit-curve-card-body/fit-curve-card-body.component';\nimport { CorrelationMatrixCardBodyComponent } from './worksheet/cards/body/correlation-matrix-card-body/correlation-matrix-card-body.component';\nimport { InViewportModule } from 'ng-in-viewport';\nimport { ComponentsModule } from '@shared/components/components.module';\nimport { NewCardModalComponent } from './worksheet/card-wizard/new-card-modal/new-card-modal.component';\nimport { KsTest2SampCardBodyComponent } from './worksheet/cards/body/ks-test-2samp-card-body/ks-test-2samp-card-body.component';\nimport { GenericPairwiseTestCardBodyComponent } from './worksheet/cards/body/generic-pairwise-test-card-body/generic-pairwise-test-card-body.component';\nimport { FilterNamePipe } from './pipes/filter-name.pipe';\nimport { UnavailableCardBodyComponent } from './worksheet/cards/body/unavailable-card-body/unavailable-card-body.component';\nimport { PCACardBodyComponent } from './worksheet/cards/body/pca-card-body/pca-card-body.component';\nimport { BivariateFrequencyTableCardBodyComponent } from './worksheet/cards/body/bivariate-frequency-table-card-body/bivariate-frequency-table-card-body.component';\nimport { BivariateBoxPlotCardBodyComponent } from './worksheet/cards/body/bivariate-box-plot-card-body/bivariate-box-plot-card-body.component';\nimport { MosaicPlotCardBodyComponent } from './worksheet/cards/body/mosaic-plot-card-body/mosaic-plot-card-body.component';\nimport { ScatterPlotCardBodyComponent } from './worksheet/cards/body/scatter-plot-card-body/scatter-plot-card-body.component';\nimport { WidgetsModule } from '@app/widgets/widgets.module';\nimport { GenericNSampTestCardBodyComponent } from './worksheet/cards/body/generic-nsamp-test-card-body/generic-nsamp-test-card-body.component';\nimport { ShapiroNormalityTestCardBodyComponent } from './worksheet/cards/body/shapiro-normality-test-card-body/shapiro-normality-test-card-body.component';\nimport { Chi2IndTestCardBodyComponent } from './worksheet/cards/body/chi2-ind-test-card-body/chi2-ind-test-card-body.component';\nimport { TZTest1SampCardBodyComponent } from './worksheet/cards/body/tztest1-samp-card-body/tztest1-samp-card-body.component';\nimport { SignTest1SampCardBodyComponent } from './worksheet/cards/body/sign-test1-samp-card-body/sign-test1-samp-card-body.component';\nimport { EditConfidenceLevelSettingsComponent } from './worksheet/edit-confidence-level-settings/edit-confidence-level-settings.component';\nimport { SampleSettingsComponent } from './worksheet/sample-settings/sample-settings.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeightEqualizerComponent } from '@shared/directives/height-equalizer/height-equalizer.component';\nimport { SplitBySettingsComponent } from './worksheet/split-by-settings/split-by-settings.component';\nimport { DebugCardModalComponent } from './worksheet/debug-card-modal/debug-card-modal.component';\nimport { DeleteDialogComponent } from './worksheet/delete-dialog/delete-dialog.component';\nimport { InsightCardComponent } from './worksheet/cards/insight-card/insight-card.component';\nimport { CardEditorComponent } from './worksheet/card-wizard/card-editor/card-editor.component';\nimport { DistributionNamePipe } from './pipes/distribution-name.pipe';\nimport { CardHelpComponent } from './worksheet/cards/card-help/card-help.component';\nimport { TZTest1SampCardHelpComponent } from './worksheet/cards/help/tztest1-samp-card-help/tztest1-samp-card-help.component';\nimport { ShapiroNormalityTestCardHelpComponent } from './worksheet/cards/help/shapiro-normality-test-card-help/shapiro-normality-test-card-help.component';\nimport { KsTest2SampCardHelpComponent } from './worksheet/cards/help/ks-test2-samp-card-help/ks-test2-samp-card-help.component';\nimport { SignTest1SampCardHelpComponent } from './worksheet/cards/help/sign-test1-samp-card-help/sign-test1-samp-card-help.component';\nimport { Chi2IndTestCardHelpComponent } from './worksheet/cards/help/chi2-ind-test-card-help/chi2-ind-test-card-help.component';\nimport { GenericSummaryStatsCardConfigComponent } from './worksheet/cards/config/generic-summary-stats-card-config/generic-summary-stats-card-config.component';\nimport { EditCardModalComponent } from './worksheet/card-wizard/edit-card-modal/edit-card-modal.component';\nimport { UnivariateFrequencyTableCardConfigComponent } from './worksheet/cards/config/univariate-frequency-table-card-config/univariate-frequency-table-card-config.component'\nimport { CategoricalHistogramCardConfigComponent } from './worksheet/cards/config/categorical-histogram-card-config/categorical-histogram-card-config.component';\nimport { HeatmapConfigComponent } from './worksheet/cards/config/heatmap-config/heatmap-config.component';\nimport { QuantilesTableCardConfigComponent } from './worksheet/cards/config/quantiles-table-card-config/quantiles-table-card-config.component';\nimport { NumericalHistogramCardConfigComponent } from './worksheet/cards/config/numerical-histogram-card-config/numerical-histogram-card-config.component';\nimport { Abstract2DPivotCardConfigComponent } from './worksheet/cards/config/abstract-2d-pivot-card-config/abstract-2d-pivot-card-config.component';\nimport { BivariateBoxPlotCardConfigComponent } from './worksheet/cards/config/bivariate-box-plot-card-config/bivariate-box-plot-card-config.component';\nimport { RenameWorksheetDialogComponent } from './worksheet/rename-worksheet-dialog/rename-worksheet-dialog.component';\nimport { ScatterPlotCardConfigComponent } from './worksheet/cards/config/scatter-plot-card-config/scatter-plot-card-config.component';\nimport { UnivariateHeaderCardConfigComponent } from './worksheet/cards/config/univariate-header-card-config/univariate-header-card-config.component';\nimport { BivariateHeaderCardConfigComponent } from './worksheet/cards/config/bivariate-header-card-config/bivariate-header-card-config.component';\nimport { MultivariateCardConfigComponent } from './worksheet/cards/config/multivariate-card-config/multivariate-card-config.component';\nimport { TZTest1SampCardConfigComponent } from './worksheet/cards/config/tztest1-samp-card-config/tztest1-samp-card-config.component';\nimport { SignTest1SampCardConfigComponent } from './worksheet/cards/config/sign-test1-samp-card-config/sign-test1-samp-card-config.component';\nimport { ShapiroNormalityTestCardConfigComponent } from './worksheet/cards/config/shapiro-normality-test-card-config/shapiro-normality-test-card-config.component';\nimport { Abstract2SampCardConfigComponent } from './worksheet/cards/config/abstract-2-samp-card-config/abstract-2-samp-card-config.component';\nimport { AbstractNSampCardConfigComponent } from './worksheet/cards/config/abstract-n-samp-card-config/abstract-n-samp-card-config.component';\nimport { FitDistributionCardConfigComponent } from './worksheet/cards/config/fit-distribution-card-config/fit-distribution-card-config.component';\nimport { FitCurveCardConfigComponent } from './worksheet/cards/config/fit-curve-card-config/fit-curve-card-config.component';\nimport { Fit2DDistributionCardConfigComponent } from './worksheet/cards/config/fit-2d-distribution-card-config/fit-2d-distribution-card-config.component';\nimport { AbstractPairwiseTestCardConfigComponent } from './worksheet/cards/config/abstract-pairwise-test-card-config/abstract-pairwise-test-card-config.component';\nimport { ListBoxComponent } from './worksheet/card-wizard/list-box/list-box.component';\nimport { ListBoxFormControlComponent } from './worksheet/card-wizard/list-box-form-control/list-box-form-control.component';\nimport { SingleVariableSelectorComponent } from './worksheet/card-wizard/single-variable-selector/single-variable-selector.component';\nimport { Chi2IndTestCardConfigComponent } from './worksheet/cards/config/chi2-ind-test-card-config/chi2-ind-test-card-config.component';\nimport { GenericNSampMoodTestHelpComponent } from './worksheet/cards/help/generic-nsamp-mood-test-help/generic-nsamp-mood-test-help.component';\nimport { OneWayANOVACardHelpComponent } from './worksheet/cards/help/one-way-anova-card-help/one-way-anova-card-help.component';\nimport { GenericNSampTTestCardHelpComponent } from './worksheet/cards/help/generic-nsamp-ttest-card-help/generic-nsamp-ttest-card-help.component';\nimport { ListComparedPopulationsComponent } from './worksheet/cards/help/shared-fragments/list-compared-populations/list-compared-populations.component';\nimport { ColoredPValueComponent } from './worksheet/cards/help/shared-fragments/colored-pvalue/colored-pvalue.component';\nimport { CardTitlePipe } from './pipes/card-title.pipe';\nimport { DataikuAPIModule } from '@core/dataiku-api/dataiku-api.module';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { FilterNiceReprPipe } from './pipes/filter-nice-repr.pipe';\nimport { PartitionSelectionComponent } from './worksheet/partition-selection/partition-selection.component';\nimport { DuplicateWorksheetDialogComponent } from './worksheet/duplicate-worksheet-dialog/duplicate-worksheet-dialog.component';\nimport { BinningConfigComponent } from './worksheet/cards/config/binning-config/binning-config.component';\nimport { ContainerSettingsComponent } from './worksheet/container-settings/container-settings.component';\nimport { ValuesListModule } from '@app/widgets/lists/values-list/values-list.module';\nimport { EditableListModule } from '@app/widgets/lists/editable-list/editable-list.module';\nimport { DkuFrontendCoreModule } from 'dku-frontend-core';\nimport { HighlightSettingsComponent } from './worksheet/highlight-settings/highlight-settings.component';\nimport { WorksheetRedirectionPageComponent } from './pages/worksheet-redirection-page/worksheet-redirection-page.component';\n\n@NgModule({\n    declarations: [\n        EdaComponent,\n        WorksheetComponent,\n        InsightCardComponent,\n        ColumnCardBodyComponent,\n        HeaderCardBodyComponent,\n        CategoricalHistogramCardBodyComponent,\n        GenericSummaryStatsCardBodyComponent,\n        QuantilesTableCardBodyComponent,\n        NumericalHistogramCardBodyComponent,\n        UnivariateFrequencyTableCardBodyComponent,\n        BivariateHistogramCardBodyComponent,\n        BivariateFrequencyTableCardBodyComponent,\n        BivariateBoxPlotCardBodyComponent,\n        Fit2DDistributionCardBodyComponent,\n        TopLevelCardComponent,\n        WorksheetRootCardComponent,\n        CardBodyComponent,\n        GroupedCardBodyComponent,\n        GroupedHeaderCardBodyComponent,\n        ColumnTitleComponent,\n        CardMenuComponent,\n        FitDistributionCardBodyComponent,\n        FitCurveCardBodyComponent,\n        CorrelationMatrixCardBodyComponent,\n        NewCardModalComponent,\n        KsTest2SampCardBodyComponent,\n        GenericPairwiseTestCardBodyComponent,\n        CardTitlePipe,\n        FilterNamePipe,\n        UnavailableCardBodyComponent,\n        PCACardBodyComponent,\n        MosaicPlotCardBodyComponent,\n        ScatterPlotCardBodyComponent,\n        GenericNSampTestCardBodyComponent,\n        ShapiroNormalityTestCardBodyComponent,\n        Chi2IndTestCardBodyComponent,\n        TZTest1SampCardBodyComponent,\n        SignTest1SampCardBodyComponent,\n        EditConfidenceLevelSettingsComponent,\n        SampleSettingsComponent,\n        HeightEqualizerComponent,\n        SplitBySettingsComponent,\n        DebugCardModalComponent,\n        DeleteDialogComponent,\n        CardEditorComponent,\n        HeatmapConfigComponent,\n        DistributionNamePipe,\n        CardHelpComponent,\n        TZTest1SampCardHelpComponent,\n        ShapiroNormalityTestCardHelpComponent,\n        KsTest2SampCardHelpComponent,\n        SignTest1SampCardHelpComponent,\n        Chi2IndTestCardHelpComponent,\n        GenericSummaryStatsCardConfigComponent,\n        EditCardModalComponent,\n        CategoricalHistogramCardConfigComponent,\n        UnivariateFrequencyTableCardConfigComponent,\n        QuantilesTableCardConfigComponent,\n        NumericalHistogramCardConfigComponent,\n        Abstract2DPivotCardConfigComponent,\n        BivariateBoxPlotCardConfigComponent,\n        RenameWorksheetDialogComponent,\n        ScatterPlotCardConfigComponent,\n        UnivariateHeaderCardConfigComponent,\n        BivariateHeaderCardConfigComponent,\n        MultivariateCardConfigComponent,\n        TZTest1SampCardConfigComponent,\n        SignTest1SampCardConfigComponent,\n        ShapiroNormalityTestCardConfigComponent,\n        Abstract2SampCardConfigComponent,\n        AbstractNSampCardConfigComponent,\n        FitDistributionCardConfigComponent,\n        FitCurveCardConfigComponent,\n        Fit2DDistributionCardConfigComponent,\n        AbstractPairwiseTestCardConfigComponent,\n        ListBoxComponent,\n        ListBoxFormControlComponent,\n        SingleVariableSelectorComponent,\n        Chi2IndTestCardConfigComponent,\n        GenericNSampMoodTestHelpComponent,\n        OneWayANOVACardHelpComponent,\n        GenericNSampTTestCardHelpComponent,\n        ListComparedPopulationsComponent,\n        ColoredPValueComponent,\n        CardTitlePipe,\n        FilterNiceReprPipe,\n        PartitionSelectionComponent,\n        DuplicateWorksheetDialogComponent,\n        BinningConfigComponent,\n        ContainerSettingsComponent,\n        HighlightSettingsComponent,\n        WorksheetRedirectionPageComponent\n    ],\n    entryComponents: [\n        NewCardModalComponent,\n        EditCardModalComponent,\n        DebugCardModalComponent,\n        DeleteDialogComponent,\n        DuplicateWorksheetDialogComponent,\n        RenameWorksheetDialogComponent,\n        HeatmapConfigComponent\n    ],\n    exports: [EdaComponent],\n    imports: [\n        BrowserAnimationsModule,\n        ComponentsModule,\n        CommonModule,\n        DragDropModule,\n        FormsModule,\n        InViewportModule,\n        ModalsModule,\n        NgxEchartsModule,\n        MatMenuModule,\n        MatTooltipModule,\n        MatDividerModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatInputModule,\n        PipesModule,\n        WidgetsModule,\n        ReactiveFormsModule,\n        DataikuAPIModule,\n        DataikuWT1Module,\n        ScrollingModule,\n        ValuesListModule,\n        EditableListModule,\n        DkuFrontendCoreModule\n    ]\n})\nexport class EdaModule { }\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, defer, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DkuHttpService, HttpVerb } from 'dku-frontend-core';\n\nimport { EnrichedPromise } from '@core/dataiku-api/utils/enriched-promise';\nimport { realAny, Assert } from 'dku-frontend-core';\nimport { upgradePromiseCatchError } from '@core/dataiku-api/api-error';\n\nexport interface BackendResponse<T> {\n    data: T;\n    config: HttpConfig;\n    headers: any;\n}\n\nexport interface HttpConfig {\n    url: string;\n    method: HttpVerb;\n    headers: any;\n    params: any;\n    paramSerializer: Function;\n    transformRequest: Function;\n    xsrfCookieName: string;\n}\n\n/**\n * Implementation of DkuHttpService which falls back into AngularJS 'APIXHRService'\n */\n@Injectable({ providedIn: 'root' })\nexport class DkuLegacyHttpService extends DkuHttpService {\n    private API_PATH = '/dip/api';\n\n    constructor(@Inject('APIXHRService') private APIXHRService: any) {\n        super();\n    }\n\n    public request<T>(method: HttpVerb, path: string, params?: object): Observable<T> {\n        // defer() ensures we get a new promise at every subscription\n        // ('from(promise)' would not work because the promise would not re-evaluated)\n        return defer(() => {\n            // Rely on AngularJS layer\n            const legacyPromise: EnrichedPromise<BackendResponse<T>> =\n                this.APIXHRService(method, this.API_PATH + path, this.stringifyParams(params || {}), 'nospinner');\n            // Upgrade promise to play well with ZoneJS\n            const upgradedPromise = upgradePromiseCatchError(legacyPromise);\n            // Convert into observable\n            return from(upgradedPromise).pipe(map(resp => resp.data));\n        });\n    }\n\n    private stringifyParams(params: realAny): object {\n        Assert.trueish(params, 'Empty params object in private API'); // individual params may be nullish but we do want params object\n        const ret: realAny = {};\n        Object.keys(params).forEach(key => {\n            const value = params[key];\n            if (typeof value === 'object') {\n                ret[key] = JSON.stringify(value);\n            } else {\n                ret[key] = value;\n            }\n        });\n        return ret;\n    }\n}\n","// $q promise\nexport interface EnrichedPromise<T> extends Promise<T> {\n    success(x: (data: any, status: number, headers: any) => void): EnrichedPromise<T>;\n    update(x: (data: any, status: number, headers: any) => void): EnrichedPromise<T>;\n    error(x: (data: any, status: number, headers: any) => void): EnrichedPromise<T>;\n}\n\n/**\n * In short: make Angular2+ code work properly with promises returned by AngularJS's $q\n *\n * Here is why:\n * - AngularJS uses $q for promises: this is different than the standard/native \"Promise\"\n * - Angular2+ relies on ZoneJS to trigger change detection when appropriate\n * - ZoneJS works by monkey-patching all browser APIs including \"Promise\", but does NOT know about $q\n * - $q promises may be resolved outside the Angular zone\n * - Callbacks are not called in the Angular zone\n * - Angular2+ change detection is not run\n *\n * How it works:\n * - This helper replaces the (unpatched) $q promise by a native (patched) promise\n *\n * Notes:\n * - Update notifications are lost (it's a $q extension)\n * - Using 'UpgradeModule' alleviates the need for this fix because it syncs Angular 1 & 2 change detections\n *   BUT it also incurs a much larger overhead: this is the reason why we are doing this\n */\nexport function upgradePromise<T>(qPromise: EnrichedPromise<T>): Promise<T> {\n    return Promise.resolve(qPromise);\n}\n","import { PipesModule } from '@shared/pipes/pipes.module';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { EditTypeaheadComponent } from './edit-typeahead-input.component';\nimport { DowngradedEditTypeaheadInputComponent } from './downgraded/downgraded-edit-typeahead-input.component';\n\n\n@NgModule({\n    declarations: [\n        EditTypeaheadComponent,\n        DowngradedEditTypeaheadInputComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatAutocompleteModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatTooltipModule,\n        PipesModule\n    ],\n    exports: [ EditTypeaheadComponent ],\n    entryComponents: [ DowngradedEditTypeaheadInputComponent ]\n})\nexport class EditTypeAheadModule { }\n","import { BrowserModule } from '@angular/platform-browser';\nimport { DoBootstrap, NgModule, APP_INITIALIZER } from '@angular/core';\nimport { upgradedProviders } from '@migration/upgraded-providers';\nimport { DkuActivatedRouteService } from '@migration/dku-activated-route';\nimport { WidgetsModule } from '@app/widgets/widgets.module';\nimport { KeyValuesListModule } from './widgets/lists/key-values-list/key-values-list.module';\nimport { ValuesListModule } from './widgets/lists/values-list/values-list.module';\nimport { CredentialsListModule } from './widgets/lists/credentials-list/credentials-list.module';\nimport { ConnectionPropertiesListModule } from './widgets/lists/connection-properties-list/connection-properties-list.module';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ModalsModule } from '@shared/modals/modals.module';\nimport { CoreModule } from '@core/core.module';\nimport { EdaModule } from '@features/eda/eda.module';\n\nimport { EdaComponent } from '@features/eda/eda.component';\nimport { InsightCardComponent } from '@features/eda/worksheet/cards/insight-card/insight-card.component';\nimport { DataikuWT1Module } from '@core/dataiku-wt1/dataiku-wt1.module';\nimport { QaSelectorComponent } from './shared/directives/qa-selector/qa-selector.component';\nimport { QaModeService } from '@shared/directives/qa-mode/qa-mode.service';\nimport { QaSelectorService } from '@shared/directives/qa-selector/qa-selector.service';\nimport { DkuHttpService } from 'dku-frontend-core';\nimport { DkuLegacyHttpService } from '@core/requests/dku-legacy-http.service';\nimport { EditTypeAheadModule } from './widgets/inputs/edit-typeahead-input/edit-typeahead-input.module';\n\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        WidgetsModule,\n        BrowserAnimationsModule,\n        MatDialogModule,\n        // Core module (singleton services)\n        CoreModule,\n        ModalsModule,\n        EdaModule,\n        KeyValuesListModule,\n        ValuesListModule,\n        EditTypeAheadModule,\n        CredentialsListModule,\n        ConnectionPropertiesListModule,\n        DataikuWT1Module.legacy()\n    ],\n    entryComponents: [\n        EdaComponent,\n        InsightCardComponent,\n        QaSelectorComponent\n    ],\n    providers: [\n        ...upgradedProviders(),\n        QaModeService,\n        QaSelectorService,\n        DkuActivatedRouteService, // Helper to prepare the transition to Angular2+ router when the migration is full\n        { provide: '$scope', useExisting: '$rootScope' }, // Added to make upgraded angularjs directive work in modals... don't ask.\n        {\n            provide: APP_INITIALIZER,\n            useFactory: () => () => {},\n            deps: [QaModeService, QaSelectorService],\n            multi: true\n        },\n        { provide: DkuHttpService, useClass: DkuLegacyHttpService }\n    ],\n    bootstrap: [],\n    declarations: [QaSelectorComponent],\n})\nexport class AppModule implements DoBootstrap {\n    ngDoBootstrap() {\n    }\n}\n","import '@angular/compiler';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from '@app/app.module';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { patchZRender } from './patches/zrender-patch';\nimport { downgradeModule } from '@angular/upgrade/static';\nimport { StaticProvider } from '@angular/core';\nimport { downgradeComponents } from '@migration/downgraded-components';\nimport { downgradeProviders } from '@migration/downgraded-providers';\nimport { setAutoFreeze } from 'immer';\n\ndeclare var angular: any;\n\npatchZRender();\n\nif (environment.production) {\n    enableProdMode();\n    setAutoFreeze(false);\n}\n\nconst bootstrapFn = (extraProviders: StaticProvider[]) => {\n    return platformBrowserDynamic(extraProviders).bootstrapModule(AppModule);\n};\n\nangular.module('ng-upgrade', ['dataiku', downgradeModule(bootstrapFn)]);\n\ndowngradeProviders();\ndowngradeComponents();\n\nangular.bootstrap(document, ['ng-upgrade'], {\n    // strictDi: true means that angular rejects old-style dependancy declaration\n    // (ie using only function arguments names, because they cannot be minified)\n    // https://docs.angularjs.org/api/ng/directive/ngApp\n    strictDi: false\n});\n"],"sourceRoot":"webpack:///"}